
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'cypherAND AS COLON COMMA DASH DIVIDE DOT DQUOTE EQUALS FLOAT GREATERTHAN ID IF INTEGER LCURLY LESSTHAN LPAREN LSQUARE MATCH NOT OR PLUS RCURLY RETURN RPAREN RSQUARE STAR STRING THEN WHERE WORDcypher : queryquery : match_pattern returnstring : STRINGinteger : INTEGERfloat : FLOATname_label : WORD\n    | WORD COLON WORD\n    | COLON WORDmapping_list : WORD COLON literal\n    | mapping_list COMMA WORD COLON literal\n    node : LPAREN name_label RPAREN\n    | LPAREN name_label LCURLY mapping_list RCURLY RPAREN\n    | LPAREN RPAREN\n    | LPAREN WORD RPAREN\n    alias : WORD AS WORD\n    | object_attribute_lookup AS WORDliteral : INTEGER\n    | FLOAT\n    | STRING\n    relationship : LSQUARE WORD RSQUARE\n    | LSQUARE name_label RSQUAREleft_right : DASH relationship DASH GREATERTHANright_left : LESSTHAN DASH relationship DASHincomplete_relationship_chain : node left_right\n    | node right_left\n    | incomplete_relationship_chain node left_right\n    | incomplete_relationship_chain node right_left\n    relationship_chain : incomplete_relationship_chain noderelationship_chain_list : relationship_chain\n    | relationship_chain_list COMMA relationship_chainmatch_pattern : MATCH node\n    | MATCH relationship_chain_list\n    | MATCH relationship_chain_list where\n    | MATCH node where\n    binary_operator : EQUALS\n    | LESSTHAN\n    | GREATERTHANpredicate : object_attribute_lookup binary_operator literal\n    | object_attribute_lookup binary_operator object_attribute_lookupobject_attribute_lookup : WORD DOT WORDwhere : WHERE predicate\n    | where COMMA predicateprojection : object_attribute_lookup\n    | alias\n    | projection COMMA alias\n    | projection COMMA object_attribute_lookupreturn : RETURN projection'
    
_lr_action_items = {'MATCH':([0,],[4,]),'$end':([1,2,5,12,13,14,49,50,52,53,54,],[0,-1,-2,-47,-43,-44,-45,-46,-16,-40,-15,]),'RETURN':([3,7,8,10,16,22,25,28,34,40,42,44,53,55,67,68,69,70,71,79,],[6,-31,-32,-29,-34,-33,-13,-28,-41,-30,-11,-14,-40,-42,-39,-38,-17,-18,-19,-12,]),'LPAREN':([4,11,17,18,23,47,48,72,75,],[9,9,-24,-25,9,-26,-27,-22,-23,]),'WORD':([6,9,19,27,29,30,31,32,33,38,43,45,56,57,58,59,77,],[15,26,36,46,51,52,53,54,36,61,65,66,36,-35,-36,-37,80,]),'WHERE':([7,8,10,25,28,40,42,44,79,],[19,19,-29,-13,-28,-30,-11,-14,-12,]),'DASH':([7,21,25,28,37,41,42,44,63,73,74,79,],[20,39,-13,20,60,20,-11,-14,75,-20,-21,-12,]),'LESSTHAN':([7,25,28,35,41,42,44,53,79,],[21,-13,21,58,21,-11,-14,-40,-12,]),'COMMA':([8,10,12,13,14,16,22,25,28,34,40,42,44,49,50,52,53,54,55,64,67,68,69,70,71,79,81,83,],[23,-29,29,-43,-44,33,33,-13,-28,-41,-30,-11,-14,-45,-46,-16,-40,-15,-42,77,-39,-38,-17,-18,-19,-12,-9,-10,]),'RPAREN':([9,24,26,46,66,76,],[25,42,44,-8,-7,79,]),'COLON':([9,26,38,61,65,80,],[27,45,27,45,78,82,]),'AS':([13,15,50,51,53,],[30,32,30,32,-40,]),'DOT':([15,36,51,],[31,31,31,]),'LSQUARE':([20,39,],[38,38,]),'LCURLY':([24,26,46,66,],[43,-6,-8,-7,]),'EQUALS':([35,53,],[57,-40,]),'GREATERTHAN':([35,53,60,],[59,-40,72,]),'RSQUARE':([46,61,62,66,],[-8,73,74,-7,]),'INTEGER':([56,57,58,59,78,82,],[69,-35,-36,-37,69,69,]),'FLOAT':([56,57,58,59,78,82,],[70,-35,-36,-37,70,70,]),'STRING':([56,57,58,59,78,82,],[71,-35,-36,-37,71,71,]),'RCURLY':([64,69,70,71,81,83,],[76,-17,-18,-19,-9,-10,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'cypher':([0,],[1,]),'query':([0,],[2,]),'match_pattern':([0,],[3,]),'return':([3,],[5,]),'node':([4,11,23,],[7,28,41,]),'relationship_chain_list':([4,],[8,]),'relationship_chain':([4,23,],[10,40,]),'incomplete_relationship_chain':([4,23,],[11,11,]),'projection':([6,],[12,]),'object_attribute_lookup':([6,19,29,33,56,],[13,35,50,35,67,]),'alias':([6,29,],[14,49,]),'where':([7,8,],[16,22,]),'left_right':([7,28,41,],[17,47,17,]),'right_left':([7,28,41,],[18,48,18,]),'name_label':([9,38,],[24,62,]),'predicate':([19,33,],[34,55,]),'relationship':([20,39,],[37,63,]),'binary_operator':([35,],[56,]),'mapping_list':([43,],[64,]),'literal':([56,78,82,],[68,81,83,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> cypher","S'",1,None,None,None),
  ('cypher -> query','cypher',1,'p_cypher','cypher_parser.py',59),
  ('query -> match_pattern return','query',2,'p_query','cypher_parser.py',69),
  ('string -> STRING','string',1,'p_string','cypher_parser.py',74),
  ('integer -> INTEGER','integer',1,'p_integer','cypher_parser.py',79),
  ('float -> FLOAT','float',1,'p_float','cypher_parser.py',84),
  ('name_label -> WORD','name_label',1,'p_name_label','cypher_parser.py',89),
  ('name_label -> WORD COLON WORD','name_label',3,'p_name_label','cypher_parser.py',90),
  ('name_label -> COLON WORD','name_label',2,'p_name_label','cypher_parser.py',91),
  ('mapping_list -> WORD COLON literal','mapping_list',3,'p_mapping_list','cypher_parser.py',105),
  ('mapping_list -> mapping_list COMMA WORD COLON literal','mapping_list',5,'p_mapping_list','cypher_parser.py',106),
  ('node -> LPAREN name_label RPAREN','node',3,'p_node','cypher_parser.py',118),
  ('node -> LPAREN name_label LCURLY mapping_list RCURLY RPAREN','node',6,'p_node','cypher_parser.py',119),
  ('node -> LPAREN RPAREN','node',2,'p_node','cypher_parser.py',120),
  ('node -> LPAREN WORD RPAREN','node',3,'p_node','cypher_parser.py',121),
  ('alias -> WORD AS WORD','alias',3,'p_alias','cypher_parser.py',141),
  ('alias -> object_attribute_lookup AS WORD','alias',3,'p_alias','cypher_parser.py',142),
  ('literal -> INTEGER','literal',1,'p_literal','cypher_parser.py',147),
  ('literal -> FLOAT','literal',1,'p_literal','cypher_parser.py',148),
  ('literal -> STRING','literal',1,'p_literal','cypher_parser.py',149),
  ('relationship -> LSQUARE WORD RSQUARE','relationship',3,'p_relationship','cypher_parser.py',155),
  ('relationship -> LSQUARE name_label RSQUARE','relationship',3,'p_relationship','cypher_parser.py',156),
  ('left_right -> DASH relationship DASH GREATERTHAN','left_right',4,'p_left_right','cypher_parser.py',164),
  ('right_left -> LESSTHAN DASH relationship DASH','right_left',4,'p_right_left','cypher_parser.py',169),
  ('incomplete_relationship_chain -> node left_right','incomplete_relationship_chain',2,'p_incomplete_relationship_chain','cypher_parser.py',174),
  ('incomplete_relationship_chain -> node right_left','incomplete_relationship_chain',2,'p_incomplete_relationship_chain','cypher_parser.py',175),
  ('incomplete_relationship_chain -> incomplete_relationship_chain node left_right','incomplete_relationship_chain',3,'p_incomplete_relationship_chain','cypher_parser.py',176),
  ('incomplete_relationship_chain -> incomplete_relationship_chain node right_left','incomplete_relationship_chain',3,'p_incomplete_relationship_chain','cypher_parser.py',177),
  ('relationship_chain -> incomplete_relationship_chain node','relationship_chain',2,'p_relationship_chain','cypher_parser.py',190),
  ('relationship_chain_list -> relationship_chain','relationship_chain_list',1,'p_relationship_chain_list','cypher_parser.py',195),
  ('relationship_chain_list -> relationship_chain_list COMMA relationship_chain','relationship_chain_list',3,'p_relationship_chain_list','cypher_parser.py',196),
  ('match_pattern -> MATCH node','match_pattern',2,'p_match_pattern','cypher_parser.py',205),
  ('match_pattern -> MATCH relationship_chain_list','match_pattern',2,'p_match_pattern','cypher_parser.py',206),
  ('match_pattern -> MATCH relationship_chain_list where','match_pattern',3,'p_match_pattern','cypher_parser.py',207),
  ('match_pattern -> MATCH node where','match_pattern',3,'p_match_pattern','cypher_parser.py',208),
  ('binary_operator -> EQUALS','binary_operator',1,'p_binary_operator','cypher_parser.py',217),
  ('binary_operator -> LESSTHAN','binary_operator',1,'p_binary_operator','cypher_parser.py',218),
  ('binary_operator -> GREATERTHAN','binary_operator',1,'p_binary_operator','cypher_parser.py',219),
  ('predicate -> object_attribute_lookup binary_operator literal','predicate',3,'p_predicate','cypher_parser.py',224),
  ('predicate -> object_attribute_lookup binary_operator object_attribute_lookup','predicate',3,'p_predicate','cypher_parser.py',225),
  ('object_attribute_lookup -> WORD DOT WORD','object_attribute_lookup',3,'p_object_attribute_lookup','cypher_parser.py',235),
  ('where -> WHERE predicate','where',2,'p_where','cypher_parser.py',240),
  ('where -> where COMMA predicate','where',3,'p_where','cypher_parser.py',241),
  ('projection -> object_attribute_lookup','projection',1,'p_projection','cypher_parser.py',249),
  ('projection -> alias','projection',1,'p_projection','cypher_parser.py',250),
  ('projection -> projection COMMA alias','projection',3,'p_projection','cypher_parser.py',251),
  ('projection -> projection COMMA object_attribute_lookup','projection',3,'p_projection','cypher_parser.py',252),
  ('return -> RETURN projection','return',2,'p_return','cypher_parser.py',261),
]

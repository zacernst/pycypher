# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = "3.10"

_lr_method = "LALR"

_lr_signature = "cypherADDITION AND AS COLLECT COLON COMMA DASH DISTINCT DIVIDE DOT DQUOTE EQUALS FLOAT GREATERTHAN INTEGER LCURLY LESSTHAN LPAREN LSQUARE MATCH NOT OR RCURLY RETURN RPAREN RSQUARE STRING WHERE WITH WORDcypher : queryquery : match_pattern return\n    | relationship_chain_list\n    string : STRINGinteger : INTEGERfloat : FLOATname_label : WORD\n    | WORD COLON WORD\n    | COLON WORDmapping_list : WORD COLON literal\n    | mapping_list COMMA WORD COLON literal\n    node : LPAREN name_label RPAREN\n    | LPAREN name_label LCURLY mapping_list RCURLY RPAREN\n    | LPAREN RPAREN\n    | LPAREN WORD RPAREN\n    alias : WORD AS WORD\n    | object_attribute_lookup AS WORD\n    | aggregation AS WORDliteral : integer\n    | float\n    | STRING\n    relationship : LSQUARE WORD RSQUARE\n    | LSQUARE name_label RSQUAREleft_right : DASH relationship DASH GREATERTHANright_left : LESSTHAN DASH relationship DASHincomplete_relationship_chain : node left_right\n    | node right_left\n    | incomplete_relationship_chain node left_right\n    | incomplete_relationship_chain node right_left\n    relationship_chain : incomplete_relationship_chain node\n    | noderelationship_chain_list : relationship_chain\n    | relationship_chain_list COMMA relationship_chainwith_as_series : alias\n    | with_as_series COMMA aliascollect : COLLECT LPAREN object_attribute_lookup RPARENaggregation : collect\n    | DISTINCT aggregationwith_clause : WITH with_as_seriesmatch_pattern : MATCH node\n    | MATCH relationship_chain_list\n    | MATCH relationship_chain_list with_clause\n    | MATCH relationship_chain_list where\n    | MATCH relationship_chain_list with_clause where\n    binary_operator : EQUALS\n    | LESSTHAN\n    | GREATERTHAN\n    | OR\n    | ANDbinary_function : ADDITIONaliased_name : WORDpredicate : object_attribute_lookup binary_operator literal\n    | object_attribute_lookup binary_operator object_attribute_lookup\n    | aliased_name binary_operator literal\n    | object_attribute_lookup binary_operator binary_expressionbinary_expression : object_attribute_lookup binary_function literal\n    | object_attribute_lookup binary_function object_attribute_lookup\n    | aliased_name binary_function literal\n    | literal binary_function literalobject_attribute_lookup : WORD DOT WORD\n    | WORDwhere : WHERE predicate\n    | where COMMA predicateprojection : object_attribute_lookup\n    | alias\n    | projection COMMA alias\n    | projection COMMA object_attribute_lookupreturn : RETURN projection"

_lr_action_items = {
    "MATCH": (
        [
            0,
        ],
        [
            5,
        ],
    ),
    "LPAREN": (
        [
            0,
            5,
            8,
            12,
            15,
            16,
            31,
            40,
            41,
            88,
            91,
        ],
        [
            9,
            9,
            9,
            9,
            -26,
            -27,
            53,
            -28,
            -29,
            -24,
            -25,
        ],
    ),
    "$end": (
        [
            1,
            2,
            4,
            6,
            7,
            10,
            19,
            21,
            24,
            25,
            26,
            27,
            32,
            42,
            44,
            58,
            71,
            72,
            73,
            74,
            75,
            76,
            107,
        ],
        [
            0,
            -1,
            -3,
            -31,
            -32,
            -2,
            -30,
            -14,
            -68,
            -64,
            -65,
            -61,
            -33,
            -12,
            -15,
            -61,
            -66,
            -67,
            -17,
            -60,
            -16,
            -18,
            -13,
        ],
    ),
    "RETURN": (
        [
            3,
            6,
            7,
            13,
            14,
            19,
            21,
            32,
            33,
            34,
            42,
            44,
            54,
            56,
            57,
            60,
            63,
            73,
            74,
            75,
            76,
            78,
            79,
            96,
            97,
            98,
            99,
            100,
            101,
            102,
            104,
            105,
            106,
            107,
            115,
            116,
            117,
            118,
        ],
        [
            11,
            -31,
            -32,
            -31,
            -41,
            -30,
            -14,
            -33,
            -42,
            -43,
            -12,
            -15,
            -44,
            -39,
            -34,
            -62,
            -61,
            -17,
            -60,
            -16,
            -18,
            -61,
            -63,
            -35,
            -53,
            -52,
            -55,
            -19,
            -20,
            -21,
            -5,
            -6,
            -54,
            -13,
            -57,
            -56,
            -59,
            -58,
        ],
    ),
    "COMMA": (
        [
            4,
            6,
            7,
            13,
            14,
            19,
            21,
            24,
            25,
            26,
            27,
            32,
            34,
            42,
            44,
            54,
            56,
            57,
            58,
            60,
            63,
            68,
            71,
            72,
            73,
            74,
            75,
            76,
            78,
            79,
            96,
            97,
            98,
            99,
            100,
            101,
            102,
            104,
            105,
            106,
            107,
            109,
            115,
            116,
            117,
            118,
            119,
        ],
        [
            12,
            -31,
            -32,
            -31,
            12,
            -30,
            -14,
            47,
            -64,
            -65,
            -61,
            -33,
            55,
            -12,
            -15,
            55,
            80,
            -34,
            -61,
            -62,
            -61,
            93,
            -66,
            -67,
            -17,
            -60,
            -16,
            -18,
            -61,
            -63,
            -35,
            -53,
            -52,
            -55,
            -19,
            -20,
            -21,
            -5,
            -6,
            -54,
            -13,
            -10,
            -57,
            -56,
            -59,
            -58,
            -11,
        ],
    ),
    "WITH": (
        [
            6,
            7,
            13,
            14,
            19,
            21,
            32,
            42,
            44,
            107,
        ],
        [
            -31,
            -32,
            -31,
            35,
            -30,
            -14,
            -33,
            -12,
            -15,
            -13,
        ],
    ),
    "WHERE": (
        [
            6,
            7,
            13,
            14,
            19,
            21,
            32,
            33,
            42,
            44,
            56,
            57,
            73,
            75,
            76,
            96,
            107,
        ],
        [
            -31,
            -32,
            -31,
            36,
            -30,
            -14,
            -33,
            36,
            -12,
            -15,
            -39,
            -34,
            -17,
            -16,
            -18,
            -35,
            -13,
        ],
    ),
    "DASH": (
        [
            6,
            13,
            18,
            19,
            21,
            37,
            42,
            44,
            67,
            89,
            90,
            107,
        ],
        [
            17,
            17,
            39,
            17,
            -14,
            64,
            -12,
            -15,
            91,
            -22,
            -23,
            -13,
        ],
    ),
    "LESSTHAN": (
        [
            6,
            13,
            19,
            21,
            42,
            44,
            61,
            62,
            63,
            74,
            107,
        ],
        [
            18,
            18,
            18,
            -14,
            -12,
            -15,
            83,
            83,
            -51,
            -60,
            -13,
        ],
    ),
    "RPAREN": (
        [
            9,
            20,
            22,
            46,
            70,
            74,
            77,
            78,
            92,
        ],
        [
            21,
            42,
            44,
            -9,
            -8,
            -60,
            95,
            -61,
            107,
        ],
    ),
    "WORD": (
        [
            9,
            11,
            23,
            35,
            36,
            38,
            43,
            45,
            47,
            48,
            49,
            50,
            51,
            53,
            55,
            80,
            81,
            82,
            83,
            84,
            85,
            86,
            93,
            110,
            111,
        ],
        [
            22,
            27,
            46,
            58,
            63,
            65,
            69,
            70,
            58,
            73,
            74,
            75,
            76,
            78,
            63,
            58,
            63,
            -45,
            -46,
            -47,
            -48,
            -49,
            108,
            78,
            -50,
        ],
    ),
    "COLON": (
        [
            9,
            22,
            38,
            65,
            69,
            108,
        ],
        [
            23,
            45,
            23,
            45,
            94,
            114,
        ],
    ),
    "DISTINCT": (
        [
            11,
            30,
            35,
            47,
            80,
        ],
        [
            30,
            30,
            30,
            30,
            30,
        ],
    ),
    "COLLECT": (
        [
            11,
            30,
            35,
            47,
            80,
        ],
        [
            31,
            31,
            31,
            31,
            31,
        ],
    ),
    "LSQUARE": (
        [
            17,
            39,
        ],
        [
            38,
            38,
        ],
    ),
    "LCURLY": (
        [
            20,
            22,
            46,
            70,
        ],
        [
            43,
            -7,
            -9,
            -8,
        ],
    ),
    "AS": (
        [
            25,
            27,
            28,
            29,
            52,
            58,
            59,
            72,
            74,
            95,
        ],
        [
            48,
            50,
            51,
            -37,
            -38,
            50,
            48,
            48,
            -60,
            -36,
        ],
    ),
    "DOT": (
        [
            27,
            58,
            63,
            78,
        ],
        [
            49,
            49,
            49,
            49,
        ],
    ),
    "RSQUARE": (
        [
            46,
            65,
            66,
            70,
        ],
        [
            -9,
            89,
            90,
            -8,
        ],
    ),
    "EQUALS": (
        [
            61,
            62,
            63,
            74,
        ],
        [
            82,
            82,
            -51,
            -60,
        ],
    ),
    "GREATERTHAN": (
        [
            61,
            62,
            63,
            64,
            74,
        ],
        [
            84,
            84,
            -51,
            88,
            -60,
        ],
    ),
    "OR": (
        [
            61,
            62,
            63,
            74,
        ],
        [
            85,
            85,
            -51,
            -60,
        ],
    ),
    "AND": (
        [
            61,
            62,
            63,
            74,
        ],
        [
            86,
            86,
            -51,
            -60,
        ],
    ),
    "ADDITION": (
        [
            63,
            74,
            97,
            98,
            100,
            101,
            102,
            103,
            104,
            105,
        ],
        [
            -51,
            -60,
            111,
            111,
            -19,
            -20,
            -21,
            111,
            -5,
            -6,
        ],
    ),
    "RCURLY": (
        [
            68,
            100,
            101,
            102,
            104,
            105,
            109,
            119,
        ],
        [
            92,
            -19,
            -20,
            -21,
            -5,
            -6,
            -10,
            -11,
        ],
    ),
    "STRING": (
        [
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            94,
            110,
            111,
            112,
            113,
            114,
        ],
        [
            102,
            -45,
            -46,
            -47,
            -48,
            -49,
            102,
            102,
            102,
            -50,
            102,
            102,
            102,
        ],
    ),
    "INTEGER": (
        [
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            94,
            110,
            111,
            112,
            113,
            114,
        ],
        [
            104,
            -45,
            -46,
            -47,
            -48,
            -49,
            104,
            104,
            104,
            -50,
            104,
            104,
            104,
        ],
    ),
    "FLOAT": (
        [
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            94,
            110,
            111,
            112,
            113,
            114,
        ],
        [
            105,
            -45,
            -46,
            -47,
            -48,
            -49,
            105,
            105,
            105,
            -50,
            105,
            105,
            105,
        ],
    ),
}

_lr_action = {}
for _k, _v in _lr_action_items.items():
    for _x, _y in zip(_v[0], _v[1]):
        if not _x in _lr_action:
            _lr_action[_x] = {}
        _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {
    "cypher": (
        [
            0,
        ],
        [
            1,
        ],
    ),
    "query": (
        [
            0,
        ],
        [
            2,
        ],
    ),
    "match_pattern": (
        [
            0,
        ],
        [
            3,
        ],
    ),
    "relationship_chain_list": (
        [
            0,
            5,
        ],
        [
            4,
            14,
        ],
    ),
    "node": (
        [
            0,
            5,
            8,
            12,
        ],
        [
            6,
            13,
            19,
            6,
        ],
    ),
    "relationship_chain": (
        [
            0,
            5,
            12,
        ],
        [
            7,
            7,
            32,
        ],
    ),
    "incomplete_relationship_chain": (
        [
            0,
            5,
            12,
        ],
        [
            8,
            8,
            8,
        ],
    ),
    "return": (
        [
            3,
        ],
        [
            10,
        ],
    ),
    "left_right": (
        [
            6,
            13,
            19,
        ],
        [
            15,
            15,
            40,
        ],
    ),
    "right_left": (
        [
            6,
            13,
            19,
        ],
        [
            16,
            16,
            41,
        ],
    ),
    "name_label": (
        [
            9,
            38,
        ],
        [
            20,
            66,
        ],
    ),
    "projection": (
        [
            11,
        ],
        [
            24,
        ],
    ),
    "object_attribute_lookup": (
        [
            11,
            35,
            36,
            47,
            53,
            55,
            80,
            81,
            110,
        ],
        [
            25,
            59,
            61,
            72,
            77,
            61,
            59,
            97,
            115,
        ],
    ),
    "alias": (
        [
            11,
            35,
            47,
            80,
        ],
        [
            26,
            57,
            71,
            96,
        ],
    ),
    "aggregation": (
        [
            11,
            30,
            35,
            47,
            80,
        ],
        [
            28,
            52,
            28,
            28,
            28,
        ],
    ),
    "collect": (
        [
            11,
            30,
            35,
            47,
            80,
        ],
        [
            29,
            29,
            29,
            29,
            29,
        ],
    ),
    "with_clause": (
        [
            14,
        ],
        [
            33,
        ],
    ),
    "where": (
        [
            14,
            33,
        ],
        [
            34,
            54,
        ],
    ),
    "relationship": (
        [
            17,
            39,
        ],
        [
            37,
            67,
        ],
    ),
    "with_as_series": (
        [
            35,
        ],
        [
            56,
        ],
    ),
    "predicate": (
        [
            36,
            55,
        ],
        [
            60,
            79,
        ],
    ),
    "aliased_name": (
        [
            36,
            55,
            81,
        ],
        [
            62,
            62,
            103,
        ],
    ),
    "mapping_list": (
        [
            43,
        ],
        [
            68,
        ],
    ),
    "binary_operator": (
        [
            61,
            62,
        ],
        [
            81,
            87,
        ],
    ),
    "literal": (
        [
            81,
            87,
            94,
            110,
            112,
            113,
            114,
        ],
        [
            98,
            106,
            109,
            116,
            117,
            118,
            119,
        ],
    ),
    "binary_expression": (
        [
            81,
        ],
        [
            99,
        ],
    ),
    "integer": (
        [
            81,
            87,
            94,
            110,
            112,
            113,
            114,
        ],
        [
            100,
            100,
            100,
            100,
            100,
            100,
            100,
        ],
    ),
    "float": (
        [
            81,
            87,
            94,
            110,
            112,
            113,
            114,
        ],
        [
            101,
            101,
            101,
            101,
            101,
            101,
            101,
        ],
    ),
    "binary_function": (
        [
            97,
            98,
            103,
        ],
        [
            110,
            112,
            113,
        ],
    ),
}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
    for _x, _y in zip(_v[0], _v[1]):
        if not _x in _lr_goto:
            _lr_goto[_x] = {}
        _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
    ("S' -> cypher", "S'", 1, None, None, None),
    ("cypher -> query", "cypher", 1, "p_cypher", "cypher_parser.py", 48),
    (
        "query -> match_pattern return",
        "query",
        2,
        "p_query",
        "cypher_parser.py",
        58,
    ),
    (
        "query -> relationship_chain_list",
        "query",
        1,
        "p_query",
        "cypher_parser.py",
        59,
    ),
    ("string -> STRING", "string", 1, "p_string", "cypher_parser.py", 71),
    ("integer -> INTEGER", "integer", 1, "p_integer", "cypher_parser.py", 76),
    ("float -> FLOAT", "float", 1, "p_float", "cypher_parser.py", 81),
    (
        "name_label -> WORD",
        "name_label",
        1,
        "p_name_label",
        "cypher_parser.py",
        86,
    ),
    (
        "name_label -> WORD COLON WORD",
        "name_label",
        3,
        "p_name_label",
        "cypher_parser.py",
        87,
    ),
    (
        "name_label -> COLON WORD",
        "name_label",
        2,
        "p_name_label",
        "cypher_parser.py",
        88,
    ),
    (
        "mapping_list -> WORD COLON literal",
        "mapping_list",
        3,
        "p_mapping_list",
        "cypher_parser.py",
        102,
    ),
    (
        "mapping_list -> mapping_list COMMA WORD COLON literal",
        "mapping_list",
        5,
        "p_mapping_list",
        "cypher_parser.py",
        103,
    ),
    (
        "node -> LPAREN name_label RPAREN",
        "node",
        3,
        "p_node",
        "cypher_parser.py",
        115,
    ),
    (
        "node -> LPAREN name_label LCURLY mapping_list RCURLY RPAREN",
        "node",
        6,
        "p_node",
        "cypher_parser.py",
        116,
    ),
    ("node -> LPAREN RPAREN", "node", 2, "p_node", "cypher_parser.py", 117),
    (
        "node -> LPAREN WORD RPAREN",
        "node",
        3,
        "p_node",
        "cypher_parser.py",
        118,
    ),
    ("alias -> WORD AS WORD", "alias", 3, "p_alias", "cypher_parser.py", 138),
    (
        "alias -> object_attribute_lookup AS WORD",
        "alias",
        3,
        "p_alias",
        "cypher_parser.py",
        139,
    ),
    (
        "alias -> aggregation AS WORD",
        "alias",
        3,
        "p_alias",
        "cypher_parser.py",
        140,
    ),
    ("literal -> integer", "literal", 1, "p_literal", "cypher_parser.py", 145),
    ("literal -> float", "literal", 1, "p_literal", "cypher_parser.py", 146),
    ("literal -> STRING", "literal", 1, "p_literal", "cypher_parser.py", 147),
    (
        "relationship -> LSQUARE WORD RSQUARE",
        "relationship",
        3,
        "p_relationship",
        "cypher_parser.py",
        153,
    ),
    (
        "relationship -> LSQUARE name_label RSQUARE",
        "relationship",
        3,
        "p_relationship",
        "cypher_parser.py",
        154,
    ),
    (
        "left_right -> DASH relationship DASH GREATERTHAN",
        "left_right",
        4,
        "p_left_right",
        "cypher_parser.py",
        162,
    ),
    (
        "right_left -> LESSTHAN DASH relationship DASH",
        "right_left",
        4,
        "p_right_left",
        "cypher_parser.py",
        167,
    ),
    (
        "incomplete_relationship_chain -> node left_right",
        "incomplete_relationship_chain",
        2,
        "p_incomplete_relationship_chain",
        "cypher_parser.py",
        172,
    ),
    (
        "incomplete_relationship_chain -> node right_left",
        "incomplete_relationship_chain",
        2,
        "p_incomplete_relationship_chain",
        "cypher_parser.py",
        173,
    ),
    (
        "incomplete_relationship_chain -> incomplete_relationship_chain node left_right",
        "incomplete_relationship_chain",
        3,
        "p_incomplete_relationship_chain",
        "cypher_parser.py",
        174,
    ),
    (
        "incomplete_relationship_chain -> incomplete_relationship_chain node right_left",
        "incomplete_relationship_chain",
        3,
        "p_incomplete_relationship_chain",
        "cypher_parser.py",
        175,
    ),
    (
        "relationship_chain -> incomplete_relationship_chain node",
        "relationship_chain",
        2,
        "p_relationship_chain",
        "cypher_parser.py",
        188,
    ),
    (
        "relationship_chain -> node",
        "relationship_chain",
        1,
        "p_relationship_chain",
        "cypher_parser.py",
        189,
    ),
    (
        "relationship_chain_list -> relationship_chain",
        "relationship_chain_list",
        1,
        "p_relationship_chain_list",
        "cypher_parser.py",
        199,
    ),
    (
        "relationship_chain_list -> relationship_chain_list COMMA relationship_chain",
        "relationship_chain_list",
        3,
        "p_relationship_chain_list",
        "cypher_parser.py",
        200,
    ),
    (
        "with_as_series -> alias",
        "with_as_series",
        1,
        "p_with_as_series",
        "cypher_parser.py",
        209,
    ),
    (
        "with_as_series -> with_as_series COMMA alias",
        "with_as_series",
        3,
        "p_with_as_series",
        "cypher_parser.py",
        210,
    ),
    (
        "collect -> COLLECT LPAREN object_attribute_lookup RPAREN",
        "collect",
        4,
        "p_collect",
        "cypher_parser.py",
        220,
    ),
    (
        "aggregation -> collect",
        "aggregation",
        1,
        "p_aggregation",
        "cypher_parser.py",
        231,
    ),
    (
        "aggregation -> DISTINCT aggregation",
        "aggregation",
        2,
        "p_aggregation",
        "cypher_parser.py",
        232,
    ),
    (
        "with_clause -> WITH with_as_series",
        "with_clause",
        2,
        "p_with_clause",
        "cypher_parser.py",
        240,
    ),
    (
        "match_pattern -> MATCH node",
        "match_pattern",
        2,
        "p_match_pattern",
        "cypher_parser.py",
        245,
    ),
    (
        "match_pattern -> MATCH relationship_chain_list",
        "match_pattern",
        2,
        "p_match_pattern",
        "cypher_parser.py",
        246,
    ),
    (
        "match_pattern -> MATCH relationship_chain_list with_clause",
        "match_pattern",
        3,
        "p_match_pattern",
        "cypher_parser.py",
        247,
    ),
    (
        "match_pattern -> MATCH relationship_chain_list where",
        "match_pattern",
        3,
        "p_match_pattern",
        "cypher_parser.py",
        248,
    ),
    (
        "match_pattern -> MATCH relationship_chain_list with_clause where",
        "match_pattern",
        4,
        "p_match_pattern",
        "cypher_parser.py",
        249,
    ),
    (
        "binary_operator -> EQUALS",
        "binary_operator",
        1,
        "p_binary_operator",
        "cypher_parser.py",
        262,
    ),
    (
        "binary_operator -> LESSTHAN",
        "binary_operator",
        1,
        "p_binary_operator",
        "cypher_parser.py",
        263,
    ),
    (
        "binary_operator -> GREATERTHAN",
        "binary_operator",
        1,
        "p_binary_operator",
        "cypher_parser.py",
        264,
    ),
    (
        "binary_operator -> OR",
        "binary_operator",
        1,
        "p_binary_operator",
        "cypher_parser.py",
        265,
    ),
    (
        "binary_operator -> AND",
        "binary_operator",
        1,
        "p_binary_operator",
        "cypher_parser.py",
        266,
    ),
    (
        "binary_function -> ADDITION",
        "binary_function",
        1,
        "p_binary_function",
        "cypher_parser.py",
        271,
    ),
    (
        "aliased_name -> WORD",
        "aliased_name",
        1,
        "p_aliased_name",
        "cypher_parser.py",
        276,
    ),
    (
        "predicate -> object_attribute_lookup binary_operator literal",
        "predicate",
        3,
        "p_predicate",
        "cypher_parser.py",
        281,
    ),
    (
        "predicate -> object_attribute_lookup binary_operator object_attribute_lookup",
        "predicate",
        3,
        "p_predicate",
        "cypher_parser.py",
        282,
    ),
    (
        "predicate -> aliased_name binary_operator literal",
        "predicate",
        3,
        "p_predicate",
        "cypher_parser.py",
        283,
    ),
    (
        "predicate -> object_attribute_lookup binary_operator binary_expression",
        "predicate",
        3,
        "p_predicate",
        "cypher_parser.py",
        284,
    ),
    (
        "binary_expression -> object_attribute_lookup binary_function literal",
        "binary_expression",
        3,
        "p_binary_expression",
        "cypher_parser.py",
        294,
    ),
    (
        "binary_expression -> object_attribute_lookup binary_function object_attribute_lookup",
        "binary_expression",
        3,
        "p_binary_expression",
        "cypher_parser.py",
        295,
    ),
    (
        "binary_expression -> aliased_name binary_function literal",
        "binary_expression",
        3,
        "p_binary_expression",
        "cypher_parser.py",
        296,
    ),
    (
        "binary_expression -> literal binary_function literal",
        "binary_expression",
        3,
        "p_binary_expression",
        "cypher_parser.py",
        297,
    ),
    (
        "object_attribute_lookup -> WORD DOT WORD",
        "object_attribute_lookup",
        3,
        "p_object_attribute_lookup",
        "cypher_parser.py",
        305,
    ),
    (
        "object_attribute_lookup -> WORD",
        "object_attribute_lookup",
        1,
        "p_object_attribute_lookup",
        "cypher_parser.py",
        306,
    ),
    (
        "where -> WHERE predicate",
        "where",
        2,
        "p_where",
        "cypher_parser.py",
        314,
    ),
    (
        "where -> where COMMA predicate",
        "where",
        3,
        "p_where",
        "cypher_parser.py",
        315,
    ),
    (
        "projection -> object_attribute_lookup",
        "projection",
        1,
        "p_projection",
        "cypher_parser.py",
        323,
    ),
    (
        "projection -> alias",
        "projection",
        1,
        "p_projection",
        "cypher_parser.py",
        324,
    ),
    (
        "projection -> projection COMMA alias",
        "projection",
        3,
        "p_projection",
        "cypher_parser.py",
        325,
    ),
    (
        "projection -> projection COMMA object_attribute_lookup",
        "projection",
        3,
        "p_projection",
        "cypher_parser.py",
        326,
    ),
    (
        "return -> RETURN projection",
        "return",
        2,
        "p_return",
        "cypher_parser.py",
        335,
    ),
]

Search.setIndex({"alltitles": {"API": [[0, null]], "AST Node Classes": [[6, null]], "Attributes:": [[6, "attributes"]], "Constraint Solver": [[8, null]], "Contents": [[10, "contents"]], "Cypher AST Generator for Python": [[10, "cypher-ast-generator-for-python"]], "Exceptions": [[3, null]], "Facts": [[4, null]], "How to use it": [[10, "how-to-use-it"]], "Installation": [[10, "installation"]], "Lexer": [[2, null]], "Logger": [[5, null]], "Mac and Linux": [[10, "mac-and-linux"]], "Methods": [[6, "methods"], [6, "id3"], [6, "id8"]], "Methods:": [[6, "id13"]], "Parser": [[1, null]], "PyCypher: A Pythonic Cypher Query Builder": [[10, null]], "Setting everything up": [[10, "setting-everything-up"]], "Shims": [[7, null]], "Tree Mixin": [[9, null]], "Under the hood": [[10, "under-the-hood"]], "Windows": [[10, "windows"]]}, "docnames": ["api", "generated/pycypher", "generated/pycypher.cypher_lexer", "generated/pycypher.exceptions", "generated/pycypher.fact", "generated/pycypher.logger", "generated/pycypher.node_classes", "generated/pycypher.shim", "generated/pycypher.solver", "generated/pycypher.tree_mixin", "index"], "envversion": {"sphinx": 62, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["api.rst", "generated/pycypher.rst", "generated/pycypher.cypher_lexer.rst", "generated/pycypher.exceptions.rst", "generated/pycypher.fact.rst", "generated/pycypher.logger.rst", "generated/pycypher.node_classes.rst", "generated/pycypher.shim.rst", "generated/pycypher.solver.rst", "generated/pycypher.tree_mixin.rst", "index.rst"], "indexentries": {"addition (class in pycypher.node_classes)": [[6, "pycypher.node_classes.Addition", false]], "aggregation (class in pycypher.node_classes)": [[6, "pycypher.node_classes.Aggregation", false]], "alias (class in pycypher.node_classes)": [[6, "pycypher.node_classes.Alias", false]], "aliasedname (class in pycypher.node_classes)": [[6, "pycypher.node_classes.AliasedName", false]], "and (class in pycypher.node_classes)": [[6, "pycypher.node_classes.And", false]], "argument_types (pycypher.node_classes.not attribute)": [[6, "pycypher.node_classes.Not.argument_types", false]], "argument_types (pycypher.node_classes.predicate attribute)": [[6, "pycypher.node_classes.Predicate.argument_types", false]], "atomicfact (class in pycypher.fact)": [[4, "pycypher.fact.AtomicFact", false]], "binaryboolean (class in pycypher.node_classes)": [[6, "pycypher.node_classes.BinaryBoolean", false]], "children (pycypher.node_classes.addition property)": [[6, "pycypher.node_classes.Addition.children", false]], "children (pycypher.node_classes.aggregation property)": [[6, "pycypher.node_classes.Aggregation.children", false]], "children (pycypher.node_classes.alias property)": [[6, "pycypher.node_classes.Alias.children", false]], "children (pycypher.node_classes.aliasedname property)": [[6, "pycypher.node_classes.AliasedName.children", false]], "children (pycypher.node_classes.collect property)": [[6, "pycypher.node_classes.Collect.children", false]], "children (pycypher.node_classes.collection property)": [[6, "pycypher.node_classes.Collection.children", false]], "children (pycypher.node_classes.cypher property)": [[6, "pycypher.node_classes.Cypher.children", false]], "children (pycypher.node_classes.distinct property)": [[6, "pycypher.node_classes.Distinct.children", false]], "children (pycypher.node_classes.mapping property)": [[6, "pycypher.node_classes.Mapping.children", false]], "children (pycypher.node_classes.mappingset property)": [[6, "pycypher.node_classes.MappingSet.children", false]], "children (pycypher.node_classes.match property)": [[6, "pycypher.node_classes.Match.children", false]], "children (pycypher.node_classes.node property)": [[6, "pycypher.node_classes.Node.children", false]], "children (pycypher.node_classes.nodenamelabel property)": [[6, "pycypher.node_classes.NodeNameLabel.children", false]], "children (pycypher.node_classes.objectasseries property)": [[6, "pycypher.node_classes.ObjectAsSeries.children", false]], "children (pycypher.node_classes.objectattributelookup property)": [[6, "pycypher.node_classes.ObjectAttributeLookup.children", false]], "children (pycypher.node_classes.predicate property)": [[6, "pycypher.node_classes.Predicate.children", false]], "children (pycypher.node_classes.projection property)": [[6, "pycypher.node_classes.Projection.children", false]], "children (pycypher.node_classes.query property)": [[6, "pycypher.node_classes.Query.children", false]], "children (pycypher.node_classes.relationship property)": [[6, "pycypher.node_classes.Relationship.children", false]], "children (pycypher.node_classes.relationshipchain property)": [[6, "pycypher.node_classes.RelationshipChain.children", false]], "children (pycypher.node_classes.relationshipchainlist property)": [[6, "pycypher.node_classes.RelationshipChainList.children", false]], "children (pycypher.node_classes.relationshipleftright property)": [[6, "pycypher.node_classes.RelationshipLeftRight.children", false]], "children (pycypher.node_classes.relationshiprightleft property)": [[6, "pycypher.node_classes.RelationshipRightLeft.children", false]], "children (pycypher.node_classes.return property)": [[6, "pycypher.node_classes.Return.children", false]], "children (pycypher.node_classes.size property)": [[6, "pycypher.node_classes.Size.children", false]], "children (pycypher.node_classes.where property)": [[6, "pycypher.node_classes.Where.children", false]], "children (pycypher.node_classes.withclause property)": [[6, "pycypher.node_classes.WithClause.children", false]], "children (pycypher.tree_mixin.treemixin property)": [[9, "pycypher.tree_mixin.TreeMixin.children", false]], "collect (class in pycypher.node_classes)": [[6, "pycypher.node_classes.Collect", false]], "collection (class in pycypher.node_classes)": [[6, "pycypher.node_classes.Collection", false]], "constraintnodehaslabel (class in pycypher.solver)": [[8, "pycypher.solver.ConstraintNodeHasLabel", false]], "constraints (pycypher.node_classes.mapping property)": [[6, "pycypher.node_classes.Mapping.constraints", false]], "constraints (pycypher.node_classes.node property)": [[6, "pycypher.node_classes.Node.constraints", false]], "constraints (pycypher.node_classes.relationshipleftright property)": [[6, "pycypher.node_classes.RelationshipLeftRight.constraints", false]], "cypher (class in pycypher.node_classes)": [[6, "pycypher.node_classes.Cypher", false]], "cypherparser (class in pycypher.cypher_parser)": [[1, "pycypher.cypher_parser.CypherParser", false]], "cypherparsingerror": [[3, "pycypher.exceptions.CypherParsingError", false]], "distinct (class in pycypher.node_classes)": [[6, "pycypher.node_classes.Distinct", false]], "division (class in pycypher.node_classes)": [[6, "pycypher.node_classes.Division", false]], "enclosing_class() (pycypher.tree_mixin.treemixin method)": [[9, "pycypher.tree_mixin.TreeMixin.enclosing_class", false]], "equals (class in pycypher.node_classes)": [[6, "pycypher.node_classes.Equals", false]], "evaluable (class in pycypher.node_classes)": [[6, "pycypher.node_classes.Evaluable", false]], "evaluate() (pycypher.node_classes.evaluable method)": [[6, "pycypher.node_classes.Evaluable.evaluate", false]], "factcollection (class in pycypher.fact)": [[4, "pycypher.fact.FactCollection", false]], "factnodehasattributewithvalue (class in pycypher.fact)": [[4, "pycypher.fact.FactNodeHasAttributeWithValue", false]], "factnodehaslabel (class in pycypher.fact)": [[4, "pycypher.fact.FactNodeHasLabel", false]], "factnoderelatedtonode (class in pycypher.fact)": [[4, "pycypher.fact.FactNodeRelatedToNode", false]], "factrelationshiphasattributewithvalue (class in pycypher.fact)": [[4, "pycypher.fact.FactRelationshipHasAttributeWithValue", false]], "factrelationshiphaslabel (class in pycypher.fact)": [[4, "pycypher.fact.FactRelationshipHasLabel", false]], "factrelationshiphassourcenode (class in pycypher.fact)": [[4, "pycypher.fact.FactRelationshipHasSourceNode", false]], "factrelationshiphastargetnode (class in pycypher.fact)": [[4, "pycypher.fact.FactRelationshipHasTargetNode", false]], "gather_constraints() (pycypher.node_classes.match method)": [[6, "pycypher.node_classes.Match.gather_constraints", false]], "greaterthan (class in pycypher.node_classes)": [[6, "pycypher.node_classes.GreaterThan", false]], "insert() (pycypher.fact.factcollection method)": [[4, "pycypher.fact.FactCollection.insert", false]], "istrue (class in pycypher.solver)": [[8, "pycypher.solver.IsTrue", false]], "left_side_types (pycypher.node_classes.binaryboolean attribute)": [[6, "pycypher.node_classes.BinaryBoolean.left_side_types", false]], "left_side_types (pycypher.node_classes.predicate attribute)": [[6, "pycypher.node_classes.Predicate.left_side_types", false]], "lessthan (class in pycypher.node_classes)": [[6, "pycypher.node_classes.LessThan", false]], "literal (class in pycypher.node_classes)": [[6, "pycypher.node_classes.Literal", false]], "make_fact_collection() (pycypher.shims.shim method)": [[7, "pycypher.shims.Shim.make_fact_collection", false]], "mapping (class in pycypher.node_classes)": [[6, "pycypher.node_classes.Mapping", false]], "mappingset (class in pycypher.node_classes)": [[6, "pycypher.node_classes.MappingSet", false]], "match (class in pycypher.node_classes)": [[6, "pycypher.node_classes.Match", false]], "matchlist (class in pycypher.node_classes)": [[6, "pycypher.node_classes.MatchList", false]], "module": [[1, "module-pycypher.cypher_parser", false], [2, "module-pycypher.cypher_lexer", false], [3, "module-pycypher.exceptions", false], [4, "module-pycypher.fact", false], [5, "module-pycypher.logger", false], [6, "module-pycypher.node_classes", false], [7, "module-pycypher.shims", false], [8, "module-pycypher.solver", false], [9, "module-pycypher.tree_mixin", false]], "multiplication (class in pycypher.node_classes)": [[6, "pycypher.node_classes.Multiplication", false]], "node (class in pycypher.node_classes)": [[6, "pycypher.node_classes.Node", false]], "node_has_attribute_with_value_facts() (pycypher.fact.factcollection method)": [[4, "pycypher.fact.FactCollection.node_has_attribute_with_value_facts", false]], "node_has_label_facts() (pycypher.fact.factcollection method)": [[4, "pycypher.fact.FactCollection.node_has_label_facts", false]], "nodenamelabel (class in pycypher.node_classes)": [[6, "pycypher.node_classes.NodeNameLabel", false]], "not (class in pycypher.node_classes)": [[6, "pycypher.node_classes.Not", false]], "objectasseries (class in pycypher.node_classes)": [[6, "pycypher.node_classes.ObjectAsSeries", false]], "objectattributelookup (class in pycypher.node_classes)": [[6, "pycypher.node_classes.ObjectAttributeLookup", false]], "or (class in pycypher.node_classes)": [[6, "pycypher.node_classes.Or", false]], "p_aggregation() (in module pycypher.cypher_parser)": [[1, "pycypher.cypher_parser.p_aggregation", false]], "p_alias() (in module pycypher.cypher_parser)": [[1, "pycypher.cypher_parser.p_alias", false]], "p_aliased_name() (in module pycypher.cypher_parser)": [[1, "pycypher.cypher_parser.p_aliased_name", false]], "p_binary_expression() (in module pycypher.cypher_parser)": [[1, "pycypher.cypher_parser.p_binary_expression", false]], "p_binary_function() (in module pycypher.cypher_parser)": [[1, "pycypher.cypher_parser.p_binary_function", false]], "p_binary_operator() (in module pycypher.cypher_parser)": [[1, "pycypher.cypher_parser.p_binary_operator", false]], "p_collect() (in module pycypher.cypher_parser)": [[1, "pycypher.cypher_parser.p_collect", false]], "p_cypher() (in module pycypher.cypher_parser)": [[1, "pycypher.cypher_parser.p_cypher", false]], "p_float() (in module pycypher.cypher_parser)": [[1, "pycypher.cypher_parser.p_float", false]], "p_incomplete_relationship_chain() (in module pycypher.cypher_parser)": [[1, "pycypher.cypher_parser.p_incomplete_relationship_chain", false]], "p_integer() (in module pycypher.cypher_parser)": [[1, "pycypher.cypher_parser.p_integer", false]], "p_left_right() (in module pycypher.cypher_parser)": [[1, "pycypher.cypher_parser.p_left_right", false]], "p_literal() (in module pycypher.cypher_parser)": [[1, "pycypher.cypher_parser.p_literal", false]], "p_mapping_list() (in module pycypher.cypher_parser)": [[1, "pycypher.cypher_parser.p_mapping_list", false]], "p_match_pattern() (in module pycypher.cypher_parser)": [[1, "pycypher.cypher_parser.p_match_pattern", false]], "p_name_label() (in module pycypher.cypher_parser)": [[1, "pycypher.cypher_parser.p_name_label", false]], "p_node() (in module pycypher.cypher_parser)": [[1, "pycypher.cypher_parser.p_node", false]], "p_object_attribute_lookup() (in module pycypher.cypher_parser)": [[1, "pycypher.cypher_parser.p_object_attribute_lookup", false]], "p_predicate() (in module pycypher.cypher_parser)": [[1, "pycypher.cypher_parser.p_predicate", false]], "p_projection() (in module pycypher.cypher_parser)": [[1, "pycypher.cypher_parser.p_projection", false]], "p_query() (in module pycypher.cypher_parser)": [[1, "pycypher.cypher_parser.p_query", false]], "p_relationship() (in module pycypher.cypher_parser)": [[1, "pycypher.cypher_parser.p_relationship", false]], "p_relationship_chain() (in module pycypher.cypher_parser)": [[1, "pycypher.cypher_parser.p_relationship_chain", false]], "p_relationship_chain_list() (in module pycypher.cypher_parser)": [[1, "pycypher.cypher_parser.p_relationship_chain_list", false]], "p_return() (in module pycypher.cypher_parser)": [[1, "pycypher.cypher_parser.p_return", false]], "p_right_left() (in module pycypher.cypher_parser)": [[1, "pycypher.cypher_parser.p_right_left", false]], "p_string() (in module pycypher.cypher_parser)": [[1, "pycypher.cypher_parser.p_string", false]], "p_where() (in module pycypher.cypher_parser)": [[1, "pycypher.cypher_parser.p_where", false]], "p_with_as_series() (in module pycypher.cypher_parser)": [[1, "pycypher.cypher_parser.p_with_as_series", false]], "p_with_clause() (in module pycypher.cypher_parser)": [[1, "pycypher.cypher_parser.p_with_clause", false]], "parse_obj (pycypher.tree_mixin.treemixin property)": [[9, "pycypher.tree_mixin.TreeMixin.parse_obj", false]], "predicate (class in pycypher.node_classes)": [[6, "pycypher.node_classes.Predicate", false]], "print_tree() (pycypher.tree_mixin.treemixin method)": [[9, "pycypher.tree_mixin.TreeMixin.print_tree", false]], "projection (class in pycypher.node_classes)": [[6, "pycypher.node_classes.Projection", false]], "pycypher.cypher_lexer": [[2, "module-pycypher.cypher_lexer", false]], "pycypher.cypher_parser": [[1, "module-pycypher.cypher_parser", false]], "pycypher.exceptions": [[3, "module-pycypher.exceptions", false]], "pycypher.fact": [[4, "module-pycypher.fact", false]], "pycypher.logger": [[5, "module-pycypher.logger", false]], "pycypher.node_classes": [[6, "module-pycypher.node_classes", false]], "pycypher.shims": [[7, "module-pycypher.shims", false]], "pycypher.solver": [[8, "module-pycypher.solver", false]], "pycypher.tree_mixin": [[9, "module-pycypher.tree_mixin", false]], "query (class in pycypher.node_classes)": [[6, "pycypher.node_classes.Query", false]], "query() (pycypher.fact.factcollection method)": [[4, "pycypher.fact.FactCollection.query", false]], "relationship (class in pycypher.node_classes)": [[6, "pycypher.node_classes.Relationship", false]], "relationship_has_attribute_with_value_facts() (pycypher.fact.factcollection method)": [[4, "pycypher.fact.FactCollection.relationship_has_attribute_with_value_facts", false]], "relationship_has_source_node_facts() (pycypher.fact.factcollection method)": [[4, "pycypher.fact.FactCollection.relationship_has_source_node_facts", false]], "relationship_has_target_node_facts() (pycypher.fact.factcollection method)": [[4, "pycypher.fact.FactCollection.relationship_has_target_node_facts", false]], "relationshipchain (class in pycypher.node_classes)": [[6, "pycypher.node_classes.RelationshipChain", false]], "relationshipchainlist (class in pycypher.node_classes)": [[6, "pycypher.node_classes.RelationshipChainList", false]], "relationshipleftright (class in pycypher.node_classes)": [[6, "pycypher.node_classes.RelationshipLeftRight", false]], "relationshiprightleft (class in pycypher.node_classes)": [[6, "pycypher.node_classes.RelationshipRightLeft", false]], "return (class in pycypher.node_classes)": [[6, "pycypher.node_classes.Return", false]], "right_side_types (pycypher.node_classes.binaryboolean attribute)": [[6, "pycypher.node_classes.BinaryBoolean.right_side_types", false]], "right_side_types (pycypher.node_classes.division attribute)": [[6, "pycypher.node_classes.Division.right_side_types", false]], "right_side_types (pycypher.node_classes.predicate attribute)": [[6, "pycypher.node_classes.Predicate.right_side_types", false]], "root (pycypher.tree_mixin.treemixin property)": [[9, "pycypher.tree_mixin.TreeMixin.root", false]], "shim (class in pycypher.shims)": [[7, "pycypher.shims.Shim", false]], "size (class in pycypher.node_classes)": [[6, "pycypher.node_classes.Size", false]], "solutions() (pycypher.node_classes.match method)": [[6, "pycypher.node_classes.Match.solutions", false]], "subtraction (class in pycypher.node_classes)": [[6, "pycypher.node_classes.Subtraction", false]], "t_string() (in module pycypher.cypher_lexer)": [[2, "pycypher.cypher_lexer.t_STRING", false]], "t_word() (in module pycypher.cypher_lexer)": [[2, "pycypher.cypher_lexer.t_WORD", false]], "tree() (pycypher.node_classes.addition method)": [[6, "pycypher.node_classes.Addition.tree", false]], "tree() (pycypher.node_classes.aggregation method)": [[6, "pycypher.node_classes.Aggregation.tree", false]], "tree() (pycypher.node_classes.alias method)": [[6, "pycypher.node_classes.Alias.tree", false]], "tree() (pycypher.node_classes.aliasedname method)": [[6, "pycypher.node_classes.AliasedName.tree", false]], "tree() (pycypher.node_classes.and method)": [[6, "pycypher.node_classes.And.tree", false]], "tree() (pycypher.node_classes.binaryboolean method)": [[6, "pycypher.node_classes.BinaryBoolean.tree", false]], "tree() (pycypher.node_classes.collect method)": [[6, "pycypher.node_classes.Collect.tree", false]], "tree() (pycypher.node_classes.collection method)": [[6, "pycypher.node_classes.Collection.tree", false]], "tree() (pycypher.node_classes.cypher method)": [[6, "pycypher.node_classes.Cypher.tree", false]], "tree() (pycypher.node_classes.distinct method)": [[6, "pycypher.node_classes.Distinct.tree", false]], "tree() (pycypher.node_classes.division method)": [[6, "pycypher.node_classes.Division.tree", false]], "tree() (pycypher.node_classes.equals method)": [[6, "pycypher.node_classes.Equals.tree", false]], "tree() (pycypher.node_classes.greaterthan method)": [[6, "pycypher.node_classes.GreaterThan.tree", false]], "tree() (pycypher.node_classes.lessthan method)": [[6, "pycypher.node_classes.LessThan.tree", false]], "tree() (pycypher.node_classes.literal method)": [[6, "pycypher.node_classes.Literal.tree", false]], "tree() (pycypher.node_classes.mapping method)": [[6, "pycypher.node_classes.Mapping.tree", false]], "tree() (pycypher.node_classes.mappingset method)": [[6, "pycypher.node_classes.MappingSet.tree", false]], "tree() (pycypher.node_classes.match method)": [[6, "pycypher.node_classes.Match.tree", false]], "tree() (pycypher.node_classes.matchlist method)": [[6, "pycypher.node_classes.MatchList.tree", false]], "tree() (pycypher.node_classes.multiplication method)": [[6, "pycypher.node_classes.Multiplication.tree", false]], "tree() (pycypher.node_classes.node method)": [[6, "pycypher.node_classes.Node.tree", false]], "tree() (pycypher.node_classes.nodenamelabel method)": [[6, "pycypher.node_classes.NodeNameLabel.tree", false]], "tree() (pycypher.node_classes.not method)": [[6, "pycypher.node_classes.Not.tree", false]], "tree() (pycypher.node_classes.objectasseries method)": [[6, "pycypher.node_classes.ObjectAsSeries.tree", false]], "tree() (pycypher.node_classes.objectattributelookup method)": [[6, "pycypher.node_classes.ObjectAttributeLookup.tree", false]], "tree() (pycypher.node_classes.or method)": [[6, "pycypher.node_classes.Or.tree", false]], "tree() (pycypher.node_classes.projection method)": [[6, "pycypher.node_classes.Projection.tree", false]], "tree() (pycypher.node_classes.query method)": [[6, "pycypher.node_classes.Query.tree", false]], "tree() (pycypher.node_classes.relationship method)": [[6, "pycypher.node_classes.Relationship.tree", false]], "tree() (pycypher.node_classes.relationshipchain method)": [[6, "pycypher.node_classes.RelationshipChain.tree", false]], "tree() (pycypher.node_classes.relationshipchainlist method)": [[6, "pycypher.node_classes.RelationshipChainList.tree", false]], "tree() (pycypher.node_classes.relationshipleftright method)": [[6, "pycypher.node_classes.RelationshipLeftRight.tree", false]], "tree() (pycypher.node_classes.relationshiprightleft method)": [[6, "pycypher.node_classes.RelationshipRightLeft.tree", false]], "tree() (pycypher.node_classes.return method)": [[6, "pycypher.node_classes.Return.tree", false]], "tree() (pycypher.node_classes.size method)": [[6, "pycypher.node_classes.Size.tree", false]], "tree() (pycypher.node_classes.subtraction method)": [[6, "pycypher.node_classes.Subtraction.tree", false]], "tree() (pycypher.node_classes.where method)": [[6, "pycypher.node_classes.Where.tree", false]], "tree() (pycypher.node_classes.withclause method)": [[6, "pycypher.node_classes.WithClause.tree", false]], "tree() (pycypher.tree_mixin.treemixin method)": [[9, "pycypher.tree_mixin.TreeMixin.tree", false]], "treemixin (class in pycypher.tree_mixin)": [[9, "pycypher.tree_mixin.TreeMixin", false]], "trigger_gather_constraints_to_match() (pycypher.node_classes.cypher method)": [[6, "pycypher.node_classes.Cypher.trigger_gather_constraints_to_match", false]], "type_check() (pycypher.node_classes.predicate method)": [[6, "pycypher.node_classes.Predicate.type_check", false]], "unexpectedcypherstructureerror": [[3, "pycypher.exceptions.UnexpectedCypherStructureError", false]], "value() (pycypher.node_classes.objectattributelookup method)": [[6, "pycypher.node_classes.ObjectAttributeLookup.value", false]], "walk() (pycypher.tree_mixin.treemixin method)": [[9, "pycypher.tree_mixin.TreeMixin.walk", false]], "where (class in pycypher.node_classes)": [[6, "pycypher.node_classes.Where", false]], "withclause (class in pycypher.node_classes)": [[6, "pycypher.node_classes.WithClause", false]], "wrongcyphertypeerror": [[3, "pycypher.exceptions.WrongCypherTypeError", false]]}, "objects": {"pycypher": [[2, 0, 0, "-", "cypher_lexer"], [1, 0, 0, "-", "cypher_parser"], [3, 0, 0, "-", "exceptions"], [4, 0, 0, "-", "fact"], [5, 0, 0, "-", "logger"], [6, 0, 0, "-", "node_classes"], [7, 0, 0, "-", "shims"], [8, 0, 0, "-", "solver"], [9, 0, 0, "-", "tree_mixin"]], "pycypher.cypher_lexer": [[2, 1, 1, "", "t_STRING"], [2, 1, 1, "", "t_WORD"]], "pycypher.cypher_parser": [[1, 2, 1, "", "CypherParser"], [1, 1, 1, "", "p_aggregation"], [1, 1, 1, "", "p_alias"], [1, 1, 1, "", "p_aliased_name"], [1, 1, 1, "", "p_binary_expression"], [1, 1, 1, "", "p_binary_function"], [1, 1, 1, "", "p_binary_operator"], [1, 1, 1, "", "p_collect"], [1, 1, 1, "", "p_cypher"], [1, 1, 1, "", "p_float"], [1, 1, 1, "", "p_incomplete_relationship_chain"], [1, 1, 1, "", "p_integer"], [1, 1, 1, "", "p_left_right"], [1, 1, 1, "", "p_literal"], [1, 1, 1, "", "p_mapping_list"], [1, 1, 1, "", "p_match_pattern"], [1, 1, 1, "", "p_name_label"], [1, 1, 1, "", "p_node"], [1, 1, 1, "", "p_object_attribute_lookup"], [1, 1, 1, "", "p_predicate"], [1, 1, 1, "", "p_projection"], [1, 1, 1, "", "p_query"], [1, 1, 1, "", "p_relationship"], [1, 1, 1, "", "p_relationship_chain"], [1, 1, 1, "", "p_relationship_chain_list"], [1, 1, 1, "", "p_return"], [1, 1, 1, "", "p_right_left"], [1, 1, 1, "", "p_string"], [1, 1, 1, "", "p_where"], [1, 1, 1, "", "p_with_as_series"], [1, 1, 1, "", "p_with_clause"]], "pycypher.exceptions": [[3, 3, 1, "", "CypherParsingError"], [3, 3, 1, "", "UnexpectedCypherStructureError"], [3, 3, 1, "", "WrongCypherTypeError"]], "pycypher.fact": [[4, 2, 1, "", "AtomicFact"], [4, 2, 1, "", "FactCollection"], [4, 2, 1, "", "FactNodeHasAttributeWithValue"], [4, 2, 1, "", "FactNodeHasLabel"], [4, 2, 1, "", "FactNodeRelatedToNode"], [4, 2, 1, "", "FactRelationshipHasAttributeWithValue"], [4, 2, 1, "", "FactRelationshipHasLabel"], [4, 2, 1, "", "FactRelationshipHasSourceNode"], [4, 2, 1, "", "FactRelationshipHasTargetNode"]], "pycypher.fact.FactCollection": [[4, 4, 1, "", "insert"], [4, 4, 1, "", "node_has_attribute_with_value_facts"], [4, 4, 1, "", "node_has_label_facts"], [4, 4, 1, "", "query"], [4, 4, 1, "", "relationship_has_attribute_with_value_facts"], [4, 4, 1, "", "relationship_has_source_node_facts"], [4, 4, 1, "", "relationship_has_target_node_facts"]], "pycypher.node_classes": [[6, 2, 1, "", "Addition"], [6, 2, 1, "", "Aggregation"], [6, 2, 1, "", "Alias"], [6, 2, 1, "", "AliasedName"], [6, 2, 1, "", "And"], [6, 2, 1, "", "BinaryBoolean"], [6, 2, 1, "", "Collect"], [6, 2, 1, "", "Collection"], [6, 2, 1, "", "Cypher"], [6, 2, 1, "", "Distinct"], [6, 2, 1, "", "Division"], [6, 2, 1, "", "Equals"], [6, 2, 1, "", "Evaluable"], [6, 2, 1, "", "GreaterThan"], [6, 2, 1, "", "LessThan"], [6, 2, 1, "", "Literal"], [6, 2, 1, "", "Mapping"], [6, 2, 1, "", "MappingSet"], [6, 2, 1, "", "Match"], [6, 2, 1, "", "MatchList"], [6, 2, 1, "", "Multiplication"], [6, 2, 1, "", "Node"], [6, 2, 1, "", "NodeNameLabel"], [6, 2, 1, "", "Not"], [6, 2, 1, "", "ObjectAsSeries"], [6, 2, 1, "", "ObjectAttributeLookup"], [6, 2, 1, "", "Or"], [6, 2, 1, "", "Predicate"], [6, 2, 1, "", "Projection"], [6, 2, 1, "", "Query"], [6, 2, 1, "", "Relationship"], [6, 2, 1, "", "RelationshipChain"], [6, 2, 1, "", "RelationshipChainList"], [6, 2, 1, "", "RelationshipLeftRight"], [6, 2, 1, "", "RelationshipRightLeft"], [6, 2, 1, "", "Return"], [6, 2, 1, "", "Size"], [6, 2, 1, "", "Subtraction"], [6, 2, 1, "", "Where"], [6, 2, 1, "", "WithClause"]], "pycypher.node_classes.Addition": [[6, 5, 1, "", "children"], [6, 4, 1, "", "tree"]], "pycypher.node_classes.Aggregation": [[6, 5, 1, "", "children"], [6, 4, 1, "", "tree"]], "pycypher.node_classes.Alias": [[6, 5, 1, "", "children"], [6, 4, 1, "", "tree"]], "pycypher.node_classes.AliasedName": [[6, 5, 1, "", "children"], [6, 4, 1, "", "tree"]], "pycypher.node_classes.And": [[6, 4, 1, "", "tree"]], "pycypher.node_classes.BinaryBoolean": [[6, 6, 1, "", "left_side_types"], [6, 6, 1, "", "right_side_types"], [6, 4, 1, "", "tree"]], "pycypher.node_classes.Collect": [[6, 5, 1, "", "children"], [6, 4, 1, "", "tree"]], "pycypher.node_classes.Collection": [[6, 5, 1, "", "children"], [6, 4, 1, "", "tree"]], "pycypher.node_classes.Cypher": [[6, 5, 1, "", "children"], [6, 4, 1, "", "tree"], [6, 4, 1, "", "trigger_gather_constraints_to_match"]], "pycypher.node_classes.Distinct": [[6, 5, 1, "", "children"], [6, 4, 1, "", "tree"]], "pycypher.node_classes.Division": [[6, 6, 1, "", "right_side_types"], [6, 4, 1, "", "tree"]], "pycypher.node_classes.Equals": [[6, 4, 1, "", "tree"]], "pycypher.node_classes.Evaluable": [[6, 4, 1, "", "evaluate"]], "pycypher.node_classes.GreaterThan": [[6, 4, 1, "", "tree"]], "pycypher.node_classes.LessThan": [[6, 4, 1, "", "tree"]], "pycypher.node_classes.Literal": [[6, 4, 1, "", "tree"]], "pycypher.node_classes.Mapping": [[6, 5, 1, "", "children"], [6, 5, 1, "", "constraints"], [6, 4, 1, "", "tree"]], "pycypher.node_classes.MappingSet": [[6, 5, 1, "", "children"], [6, 4, 1, "", "tree"]], "pycypher.node_classes.Match": [[6, 5, 1, "", "children"], [6, 4, 1, "", "gather_constraints"], [6, 4, 1, "", "solutions"], [6, 4, 1, "", "tree"]], "pycypher.node_classes.MatchList": [[6, 4, 1, "", "tree"]], "pycypher.node_classes.Multiplication": [[6, 4, 1, "", "tree"]], "pycypher.node_classes.Node": [[6, 5, 1, "", "children"], [6, 5, 1, "", "constraints"], [6, 4, 1, "", "tree"]], "pycypher.node_classes.NodeNameLabel": [[6, 5, 1, "", "children"], [6, 4, 1, "", "tree"]], "pycypher.node_classes.Not": [[6, 6, 1, "", "argument_types"], [6, 4, 1, "", "tree"]], "pycypher.node_classes.ObjectAsSeries": [[6, 5, 1, "", "children"], [6, 4, 1, "", "tree"]], "pycypher.node_classes.ObjectAttributeLookup": [[6, 5, 1, "", "children"], [6, 4, 1, "", "tree"], [6, 4, 1, "", "value"]], "pycypher.node_classes.Or": [[6, 4, 1, "", "tree"]], "pycypher.node_classes.Predicate": [[6, 6, 1, "", "argument_types"], [6, 5, 1, "", "children"], [6, 6, 1, "", "left_side_types"], [6, 6, 1, "", "right_side_types"], [6, 4, 1, "", "type_check"]], "pycypher.node_classes.Projection": [[6, 5, 1, "", "children"], [6, 4, 1, "", "tree"]], "pycypher.node_classes.Query": [[6, 5, 1, "", "children"], [6, 4, 1, "", "tree"]], "pycypher.node_classes.Relationship": [[6, 5, 1, "", "children"], [6, 4, 1, "", "tree"]], "pycypher.node_classes.RelationshipChain": [[6, 5, 1, "", "children"], [6, 4, 1, "", "tree"]], "pycypher.node_classes.RelationshipChainList": [[6, 5, 1, "", "children"], [6, 4, 1, "", "tree"]], "pycypher.node_classes.RelationshipLeftRight": [[6, 5, 1, "", "children"], [6, 5, 1, "", "constraints"], [6, 4, 1, "", "tree"]], "pycypher.node_classes.RelationshipRightLeft": [[6, 5, 1, "", "children"], [6, 4, 1, "", "tree"]], "pycypher.node_classes.Return": [[6, 5, 1, "", "children"], [6, 4, 1, "", "tree"]], "pycypher.node_classes.Size": [[6, 5, 1, "", "children"], [6, 4, 1, "", "tree"]], "pycypher.node_classes.Subtraction": [[6, 4, 1, "", "tree"]], "pycypher.node_classes.Where": [[6, 5, 1, "", "children"], [6, 4, 1, "", "tree"]], "pycypher.node_classes.WithClause": [[6, 5, 1, "", "children"], [6, 4, 1, "", "tree"]], "pycypher.shims": [[7, 2, 1, "", "Shim"]], "pycypher.shims.Shim": [[7, 4, 1, "", "make_fact_collection"]], "pycypher.solver": [[8, 2, 1, "", "ConstraintNodeHasLabel"], [8, 2, 1, "", "IsTrue"]], "pycypher.tree_mixin": [[9, 2, 1, "", "TreeMixin"]], "pycypher.tree_mixin.TreeMixin": [[9, 5, 1, "", "children"], [9, 4, 1, "", "enclosing_class"], [9, 5, 1, "", "parse_obj"], [9, 4, 1, "", "print_tree"], [9, 5, 1, "", "root"], [9, 4, 1, "", "tree"], [9, 4, 1, "", "walk"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "exception", "Python exception"], "4": ["py", "method", "Python method"], "5": ["py", "property", "Python property"], "6": ["py", "attribute", "Python attribute"]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:exception", "4": "py:method", "5": "py:property", "6": "py:attribute"}, "terms": {"": [6, 7, 10], "0": 6, "1": 10, "2": 10, "5": 10, "9": 2, "A": [4, 6], "AND": [1, 6], "AS": [1, 6], "And": [0, 6, 10], "But": [7, 9, 10], "For": [6, 7, 10], "If": [4, 6, 7, 10], "In": [7, 10], "It": [1, 2, 4, 6, 7, 10], "NOT": 6, "Not": [0, 6, 10], "OR": [1, 6], "On": 10, "Or": [0, 6, 10], "That": [7, 10], "The": [1, 2, 4, 6, 7, 10], "Then": [6, 7, 10], "There": 10, "To": [3, 10], "WITH": [1, 6], "__delitem__": 4, "__eq__": [4, 6], "__getitem__": 4, "__init__": [2, 6, 7], "__iter__": 4, "__len__": 4, "__main__": 10, "__repr__": [4, 6], "__setitem__": 4, "_evalu": 6, "_evaluate_one_project": 6, "_transform_solutions_by_aggreg": 6, "_type_check_binari": 6, "_type_check_unari": 6, "_unique_non_aggregated_variable_solut": 6, "abl": [7, 10], "abov": 10, "abstract": [4, 6, 7, 9, 10], "accept": 10, "activ": 10, "actual": 10, "add": [6, 7], "addit": [0, 1, 6, 10], "addition": 10, "advantag": 10, "against": [6, 10], "aggreg": [0, 1, 6, 10], "aggregated_vari": 6, "alert": 10, "alia": [0, 1, 6, 10], "alias": 6, "aliased_nam": 1, "aliasednam": [0, 6, 10], "all": [3, 6, 10], "all_vari": 6, "allow": 6, "also": 10, "an": [3, 4, 6, 7, 9, 10], "ani": [2, 4, 6, 7], "annot": 6, "anoth": [4, 6, 9], "anywai": 9, "api": 10, "appli": [6, 10], "appropri": 7, "apt": 10, "ar": [4, 6, 10], "arbitrari": 10, "arg": [4, 6, 7], "argument": 6, "argument_typ": [0, 6, 10], "arrow": 6, "ask": 10, "assign": [6, 10], "ast": [0, 1, 7, 9], "astral": 10, "atom": 4, "atomicfact": [0, 4, 10], "attribut": [4, 7, 10], "automat": 7, "backtrack": 10, "base": [4, 6, 7], "bash": 10, "been": 6, "begin": 10, "being": 10, "between": [4, 6, 7], "bin": 10, "binari": 6, "binary_express": 1, "binary_funct": 1, "binary_oper": 1, "binaryboolean": [0, 6, 10], "bool": [4, 6], "boolean": 6, "bore": 10, "box": 10, "break": 2, "brew": 10, "build": 10, "built": 10, "bunch": 10, "c": 10, "calcul": 6, "call": [6, 7, 10], "can": [3, 6, 9, 10], "cannot": [3, 4], "capabl": 6, "chain": 6, "check": [4, 6, 10], "child": 6, "children": [0, 6, 9, 10], "cl": 9, "class": [0, 1, 3, 4, 7, 8, 9, 10], "claus": 6, "clean": 10, "collect": [0, 1, 4, 6, 10], "colon": 1, "column": 6, "com": 10, "comma": 1, "complic": 10, "concret": 10, "connect": 6, "consist": 6, "constraint": [0, 1, 6, 10], "constraintnodehaslabel": [0, 8, 10], "construct": [6, 10], "contain": [4, 6, 9, 10], "context": 6, "contrast": 10, "convert": 6, "cool": 10, "correspond": 6, "creat": [1, 4, 6, 7, 10], "curl": 10, "current": 6, "custom": 3, "cypher": [0, 1, 6, 7], "cypher_lex": 2, "cypher_pars": 1, "cypher_stat": 10, "cypher_text": 1, "cypherpars": [0, 1, 3, 7, 10], "cypherparsingerror": [0, 3, 10], "dai": 10, "dash": 1, "data": [7, 10], "defin": [2, 6, 7, 10], "definit": 6, "delet": [4, 10], "depend": [4, 10], "design": 10, "detail": 7, "develop": 10, "dict": 6, "dictionari": [6, 10], "differ": 6, "digraph": 7, "direct": [7, 10], "directli": [4, 9], "distinct": [0, 1, 6, 10], "distribut": 10, "divis": [0, 6, 10], "do": 10, "doc": 10, "document": [7, 10], "domain": 10, "don": 10, "dot": [1, 6], "drive": 10, "duplic": 6, "each": [4, 6, 7, 9], "earli": 10, "easi": 10, "edg": 7, "edit": 10, "element": 6, "elimin": 10, "enclos": 9, "enclosing_class": [0, 9, 10], "end": [2, 10], "engin": [7, 10], "entir": 6, "entiti": 6, "environ": 10, "equal": [0, 1, 4, 6, 10], "eras": 10, "error": 4, "etc": 10, "evalu": [0, 6, 10], "everi": [9, 10], "exact": 10, "exampl": [7, 10], "except": [0, 10], "execut": [4, 10], "expect": [6, 7], "experiment": 10, "express": [3, 6], "fact": [0, 6, 7, 10], "fact1": 10, "fact2": 10, "fact3": 10, "fact4": 10, "fact5": 10, "fact_collect": [6, 10], "factcollect": [0, 4, 6, 7, 10], "factedgehassourcenod": 7, "factedgehastargetnod": 7, "factnodehasattributewithvalu": [0, 4, 10], "factnodehaslabel": [0, 4, 7, 10], "factnodehasproperti": 7, "factnoderelatedtonod": [0, 4, 10], "factrelationshiphasattribut": 7, "factrelationshiphasattributewithvalu": [0, 4, 10], "factrelationshiphaslabel": [0, 4, 7, 10], "factrelationshiphassourcenod": [0, 4, 10], "factrelationshiphastargetnod": [0, 4, 10], "few": 10, "file": 2, "filter": 6, "final": 10, "find": 6, "finit": 10, "first": [2, 4, 9, 10], "fixabl": 10, "float": [1, 6], "follow": [6, 7, 10], "foo": 10, "form": [6, 10], "format": 10, "found": 4, "from": [6, 7, 10], "fssl": 10, "function": [1, 2, 4, 6, 7, 10], "gather": 6, "gather_constraint": [0, 6, 10], "gener": [1, 4, 6, 7, 9], "get": [7, 10], "githubusercont": 10, "given": [4, 6, 9], "god": 10, "goe": 7, "got": 10, "gotten": 10, "grammar": 10, "graph": [6, 7, 10], "greater": 6, "greaterthan": [0, 1, 6, 10], "grow": 10, "gt": 6, "ha": [3, 4, 6, 7, 8, 10], "handl": 6, "happen": [9, 10], "hard": 10, "have": [4, 6, 7, 9, 10], "haven": 10, "head": 10, "help": 10, "hi": 6, "home": 10, "homebrew": 10, "hope": 10, "html": 10, "http": 10, "i": [1, 2, 4, 6, 7, 8, 9, 10], "id": [4, 7, 10], "idea": 10, "identifi": 4, "implement": [6, 7], "import": [2, 10], "includ": [6, 7], "incomplet": 10, "incomplete_relationship_chain": 1, "index": 4, "individu": 10, "infix": 6, "inform": 4, "inherit": [6, 7], "initi": [6, 7], "insert": [0, 4, 10], "insid": [6, 9], "instanc": [4, 6, 10], "instanti": 10, "int": [4, 6], "integ": 1, "intend": 4, "interfac": 7, "intuit": 10, "istru": [0, 8, 10], "item": 6, "iter": [4, 6], "its": [6, 7, 9], "itself": [2, 10], "job": 7, "just": [6, 7], "kei": [6, 10], "keyword": 6, "kid": 10, "know": 10, "kwarg": [6, 7], "label": [4, 6, 7, 8, 10], "languag": [2, 7, 10], "larg": 10, "lcurli": 1, "left": 6, "left_right": 1, "left_sid": 6, "left_side_typ": [0, 6, 10], "left_valu": 6, "len": 6, "length": 6, "less": 6, "lessthan": [0, 1, 6, 10], "lex": [2, 10], "lexer": [0, 10], "lextoken": 2, "librari": [6, 9, 10], "like": [6, 7, 10], "list": [1, 4, 6, 7, 9, 10], "liter": [0, 1, 6, 10], "ll": 10, "logger": [0, 10], "logic": [6, 10], "long": 10, "look": 6, "lookup": 6, "lparen": 1, "lsquar": 1, "lssf": 10, "lt": 6, "luke": 10, "mai": 6, "main": 1, "make": [7, 10], "make_fact_collect": [0, 7, 10], "makefil": 10, "manag": 6, "manipul": 4, "map": [0, 6, 10], "mapping_list": [1, 6], "mappingset": [0, 6, 10], "match": [0, 1, 4, 6, 10], "match_claus": 6, "match_list": 6, "match_pattern": 1, "matchlist": [0, 6, 10], "mean": 10, "mere": 8, "method": [4, 7, 9, 10], "mixin": [0, 10], "modul": [1, 6, 10], "multipl": [0, 4, 6, 10], "myrelationship": 10, "n": 10, "name": [6, 7, 10], "name_label": [1, 6], "need": [6, 7, 10], "negat": 6, "networkx": [7, 10], "new": [6, 7], "next": 10, "node": [0, 1, 4, 7, 8, 9, 10], "node1_id": 4, "node2_id": 4, "node_class": 6, "node_has_attribute_with_value_fact": [0, 4, 10], "node_has_label_fact": [0, 4, 10], "node_id": [4, 8], "node_label": 4, "node_name_label": 6, "nodenamelabel": [0, 6, 10], "non": 6, "non_aggregated_vari": 6, "none": [4, 6, 9, 10], "note": [6, 9], "notic": 10, "notimplementederror": 4, "number": [4, 6, 10], "object": [4, 6, 7, 9, 10], "object_as_seri": 6, "object_attribute_lookup": [1, 6], "object_attribute_lookup_list": 6, "object_nam": 6, "objectasseri": [0, 6, 10], "objectattributelookup": [0, 6, 10], "occur": 4, "old": 10, "one": [4, 6], "onli": 10, "oper": 6, "operand": 6, "oppos": 7, "option": 6, "order": [7, 10], "origin": 6, "other": [4, 6, 9, 10], "otherth": 10, "out": 10, "over": [4, 6, 10], "overridden": 7, "p": 1, "p_aggreg": [0, 1, 10], "p_alia": [0, 1, 10], "p_aliased_nam": [0, 1, 10], "p_binary_express": [0, 1, 10], "p_binary_funct": [0, 1, 10], "p_binary_oper": [0, 1, 10], "p_collect": [0, 1, 10], "p_cypher": [0, 1, 10], "p_float": [0, 1, 10], "p_incomplete_relationship_chain": [0, 1, 10], "p_integ": [0, 1, 10], "p_left_right": [0, 1, 10], "p_liter": [0, 1, 10], "p_mapping_list": [0, 1, 10], "p_match_pattern": [0, 1, 10], "p_name_label": [0, 1, 10], "p_node": [0, 1, 10], "p_object_attribute_lookup": [0, 1, 10], "p_predic": [0, 1, 10], "p_project": [0, 1, 10], "p_queri": [0, 1, 10], "p_relationship": [0, 1, 10], "p_relationship_chain": [0, 1, 10], "p_relationship_chain_list": [0, 1, 10], "p_return": [0, 1, 10], "p_right_left": [0, 1, 10], "p_string": [0, 1, 10], "p_where": [0, 1, 10], "p_with_as_seri": [0, 1, 10], "p_with_claus": [0, 1, 10], "packag": [1, 2, 10], "pair": 6, "paramet": 4, "parent": 6, "pars": [1, 2, 3, 7, 9, 10], "parse_obj": [0, 9, 10], "parser": [0, 2, 10], "partial": 10, "pass": 10, "pattern": 6, "perform": 6, "ply": [2, 10], "point": 6, "posit": 4, "positivefloat": 6, "positiveint": 6, "potenti": 10, "predic": [0, 1, 6, 8, 10], "pretti": [6, 9], "previou": 6, "print": [6, 9, 10], "print_tre": [0, 9, 10], "probabl": 10, "problem": [1, 10], "procedur": 7, "process": [2, 6, 10], "progress": 10, "project": [0, 1, 6, 10], "properti": [6, 9], "provid": [6, 9, 10], "put": 10, "py": [2, 10], "pycyph": [1, 2, 3, 4, 6, 7, 8, 9], "python": 6, "queri": [0, 1, 4, 6, 7], "queryvalueofnodeattribut": 4, "rais": [4, 6], "raw": 10, "rcurli": 1, "re": 10, "reader": 10, "realli": 10, "recogn": 4, "refer": [6, 7], "relat": 4, "relationship": [0, 1, 4, 6, 10], "relationship_chain": 1, "relationship_chain_list": 1, "relationship_has_attribute_with_value_fact": [0, 4, 10], "relationship_has_source_node_fact": [0, 4, 10], "relationship_has_target_node_fact": [0, 4, 10], "relationship_id": 4, "relationship_label": 4, "relationshipchain": [0, 6, 10], "relationshipchainlist": [0, 6, 10], "relationshipleftright": [0, 6, 10], "relationshiprightleft": [0, 6, 10], "remov": 6, "replac": 6, "repres": [4, 6, 8, 10], "represent": [4, 6, 9], "requir": [7, 10], "resolv": 4, "respons": 1, "result": [4, 6, 7, 10], "retriev": 4, "return": [0, 1, 4, 6, 7, 9, 10], "return_claus": 6, "rich": [6, 9, 10], "right": [6, 10], "right_left": 1, "right_sid": 6, "right_side_typ": [0, 6, 10], "right_valu": 6, "root": [0, 6, 9, 10], "rparen": 1, "rsquar": 1, "run": 10, "sai": [8, 10], "said": 10, "same": 6, "satisfact": [1, 10], "satisfi": [6, 10], "script": 10, "search": 7, "second": 4, "semant": [6, 10], "sens": 10, "separ": 6, "seri": 6, "serv": 4, "set": 4, "sever": 6, "sh": 10, "share": 6, "shim": [0, 6, 10], "should": [6, 7, 9, 10], "shouldn": 9, "side": 6, "simpl": [4, 7, 10], "singl": [6, 7], "singleton": 6, "size": [0, 6, 10], "small": 10, "so": 10, "solut": [0, 1, 6, 7, 10], "solv": 1, "solver": [0, 10], "sourc": [4, 7, 10], "source_node_id": 4, "speak": 7, "specif": 4, "specifi": [4, 6], "standard": 7, "start": 10, "state": 10, "statement": [4, 6, 10], "step": [2, 6, 10], "still": 10, "str": [1, 4, 6, 8, 9], "strategi": 7, "string": [1, 2, 4, 6], "structur": [3, 6, 7, 10], "stuff": 9, "style": 10, "subclass": [4, 6, 7], "subset": 10, "subtract": [0, 6, 10], "sudo": 10, "superclass": 6, "support": [6, 10], "syntax": [6, 10], "system": [4, 10], "t": [2, 9, 10], "t_string": [0, 2, 10], "t_word": [0, 2, 10], "take": [7, 10], "target": [4, 7, 10], "target_node_id": 4, "tediou": 10, "test": 10, "than": 6, "them": [6, 10], "therefor": 10, "thi": [1, 2, 4, 6, 7, 9, 10], "thing": 10, "those": [1, 7, 10], "thrown": 3, "thst": 9, "togeth": 6, "token": 2, "transform": 6, "transform_solutions_by_aggreg": 6, "travers": [6, 7], "treat": 10, "tree": [0, 6, 10], "tree_mixin": 9, "treemixin": [0, 1, 6, 9, 10], "trigger": 6, "trigger_gather_constraints_to_match": [0, 6, 10], "trivial": 10, "true": 8, "truth": [4, 6], "tupl": 1, "turn": 6, "two": [4, 6], "type": [3, 4, 6, 9], "type_check": [0, 6, 10], "ubuntu": 10, "ugli": 10, "unari": 6, "understand": 10, "unexpect": 3, "unexpectedcypherstructureerror": [0, 3, 10], "union": 6, "uniqu": 6, "unit": 10, "unknown": 4, "up": 6, "us": [2, 4, 6, 7, 9], "util": 4, "uv": 10, "valu": [0, 4, 6, 7, 10], "valueerror": [4, 6], "variabl": [6, 10], "variou": [4, 6, 10], "ve": 10, "veri": [7, 10], "version": 10, "virtual": 10, "wai": 10, "walk": [0, 6, 9, 10], "want": 10, "we": [7, 10], "what": 10, "when": [3, 7, 10], "where": [0, 1, 6, 10], "which": [1, 2, 4, 6, 7, 9, 10], "whose": [6, 10], "why": 10, "with_as_seri": 1, "with_claus": [1, 6], "withclaus": [0, 6, 10], "within": 6, "without": 10, "woefulli": 10, "word": [1, 10], "work": [9, 10], "would": 10, "write": 10, "wrongcyphertypeerror": [0, 3, 10], "yacc": 10, "yaccproduct": 1, "yet": 10, "yield": [4, 6, 9, 10], "you": [7, 10], "your": [7, 10], "z_": 2, "z_0": 2, "za": 2}, "titles": ["API", "Parser", "Lexer", "Exceptions", "Facts", "Logger", "AST Node Classes", "Shims", "Constraint Solver", "Tree Mixin", "PyCypher: A Pythonic Cypher Query Builder"], "titleterms": {"A": 10, "api": 0, "ast": [6, 10], "attribut": 6, "builder": 10, "class": 6, "constraint": 8, "content": 10, "cypher": 10, "everyth": 10, "except": 3, "fact": 4, "gener": 10, "hood": 10, "how": 10, "instal": 10, "lexer": 2, "linux": 10, "logger": 5, "mac": 10, "method": 6, "mixin": 9, "node": 6, "parser": 1, "pycyph": 10, "python": 10, "queri": 10, "set": 10, "shim": 7, "solver": 8, "tree": 9, "under": 10, "up": 10, "us": 10, "window": 10}})
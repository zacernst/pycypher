Search.setIndex({"alltitles": {"API": [[0, null]], "AST Node Classes": [[6, null]], "Constraint Solver": [[7, null]], "Contents": [[9, "contents"]], "Cypher AST Generator for Python": [[9, "cypher-ast-generator-for-python"]], "Exceptions": [[3, null]], "Facts": [[4, null]], "How to use it": [[9, "how-to-use-it"]], "Installation": [[9, "installation"]], "Lexer": [[2, null]], "Logger": [[5, null]], "Mac and Linux": [[9, "mac-and-linux"]], "Parser": [[1, null]], "PyCypher: A Pythonic Cypher Query Builder": [[9, null]], "Setting everything up": [[9, "setting-everything-up"]], "Tree Mixin": [[8, null]], "Under the hood": [[9, "under-the-hood"]], "Windows": [[9, "windows"]]}, "docnames": ["api", "generated/pycypher", "generated/pycypher.cypher_lexer", "generated/pycypher.exceptions", "generated/pycypher.fact", "generated/pycypher.logger", "generated/pycypher.node_classes", "generated/pycypher.solver", "generated/pycypher.tree_mixin", "index"], "envversion": {"sphinx": 62, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["api.rst", "generated/pycypher.rst", "generated/pycypher.cypher_lexer.rst", "generated/pycypher.exceptions.rst", "generated/pycypher.fact.rst", "generated/pycypher.logger.rst", "generated/pycypher.node_classes.rst", "generated/pycypher.solver.rst", "generated/pycypher.tree_mixin.rst", "index.rst"], "indexentries": {"alias (class in pycypher.node_classes)": [[6, "pycypher.node_classes.Alias", false]], "and (class in pycypher.node_classes)": [[6, "pycypher.node_classes.And", false]], "atomicfact (class in pycypher.fact)": [[4, "pycypher.fact.AtomicFact", false]], "binaryboolean (class in pycypher.node_classes)": [[6, "pycypher.node_classes.BinaryBoolean", false]], "constraints (pycypher.node_classes.node property)": [[6, "pycypher.node_classes.Node.constraints", false]], "cypher (class in pycypher.node_classes)": [[6, "pycypher.node_classes.Cypher", false]], "cypherparser (class in pycypher.cypher_parser)": [[1, "pycypher.cypher_parser.CypherParser", false]], "cypherparsingerror": [[3, "pycypher.exceptions.CypherParsingError", false]], "equals (class in pycypher.node_classes)": [[6, "pycypher.node_classes.Equals", false]], "factnodehasattributewithvalue (class in pycypher.fact)": [[4, "pycypher.fact.FactNodeHasAttributeWithValue", false]], "factnodehaslabel (class in pycypher.fact)": [[4, "pycypher.fact.FactNodeHasLabel", false]], "factnoderelatedtonode (class in pycypher.fact)": [[4, "pycypher.fact.FactNodeRelatedToNode", false]], "factrelationshiphaslabel (class in pycypher.fact)": [[4, "pycypher.fact.FactRelationshipHasLabel", false]], "factrelationshiphassourcenode (class in pycypher.fact)": [[4, "pycypher.fact.FactRelationshipHasSourceNode", false]], "factrelationshiphastargetnode (class in pycypher.fact)": [[4, "pycypher.fact.FactRelationshipHasTargetNode", false]], "greaterthan (class in pycypher.node_classes)": [[6, "pycypher.node_classes.GreaterThan", false]], "istrue (class in pycypher.solver)": [[7, "pycypher.solver.IsTrue", false]], "lessthan (class in pycypher.node_classes)": [[6, "pycypher.node_classes.LessThan", false]], "literal (class in pycypher.node_classes)": [[6, "pycypher.node_classes.Literal", false]], "mapping (class in pycypher.node_classes)": [[6, "pycypher.node_classes.Mapping", false]], "mappingset (class in pycypher.node_classes)": [[6, "pycypher.node_classes.MappingSet", false]], "match (class in pycypher.node_classes)": [[6, "pycypher.node_classes.Match", false]], "matchlist (class in pycypher.node_classes)": [[6, "pycypher.node_classes.MatchList", false]], "module": [[1, "module-pycypher.cypher_parser", false], [2, "module-pycypher.cypher_lexer", false], [3, "module-pycypher.exceptions", false], [4, "module-pycypher.fact", false], [5, "module-pycypher.logger", false], [6, "module-pycypher.node_classes", false], [7, "module-pycypher.solver", false], [8, "module-pycypher.tree_mixin", false]], "node (class in pycypher.node_classes)": [[6, "pycypher.node_classes.Node", false]], "nodenamelabel (class in pycypher.node_classes)": [[6, "pycypher.node_classes.NodeNameLabel", false]], "objectattributelookup (class in pycypher.node_classes)": [[6, "pycypher.node_classes.ObjectAttributeLookup", false]], "or (class in pycypher.node_classes)": [[6, "pycypher.node_classes.Or", false]], "p_alias() (in module pycypher.cypher_parser)": [[1, "pycypher.cypher_parser.p_alias", false]], "p_binary_operator() (in module pycypher.cypher_parser)": [[1, "pycypher.cypher_parser.p_binary_operator", false]], "p_cypher() (in module pycypher.cypher_parser)": [[1, "pycypher.cypher_parser.p_cypher", false]], "p_float() (in module pycypher.cypher_parser)": [[1, "pycypher.cypher_parser.p_float", false]], "p_incomplete_relationship_chain() (in module pycypher.cypher_parser)": [[1, "pycypher.cypher_parser.p_incomplete_relationship_chain", false]], "p_integer() (in module pycypher.cypher_parser)": [[1, "pycypher.cypher_parser.p_integer", false]], "p_left_right() (in module pycypher.cypher_parser)": [[1, "pycypher.cypher_parser.p_left_right", false]], "p_literal() (in module pycypher.cypher_parser)": [[1, "pycypher.cypher_parser.p_literal", false]], "p_mapping_list() (in module pycypher.cypher_parser)": [[1, "pycypher.cypher_parser.p_mapping_list", false]], "p_match_pattern() (in module pycypher.cypher_parser)": [[1, "pycypher.cypher_parser.p_match_pattern", false]], "p_name_label() (in module pycypher.cypher_parser)": [[1, "pycypher.cypher_parser.p_name_label", false]], "p_node() (in module pycypher.cypher_parser)": [[1, "pycypher.cypher_parser.p_node", false]], "p_object_attribute_lookup() (in module pycypher.cypher_parser)": [[1, "pycypher.cypher_parser.p_object_attribute_lookup", false]], "p_predicate() (in module pycypher.cypher_parser)": [[1, "pycypher.cypher_parser.p_predicate", false]], "p_projection() (in module pycypher.cypher_parser)": [[1, "pycypher.cypher_parser.p_projection", false]], "p_query() (in module pycypher.cypher_parser)": [[1, "pycypher.cypher_parser.p_query", false]], "p_relationship() (in module pycypher.cypher_parser)": [[1, "pycypher.cypher_parser.p_relationship", false]], "p_relationship_chain() (in module pycypher.cypher_parser)": [[1, "pycypher.cypher_parser.p_relationship_chain", false]], "p_relationship_chain_list() (in module pycypher.cypher_parser)": [[1, "pycypher.cypher_parser.p_relationship_chain_list", false]], "p_return() (in module pycypher.cypher_parser)": [[1, "pycypher.cypher_parser.p_return", false]], "p_right_left() (in module pycypher.cypher_parser)": [[1, "pycypher.cypher_parser.p_right_left", false]], "p_string() (in module pycypher.cypher_parser)": [[1, "pycypher.cypher_parser.p_string", false]], "p_where() (in module pycypher.cypher_parser)": [[1, "pycypher.cypher_parser.p_where", false]], "predicate (class in pycypher.node_classes)": [[6, "pycypher.node_classes.Predicate", false]], "print_tree() (pycypher.tree_mixin.treemixin method)": [[8, "pycypher.tree_mixin.TreeMixin.print_tree", false]], "projection (class in pycypher.node_classes)": [[6, "pycypher.node_classes.Projection", false]], "pycypher.cypher_lexer": [[2, "module-pycypher.cypher_lexer", false]], "pycypher.cypher_parser": [[1, "module-pycypher.cypher_parser", false]], "pycypher.exceptions": [[3, "module-pycypher.exceptions", false]], "pycypher.fact": [[4, "module-pycypher.fact", false]], "pycypher.logger": [[5, "module-pycypher.logger", false]], "pycypher.node_classes": [[6, "module-pycypher.node_classes", false]], "pycypher.solver": [[7, "module-pycypher.solver", false]], "pycypher.tree_mixin": [[8, "module-pycypher.tree_mixin", false]], "query (class in pycypher.node_classes)": [[6, "pycypher.node_classes.Query", false]], "relationship (class in pycypher.node_classes)": [[6, "pycypher.node_classes.Relationship", false]], "relationshipchain (class in pycypher.node_classes)": [[6, "pycypher.node_classes.RelationshipChain", false]], "relationshipchainlist (class in pycypher.node_classes)": [[6, "pycypher.node_classes.RelationshipChainList", false]], "relationshipleftright (class in pycypher.node_classes)": [[6, "pycypher.node_classes.RelationshipLeftRight", false]], "relationshiprightleft (class in pycypher.node_classes)": [[6, "pycypher.node_classes.RelationshipRightLeft", false]], "return (class in pycypher.node_classes)": [[6, "pycypher.node_classes.Return", false]], "t_string() (in module pycypher.cypher_lexer)": [[2, "pycypher.cypher_lexer.t_STRING", false]], "t_word() (in module pycypher.cypher_lexer)": [[2, "pycypher.cypher_lexer.t_WORD", false]], "tree() (pycypher.node_classes.alias method)": [[6, "pycypher.node_classes.Alias.tree", false]], "tree() (pycypher.node_classes.and method)": [[6, "pycypher.node_classes.And.tree", false]], "tree() (pycypher.node_classes.binaryboolean method)": [[6, "pycypher.node_classes.BinaryBoolean.tree", false]], "tree() (pycypher.node_classes.cypher method)": [[6, "pycypher.node_classes.Cypher.tree", false]], "tree() (pycypher.node_classes.equals method)": [[6, "pycypher.node_classes.Equals.tree", false]], "tree() (pycypher.node_classes.greaterthan method)": [[6, "pycypher.node_classes.GreaterThan.tree", false]], "tree() (pycypher.node_classes.lessthan method)": [[6, "pycypher.node_classes.LessThan.tree", false]], "tree() (pycypher.node_classes.mapping method)": [[6, "pycypher.node_classes.Mapping.tree", false]], "tree() (pycypher.node_classes.mappingset method)": [[6, "pycypher.node_classes.MappingSet.tree", false]], "tree() (pycypher.node_classes.match method)": [[6, "pycypher.node_classes.Match.tree", false]], "tree() (pycypher.node_classes.matchlist method)": [[6, "pycypher.node_classes.MatchList.tree", false]], "tree() (pycypher.node_classes.node method)": [[6, "pycypher.node_classes.Node.tree", false]], "tree() (pycypher.node_classes.nodenamelabel method)": [[6, "pycypher.node_classes.NodeNameLabel.tree", false]], "tree() (pycypher.node_classes.objectattributelookup method)": [[6, "pycypher.node_classes.ObjectAttributeLookup.tree", false]], "tree() (pycypher.node_classes.or method)": [[6, "pycypher.node_classes.Or.tree", false]], "tree() (pycypher.node_classes.predicate method)": [[6, "pycypher.node_classes.Predicate.tree", false]], "tree() (pycypher.node_classes.projection method)": [[6, "pycypher.node_classes.Projection.tree", false]], "tree() (pycypher.node_classes.query method)": [[6, "pycypher.node_classes.Query.tree", false]], "tree() (pycypher.node_classes.relationship method)": [[6, "pycypher.node_classes.Relationship.tree", false]], "tree() (pycypher.node_classes.relationshipchain method)": [[6, "pycypher.node_classes.RelationshipChain.tree", false]], "tree() (pycypher.node_classes.relationshipchainlist method)": [[6, "pycypher.node_classes.RelationshipChainList.tree", false]], "tree() (pycypher.node_classes.relationshipleftright method)": [[6, "pycypher.node_classes.RelationshipLeftRight.tree", false]], "tree() (pycypher.node_classes.relationshiprightleft method)": [[6, "pycypher.node_classes.RelationshipRightLeft.tree", false]], "tree() (pycypher.node_classes.return method)": [[6, "pycypher.node_classes.Return.tree", false]], "tree() (pycypher.node_classes.where method)": [[6, "pycypher.node_classes.Where.tree", false]], "tree() (pycypher.tree_mixin.treemixin method)": [[8, "pycypher.tree_mixin.TreeMixin.tree", false]], "treemixin (class in pycypher.tree_mixin)": [[8, "pycypher.tree_mixin.TreeMixin", false]], "unexpectedcypherstructureerror": [[3, "pycypher.exceptions.UnexpectedCypherStructureError", false]], "walk() (pycypher.tree_mixin.treemixin method)": [[8, "pycypher.tree_mixin.TreeMixin.walk", false]], "where (class in pycypher.node_classes)": [[6, "pycypher.node_classes.Where", false]]}, "objects": {"pycypher": [[2, 0, 0, "-", "cypher_lexer"], [1, 0, 0, "-", "cypher_parser"], [3, 0, 0, "-", "exceptions"], [4, 0, 0, "-", "fact"], [5, 0, 0, "-", "logger"], [6, 0, 0, "-", "node_classes"], [7, 0, 0, "-", "solver"], [8, 0, 0, "-", "tree_mixin"]], "pycypher.cypher_lexer": [[2, 1, 1, "", "t_STRING"], [2, 1, 1, "", "t_WORD"]], "pycypher.cypher_parser": [[1, 2, 1, "", "CypherParser"], [1, 1, 1, "", "p_alias"], [1, 1, 1, "", "p_binary_operator"], [1, 1, 1, "", "p_cypher"], [1, 1, 1, "", "p_float"], [1, 1, 1, "", "p_incomplete_relationship_chain"], [1, 1, 1, "", "p_integer"], [1, 1, 1, "", "p_left_right"], [1, 1, 1, "", "p_literal"], [1, 1, 1, "", "p_mapping_list"], [1, 1, 1, "", "p_match_pattern"], [1, 1, 1, "", "p_name_label"], [1, 1, 1, "", "p_node"], [1, 1, 1, "", "p_object_attribute_lookup"], [1, 1, 1, "", "p_predicate"], [1, 1, 1, "", "p_projection"], [1, 1, 1, "", "p_query"], [1, 1, 1, "", "p_relationship"], [1, 1, 1, "", "p_relationship_chain"], [1, 1, 1, "", "p_relationship_chain_list"], [1, 1, 1, "", "p_return"], [1, 1, 1, "", "p_right_left"], [1, 1, 1, "", "p_string"], [1, 1, 1, "", "p_where"]], "pycypher.exceptions": [[3, 3, 1, "", "CypherParsingError"], [3, 3, 1, "", "UnexpectedCypherStructureError"]], "pycypher.fact": [[4, 2, 1, "", "AtomicFact"], [4, 2, 1, "", "FactNodeHasAttributeWithValue"], [4, 2, 1, "", "FactNodeHasLabel"], [4, 2, 1, "", "FactNodeRelatedToNode"], [4, 2, 1, "", "FactRelationshipHasLabel"], [4, 2, 1, "", "FactRelationshipHasSourceNode"], [4, 2, 1, "", "FactRelationshipHasTargetNode"]], "pycypher.node_classes": [[6, 2, 1, "", "Alias"], [6, 2, 1, "", "And"], [6, 2, 1, "", "BinaryBoolean"], [6, 2, 1, "", "Cypher"], [6, 2, 1, "", "Equals"], [6, 2, 1, "", "GreaterThan"], [6, 2, 1, "", "LessThan"], [6, 2, 1, "", "Literal"], [6, 2, 1, "", "Mapping"], [6, 2, 1, "", "MappingSet"], [6, 2, 1, "", "Match"], [6, 2, 1, "", "MatchList"], [6, 2, 1, "", "Node"], [6, 2, 1, "", "NodeNameLabel"], [6, 2, 1, "", "ObjectAttributeLookup"], [6, 2, 1, "", "Or"], [6, 2, 1, "", "Predicate"], [6, 2, 1, "", "Projection"], [6, 2, 1, "", "Query"], [6, 2, 1, "", "Relationship"], [6, 2, 1, "", "RelationshipChain"], [6, 2, 1, "", "RelationshipChainList"], [6, 2, 1, "", "RelationshipLeftRight"], [6, 2, 1, "", "RelationshipRightLeft"], [6, 2, 1, "", "Return"], [6, 2, 1, "", "Where"]], "pycypher.node_classes.Alias": [[6, 4, 1, "", "tree"]], "pycypher.node_classes.And": [[6, 4, 1, "", "tree"]], "pycypher.node_classes.BinaryBoolean": [[6, 4, 1, "", "tree"]], "pycypher.node_classes.Cypher": [[6, 4, 1, "", "tree"]], "pycypher.node_classes.Equals": [[6, 4, 1, "", "tree"]], "pycypher.node_classes.GreaterThan": [[6, 4, 1, "", "tree"]], "pycypher.node_classes.LessThan": [[6, 4, 1, "", "tree"]], "pycypher.node_classes.Mapping": [[6, 4, 1, "", "tree"]], "pycypher.node_classes.MappingSet": [[6, 4, 1, "", "tree"]], "pycypher.node_classes.Match": [[6, 4, 1, "", "tree"]], "pycypher.node_classes.MatchList": [[6, 4, 1, "", "tree"]], "pycypher.node_classes.Node": [[6, 5, 1, "", "constraints"], [6, 4, 1, "", "tree"]], "pycypher.node_classes.NodeNameLabel": [[6, 4, 1, "", "tree"]], "pycypher.node_classes.ObjectAttributeLookup": [[6, 4, 1, "", "tree"]], "pycypher.node_classes.Or": [[6, 4, 1, "", "tree"]], "pycypher.node_classes.Predicate": [[6, 4, 1, "", "tree"]], "pycypher.node_classes.Projection": [[6, 4, 1, "", "tree"]], "pycypher.node_classes.Query": [[6, 4, 1, "", "tree"]], "pycypher.node_classes.Relationship": [[6, 4, 1, "", "tree"]], "pycypher.node_classes.RelationshipChain": [[6, 4, 1, "", "tree"]], "pycypher.node_classes.RelationshipChainList": [[6, 4, 1, "", "tree"]], "pycypher.node_classes.RelationshipLeftRight": [[6, 4, 1, "", "tree"]], "pycypher.node_classes.RelationshipRightLeft": [[6, 4, 1, "", "tree"]], "pycypher.node_classes.Return": [[6, 4, 1, "", "tree"]], "pycypher.node_classes.Where": [[6, 4, 1, "", "tree"]], "pycypher.solver": [[7, 2, 1, "", "IsTrue"]], "pycypher.tree_mixin": [[8, 2, 1, "", "TreeMixin"]], "pycypher.tree_mixin.TreeMixin": [[8, 4, 1, "", "print_tree"], [8, 4, 1, "", "tree"], [8, 4, 1, "", "walk"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "exception", "Python exception"], "4": ["py", "method", "Python method"], "5": ["py", "property", "Python property"]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:exception", "4": "py:method", "5": "py:property"}, "terms": {"": 9, "1": 9, "2": 9, "5": 9, "9": 2, "A": 6, "AND": 6, "AS": [1, 6], "And": [0, 6, 9], "But": 9, "For": 9, "If": 9, "In": 9, "It": [1, 2, 9], "OR": 6, "On": 9, "Or": [0, 6, 9], "That": 9, "The": [1, 2, 6, 9], "Then": 9, "There": 9, "To": [3, 9], "__init__": 2, "__main__": 9, "abl": 9, "abov": 9, "abstract": 9, "accept": 9, "activ": 9, "actual": 9, "addit": 9, "addition": 9, "advantag": 9, "against": 9, "alert": 9, "alia": [0, 1, 6, 9], "all": [3, 9], "also": 9, "alwai": 6, "an": [3, 6, 9], "ani": [2, 4, 6], "anoth": 6, "api": 9, "appli": 9, "applic": 6, "apt": 9, "ar": [4, 6, 9], "arbitrari": 9, "arrow": 6, "ask": 9, "assign": 9, "ast": [0, 1, 8], "astract": 4, "astral": 9, "atom": 4, "atomicfact": [0, 4, 9], "attribut": [4, 6, 9], "backtrack": 9, "base": 4, "bash": 9, "begin": 9, "being": 9, "between": 6, "bin": 9, "binari": 6, "binary_oper": 1, "binaryboolean": [0, 6, 9], "bore": 9, "box": 9, "break": 2, "brew": 9, "build": 9, "built": 9, "bunch": 9, "c": 9, "call": 9, "can": [3, 6, 8, 9], "cannot": 3, "chain": 6, "check": 9, "class": [0, 1, 3, 4, 7, 8, 9], "claus": 6, "clean": 9, "colon": 1, "com": 9, "comma": 1, "complic": 9, "concret": 9, "constraint": [0, 1, 6, 9], "construct": 9, "contain": [6, 9], "contrast": 9, "cool": 9, "creat": [1, 9], "curl": 9, "custom": 3, "cypher": [0, 1, 6], "cypher_lex": 2, "cypher_pars": 1, "cypher_stat": 9, "cypher_text": 1, "cypherpars": [0, 1, 3, 9], "cypherparsingerror": [0, 3, 9], "dai": 9, "dash": 1, "data": 9, "defin": [2, 9], "definit": 6, "delet": 9, "depend": 9, "design": 9, "develop": 9, "dictionari": [6, 9], "differ": 6, "direct": 9, "directli": 6, "distribut": 9, "do": 9, "doc": 9, "document": 9, "domain": 9, "don": 9, "dot": [1, 6], "drive": 9, "earli": 9, "easi": 9, "edit": 9, "elimin": 9, "end": [2, 9], "engin": 9, "entir": 6, "environ": 9, "equal": [0, 1, 6, 9], "eras": 9, "etc": 9, "evalu": 6, "everi": [8, 9], "exact": 9, "exampl": 9, "except": [0, 9], "execut": 9, "experiment": 9, "express": [3, 6], "fact": [0, 9], "fact1": 9, "fact2": 9, "fact3": 9, "fact4": 9, "fact5": 9, "fact_collect": 9, "factcollect": 9, "factnodehasattributewithvalu": [0, 4, 9], "factnodehaslabel": [0, 4, 9], "factnoderelatedtonod": [0, 4, 9], "factrelationshiphaslabel": [0, 4, 9], "factrelationshiphassourcenod": [0, 4, 9], "factrelationshiphastargetnod": [0, 4, 9], "few": 9, "file": 2, "final": 9, "finit": 9, "first": [2, 9], "fixabl": 9, "float": 1, "follow": [6, 9], "foo": 9, "form": [6, 9], "format": 9, "from": [6, 9], "fssl": 9, "function": [1, 2, 9], "gener": [1, 6, 8], "get": 9, "githubusercont": 9, "god": 9, "got": 9, "gotten": 9, "grammar": 9, "graph": [6, 9], "greater": 6, "greaterthan": [0, 1, 6, 9], "grow": 9, "ha": [3, 6, 9], "happen": 9, "hard": 9, "have": [4, 9], "haven": 9, "head": 9, "help": 9, "hi": 6, "home": 9, "homebrew": 9, "hope": 9, "html": 9, "http": 9, "i": [1, 2, 6, 7, 8, 9], "id": 9, "idea": 9, "import": [2, 9], "includ": 6, "incomplet": 9, "incomplete_relationship_chain": 1, "individu": 9, "infix": 6, "instanc": 9, "instanti": [6, 9], "integ": 1, "intuit": 9, "istru": [0, 7, 9], "itself": [2, 9], "join": 6, "kei": [6, 9], "kid": 9, "know": 9, "label": [6, 9], "languag": [2, 9], "larg": 9, "lcurli": 1, "left": 6, "left_right": 1, "left_sid": 6, "less": 6, "lessthan": [0, 1, 6, 9], "lex": [2, 9], "lexer": [0, 9], "lextoken": 2, "librari": [6, 8, 9], "like": 9, "list": [1, 6, 9], "liter": [0, 1, 6, 9], "ll": 9, "logger": [0, 9], "logic": 9, "long": 9, "lookup": 6, "lparen": 1, "lsquar": 1, "lssf": 9, "luke": 9, "mai": 6, "main": 1, "make": 9, "makefil": 9, "map": [0, 6, 9], "mapping_list": [1, 6], "mappingset": [0, 6, 9], "match": [0, 1, 6, 9], "match_claus": 6, "match_list": 6, "match_pattern": 1, "matchlist": [0, 6, 9], "mean": 9, "mere": 7, "method": [8, 9], "mixin": [0, 9], "modul": [6, 9], "multipl": 6, "myrelationship": 9, "n": 9, "name": [6, 9], "name_label": [1, 6], "need": 9, "networkx": 9, "next": 9, "node": [0, 1, 8, 9], "node1_id": 4, "node2_id": 4, "node_class": 6, "node_id": 4, "node_label": 4, "node_name_label": 6, "nodenamelabel": [0, 6, 9], "none": [6, 9], "note": 6, "notic": 9, "number": 9, "object": [6, 9], "object_attribute_lookup": 1, "objectattributelookup": [0, 6, 9], "old": 9, "onli": 9, "oper": 6, "option": 6, "order": 9, "other": 9, "otherth": 9, "out": 9, "over": 9, "p": 1, "p_alia": [0, 1, 9], "p_binary_oper": [0, 1, 9], "p_cypher": [0, 1, 9], "p_float": [0, 1, 9], "p_incomplete_relationship_chain": [0, 1, 9], "p_integ": [0, 1, 9], "p_left_right": [0, 1, 9], "p_liter": [0, 1, 9], "p_mapping_list": [0, 1, 9], "p_match_pattern": [0, 1, 9], "p_name_label": [0, 1, 9], "p_node": [0, 1, 9], "p_object_attribute_lookup": [0, 1, 9], "p_predic": [0, 1, 9], "p_project": [0, 1, 9], "p_queri": [0, 1, 9], "p_relationship": [0, 1, 9], "p_relationship_chain": [0, 1, 9], "p_relationship_chain_list": [0, 1, 9], "p_return": [0, 1, 9], "p_right_left": [0, 1, 9], "p_string": [0, 1, 9], "p_where": [0, 1, 9], "packag": [1, 2, 9], "pair": 6, "pars": [1, 2, 3, 9], "parser": [0, 2, 6, 9], "partial": 9, "pass": 9, "pattern": 6, "ply": [2, 9], "point": 6, "potenti": 9, "predic": [0, 1, 6, 7, 9], "prefix": 6, "pretti": [6, 8], "print": [6, 8, 9], "print_tre": [0, 8, 9], "probabl": 9, "problem": [1, 9], "process": [2, 9], "progress": 9, "project": [0, 1, 6, 9], "properti": 6, "provid": [8, 9], "put": 9, "py": [2, 9], "pycyph": [1, 2, 3, 4, 6, 7, 8], "queri": [0, 1, 6], "raw": 9, "rcurli": 1, "re": 9, "reader": 9, "realli": 9, "refer": 6, "relationship": [0, 1, 6, 9], "relationship_chain": 1, "relationship_chain_list": 1, "relationship_id": 4, "relationship_label": 4, "relationshipchain": [0, 6, 9], "relationshipchainlist": [0, 6, 9], "relationshipleftright": [0, 6, 9], "relationshiprightleft": [0, 6, 9], "repres": [6, 7, 9], "represent": [6, 8], "represn": 6, "requir": 9, "respons": 1, "result": 9, "return": [0, 1, 6, 9], "return_claus": 6, "rich": [6, 8, 9], "right": [6, 9], "right_left": 1, "right_sid": 6, "root": 6, "rparen": 1, "rsquar": 1, "run": 9, "sai": [7, 9], "said": 9, "satisfact": [1, 9], "satisfi": 9, "script": 9, "semant": [6, 9], "sens": 9, "separ": 6, "set": 6, "sever": 6, "sh": 9, "share": 6, "should": 9, "simpl": [4, 9], "singl": 6, "small": 9, "so": [6, 9], "solut": [1, 9], "solv": 1, "solver": [0, 9], "sourc": 9, "source_node_id": 4, "specif": [4, 6], "start": 9, "state": 9, "statement": [4, 6, 9], "step": [2, 6, 9], "still": 9, "str": [1, 4, 6], "string": [1, 2], "structur": [3, 9], "style": 9, "subclass": 6, "subset": 9, "sudo": 9, "support": 9, "syntax": 9, "system": 9, "t": [2, 9], "t_string": [0, 2, 9], "t_word": [0, 2, 9], "take": 9, "taken": 6, "target": 9, "target_node_id": 4, "tediou": 9, "test": 9, "than": 6, "them": [6, 9], "therefor": 9, "thi": [1, 2, 6, 8, 9], "thing": 9, "think": 6, "those": [1, 9], "thrown": 3, "togeth": 6, "token": 2, "treat": 9, "tree": [0, 6, 9], "tree_mixin": 8, "treemixin": [0, 1, 6, 8, 9], "trivial": 9, "true": 7, "truth": [4, 6], "tupl": 1, "type": 4, "ubuntu": 9, "ugli": 9, "unari": 6, "understand": 9, "unexpect": 3, "unexpectedcypherstructureerror": [0, 3, 9], "unit": 9, "us": [2, 6, 8], "uv": 9, "valu": [4, 6, 9], "variabl": [6, 9], "variou": 9, "ve": 9, "veri": 9, "version": 9, "virtual": 9, "wai": 9, "walk": [0, 8, 9], "want": 9, "we": [6, 9], "what": 9, "when": [3, 9], "where": [0, 1, 6, 9], "which": [1, 2, 6, 8, 9], "whivh": 6, "whose": 9, "why": 9, "without": 9, "woefulli": 9, "word": [1, 9], "work": 9, "would": 9, "write": 9, "yacc": 9, "yaccproduct": 1, "yet": 9, "yield": [8, 9], "you": 9, "your": 9, "z_": 2, "z_0": 2, "za": 2}, "titles": ["API", "Parser", "Lexer", "Exceptions", "Facts", "Logger", "AST Node Classes", "Constraint Solver", "Tree Mixin", "PyCypher: A Pythonic Cypher Query Builder"], "titleterms": {"A": 9, "api": 0, "ast": [6, 9], "builder": 9, "class": 6, "constraint": 7, "content": 9, "cypher": 9, "everyth": 9, "except": 3, "fact": 4, "gener": 9, "hood": 9, "how": 9, "instal": 9, "lexer": 2, "linux": 9, "logger": 5, "mac": 9, "mixin": 8, "node": 6, "parser": 1, "pycyph": 9, "python": 9, "queri": 9, "set": 9, "solver": 7, "tree": 8, "under": 9, "up": 9, "us": 9, "window": 9}})
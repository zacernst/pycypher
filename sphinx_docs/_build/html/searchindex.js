Search.setIndex({"alltitles": {"API": [[0, null]], "AST Node Classes": [[7, null]], "Constraint Solver": [[8, null]], "Contents": [[10, "contents"]], "Cypher AST Generator for Python": [[10, "cypher-ast-generator-for-python"], [13, null]], "Exceptions": [[4, null]], "Facts": [[5, null]], "How to use it": [[10, "how-to-use-it"], [13, "how-to-use-it"]], "Installation": [[10, "installation"]], "Lexer": [[3, null]], "Logger": [[6, null]], "Mac and Linux": [[10, "mac-and-linux"], [13, "mac-and-linux"]], "Module contents": [[12, "module-pycypher"]], "Parser": [[2, null]], "PyCypher: A Pythonic Cypher Query Builder": [[10, null]], "Requirements": [[13, "requirements"]], "Setting everything up": [[10, "setting-everything-up"], [13, "setting-everything-up"]], "Submodules": [[12, "submodules"]], "Tree Mixin": [[9, null]], "Under the hood": [[10, "under-the-hood"]], "Windows": [[10, "windows"], [13, "windows"]], "pycypher": [[1, null], [11, null]], "pycypher package": [[12, null]], "pycypher.cypher_lexer module": [[12, "module-pycypher.cypher_lexer"]], "pycypher.decorators module": [[12, "pycypher-decorators-module"]], "pycypher.exceptions module": [[12, "module-pycypher.exceptions"]], "pycypher.fact module": [[12, "module-pycypher.fact"]], "pycypher.logger module": [[12, "module-pycypher.logger"]], "pycypher.node_classes module": [[12, "module-pycypher.node_classes"]], "pycypher.parsetab module": [[12, "module-pycypher.parsetab"]], "pycypher.solver module": [[12, "module-pycypher.solver"]], "pycypher.test module": [[12, "pycypher-test-module"]], "pycypher.tree_mixin module": [[12, "module-pycypher.tree_mixin"]]}, "docnames": ["api", "generated/modules", "generated/pycypher", "generated/pycypher.cypher_lexer", "generated/pycypher.exceptions", "generated/pycypher.fact", "generated/pycypher.logger", "generated/pycypher.node_classes", "generated/pycypher.solver", "generated/pycypher.tree_mixin", "index", "modules", "pycypher", "usage"], "envversion": {"sphinx": 62, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["api.rst", "generated/modules.rst", "generated/pycypher.rst", "generated/pycypher.cypher_lexer.rst", "generated/pycypher.exceptions.rst", "generated/pycypher.fact.rst", "generated/pycypher.logger.rst", "generated/pycypher.node_classes.rst", "generated/pycypher.solver.rst", "generated/pycypher.tree_mixin.rst", "index.rst", "modules.rst", "pycypher.rst", "usage.rst"], "indexentries": {"alias (class in pycypher.node_classes)": [[7, "pycypher.node_classes.Alias", false], [12, "pycypher.node_classes.Alias", false]], "and (class in pycypher.node_classes)": [[7, "pycypher.node_classes.And", false], [12, "pycypher.node_classes.And", false]], "atomicfact (class in pycypher.fact)": [[5, "pycypher.fact.AtomicFact", false], [12, "pycypher.fact.AtomicFact", false]], "binaryboolean (class in pycypher.node_classes)": [[7, "pycypher.node_classes.BinaryBoolean", false], [12, "pycypher.node_classes.BinaryBoolean", false]], "children (pycypher.node_classes.alias property)": [[12, "pycypher.node_classes.Alias.children", false]], "children (pycypher.node_classes.cypher property)": [[12, "pycypher.node_classes.Cypher.children", false]], "children (pycypher.node_classes.mapping property)": [[12, "pycypher.node_classes.Mapping.children", false]], "children (pycypher.node_classes.mappingset property)": [[12, "pycypher.node_classes.MappingSet.children", false]], "children (pycypher.node_classes.match property)": [[12, "pycypher.node_classes.Match.children", false]], "children (pycypher.node_classes.node property)": [[12, "pycypher.node_classes.Node.children", false]], "children (pycypher.node_classes.nodenamelabel property)": [[12, "pycypher.node_classes.NodeNameLabel.children", false]], "children (pycypher.node_classes.objectattributelookup property)": [[12, "pycypher.node_classes.ObjectAttributeLookup.children", false]], "children (pycypher.node_classes.predicate property)": [[12, "pycypher.node_classes.Predicate.children", false]], "children (pycypher.node_classes.projection property)": [[12, "pycypher.node_classes.Projection.children", false]], "children (pycypher.node_classes.query property)": [[12, "pycypher.node_classes.Query.children", false]], "children (pycypher.node_classes.relationship property)": [[12, "pycypher.node_classes.Relationship.children", false]], "children (pycypher.node_classes.relationshipchain property)": [[12, "pycypher.node_classes.RelationshipChain.children", false]], "children (pycypher.node_classes.relationshipchainlist property)": [[12, "pycypher.node_classes.RelationshipChainList.children", false]], "children (pycypher.node_classes.relationshipleftright property)": [[12, "pycypher.node_classes.RelationshipLeftRight.children", false]], "children (pycypher.node_classes.relationshiprightleft property)": [[12, "pycypher.node_classes.RelationshipRightLeft.children", false]], "children (pycypher.node_classes.return property)": [[12, "pycypher.node_classes.Return.children", false]], "children (pycypher.tree_mixin.treemixin property)": [[12, "pycypher.tree_mixin.TreeMixin.children", false]], "constraint (class in pycypher.solver)": [[12, "pycypher.solver.Constraint", false]], "constraintnodehasattributewithvalue (class in pycypher.solver)": [[12, "pycypher.solver.ConstraintNodeHasAttributeWithValue", false]], "constraintnodehaslabel (class in pycypher.solver)": [[12, "pycypher.solver.ConstraintNodeHasLabel", false]], "constraintrelationshiphaslabel (class in pycypher.solver)": [[12, "pycypher.solver.ConstraintRelationshipHasLabel", false]], "constraintrelationshiphassourcenode (class in pycypher.solver)": [[12, "pycypher.solver.ConstraintRelationshipHasSourceNode", false]], "constraintrelationshiphastargetnode (class in pycypher.solver)": [[12, "pycypher.solver.ConstraintRelationshipHasTargetNode", false]], "constraints (pycypher.node_classes.mapping property)": [[12, "pycypher.node_classes.Mapping.constraints", false]], "constraints (pycypher.node_classes.node property)": [[7, "pycypher.node_classes.Node.constraints", false], [12, "pycypher.node_classes.Node.constraints", false]], "constraints (pycypher.node_classes.relationshipleftright property)": [[12, "pycypher.node_classes.RelationshipLeftRight.constraints", false]], "constraints (pycypher.node_classes.where property)": [[12, "pycypher.node_classes.Where.constraints", false]], "constraints_bak (pycypher.node_classes.relationship property)": [[12, "pycypher.node_classes.Relationship.constraints_bak", false]], "cypher (class in pycypher.node_classes)": [[7, "pycypher.node_classes.Cypher", false], [12, "pycypher.node_classes.Cypher", false]], "cypherparser (class in pycypher.cypher_parser)": [[2, "pycypher.cypher_parser.CypherParser", false]], "cypherparsingerror": [[4, "pycypher.exceptions.CypherParsingError", false], [12, "pycypher.exceptions.CypherParsingError", false]], "equals (class in pycypher.node_classes)": [[7, "pycypher.node_classes.Equals", false], [12, "pycypher.node_classes.Equals", false]], "eval() (pycypher.solver.constraint method)": [[12, "pycypher.solver.Constraint.eval", false]], "eval() (pycypher.solver.constraintnodehaslabel method)": [[12, "pycypher.solver.ConstraintNodeHasLabel.eval", false]], "eval() (pycypher.solver.istrue method)": [[12, "pycypher.solver.IsTrue.eval", false]], "factcollection (class in pycypher.fact)": [[5, "pycypher.fact.FactCollection", false], [12, "pycypher.fact.FactCollection", false]], "factnodehasattributewithvalue (class in pycypher.fact)": [[5, "pycypher.fact.FactNodeHasAttributeWithValue", false], [12, "pycypher.fact.FactNodeHasAttributeWithValue", false]], "factnodehaslabel (class in pycypher.fact)": [[5, "pycypher.fact.FactNodeHasLabel", false], [12, "pycypher.fact.FactNodeHasLabel", false]], "factnoderelatedtonode (class in pycypher.fact)": [[5, "pycypher.fact.FactNodeRelatedToNode", false], [12, "pycypher.fact.FactNodeRelatedToNode", false]], "gather_constraints() (pycypher.node_classes.cypher method)": [[12, "pycypher.node_classes.Cypher.gather_constraints", false]], "greaterthan (class in pycypher.node_classes)": [[7, "pycypher.node_classes.GreaterThan", false], [12, "pycypher.node_classes.GreaterThan", false]], "insert() (pycypher.fact.factcollection method)": [[5, "pycypher.fact.FactCollection.insert", false], [12, "pycypher.fact.FactCollection.insert", false]], "istrue (class in pycypher.solver)": [[8, "pycypher.solver.IsTrue", false], [12, "pycypher.solver.IsTrue", false]], "lessthan (class in pycypher.node_classes)": [[7, "pycypher.node_classes.LessThan", false], [12, "pycypher.node_classes.LessThan", false]], "literal (class in pycypher.node_classes)": [[7, "pycypher.node_classes.Literal", false], [12, "pycypher.node_classes.Literal", false]], "mapping (class in pycypher.node_classes)": [[7, "pycypher.node_classes.Mapping", false], [12, "pycypher.node_classes.Mapping", false]], "mappingset (class in pycypher.node_classes)": [[7, "pycypher.node_classes.MappingSet", false], [12, "pycypher.node_classes.MappingSet", false]], "match (class in pycypher.node_classes)": [[7, "pycypher.node_classes.Match", false], [12, "pycypher.node_classes.Match", false]], "matchlist (class in pycypher.node_classes)": [[7, "pycypher.node_classes.MatchList", false], [12, "pycypher.node_classes.MatchList", false]], "module": [[2, "module-pycypher.cypher_parser", false], [3, "module-pycypher.cypher_lexer", false], [4, "module-pycypher.exceptions", false], [5, "module-pycypher.fact", false], [6, "module-pycypher.logger", false], [7, "module-pycypher.node_classes", false], [8, "module-pycypher.solver", false], [9, "module-pycypher.tree_mixin", false], [12, "module-pycypher", false], [12, "module-pycypher.cypher_lexer", false], [12, "module-pycypher.exceptions", false], [12, "module-pycypher.fact", false], [12, "module-pycypher.logger", false], [12, "module-pycypher.node_classes", false], [12, "module-pycypher.parsetab", false], [12, "module-pycypher.solver", false], [12, "module-pycypher.tree_mixin", false]], "node (class in pycypher.node_classes)": [[7, "pycypher.node_classes.Node", false], [12, "pycypher.node_classes.Node", false]], "nodenamelabel (class in pycypher.node_classes)": [[7, "pycypher.node_classes.NodeNameLabel", false], [12, "pycypher.node_classes.NodeNameLabel", false]], "objectattributelookup (class in pycypher.node_classes)": [[7, "pycypher.node_classes.ObjectAttributeLookup", false], [12, "pycypher.node_classes.ObjectAttributeLookup", false]], "or (class in pycypher.node_classes)": [[7, "pycypher.node_classes.Or", false], [12, "pycypher.node_classes.Or", false]], "p_alias() (in module pycypher.cypher_parser)": [[2, "pycypher.cypher_parser.p_alias", false]], "p_binary_operator() (in module pycypher.cypher_parser)": [[2, "pycypher.cypher_parser.p_binary_operator", false]], "p_cypher() (in module pycypher.cypher_parser)": [[2, "pycypher.cypher_parser.p_cypher", false]], "p_float() (in module pycypher.cypher_parser)": [[2, "pycypher.cypher_parser.p_float", false]], "p_incomplete_relationship_chain() (in module pycypher.cypher_parser)": [[2, "pycypher.cypher_parser.p_incomplete_relationship_chain", false]], "p_integer() (in module pycypher.cypher_parser)": [[2, "pycypher.cypher_parser.p_integer", false]], "p_left_right() (in module pycypher.cypher_parser)": [[2, "pycypher.cypher_parser.p_left_right", false]], "p_literal() (in module pycypher.cypher_parser)": [[2, "pycypher.cypher_parser.p_literal", false]], "p_mapping_list() (in module pycypher.cypher_parser)": [[2, "pycypher.cypher_parser.p_mapping_list", false]], "p_match_pattern() (in module pycypher.cypher_parser)": [[2, "pycypher.cypher_parser.p_match_pattern", false]], "p_name_label() (in module pycypher.cypher_parser)": [[2, "pycypher.cypher_parser.p_name_label", false]], "p_node() (in module pycypher.cypher_parser)": [[2, "pycypher.cypher_parser.p_node", false]], "p_object_attribute_lookup() (in module pycypher.cypher_parser)": [[2, "pycypher.cypher_parser.p_object_attribute_lookup", false]], "p_predicate() (in module pycypher.cypher_parser)": [[2, "pycypher.cypher_parser.p_predicate", false]], "p_projection() (in module pycypher.cypher_parser)": [[2, "pycypher.cypher_parser.p_projection", false]], "p_query() (in module pycypher.cypher_parser)": [[2, "pycypher.cypher_parser.p_query", false]], "p_relationship() (in module pycypher.cypher_parser)": [[2, "pycypher.cypher_parser.p_relationship", false]], "p_relationship_chain() (in module pycypher.cypher_parser)": [[2, "pycypher.cypher_parser.p_relationship_chain", false]], "p_relationship_chain_list() (in module pycypher.cypher_parser)": [[2, "pycypher.cypher_parser.p_relationship_chain_list", false]], "p_return() (in module pycypher.cypher_parser)": [[2, "pycypher.cypher_parser.p_return", false]], "p_right_left() (in module pycypher.cypher_parser)": [[2, "pycypher.cypher_parser.p_right_left", false]], "p_string() (in module pycypher.cypher_parser)": [[2, "pycypher.cypher_parser.p_string", false]], "p_where() (in module pycypher.cypher_parser)": [[2, "pycypher.cypher_parser.p_where", false]], "parent (pycypher.tree_mixin.treemixin attribute)": [[12, "pycypher.tree_mixin.TreeMixin.parent", false]], "predicate (class in pycypher.node_classes)": [[7, "pycypher.node_classes.Predicate", false], [12, "pycypher.node_classes.Predicate", false]], "print_tree() (pycypher.tree_mixin.treemixin method)": [[9, "pycypher.tree_mixin.TreeMixin.print_tree", false], [12, "pycypher.tree_mixin.TreeMixin.print_tree", false]], "projection (class in pycypher.node_classes)": [[7, "pycypher.node_classes.Projection", false], [12, "pycypher.node_classes.Projection", false]], "pycypher": [[12, "module-pycypher", false]], "pycypher.cypher_lexer": [[3, "module-pycypher.cypher_lexer", false], [12, "module-pycypher.cypher_lexer", false]], "pycypher.cypher_parser": [[2, "module-pycypher.cypher_parser", false]], "pycypher.exceptions": [[4, "module-pycypher.exceptions", false], [12, "module-pycypher.exceptions", false]], "pycypher.fact": [[5, "module-pycypher.fact", false], [12, "module-pycypher.fact", false]], "pycypher.logger": [[6, "module-pycypher.logger", false], [12, "module-pycypher.logger", false]], "pycypher.node_classes": [[7, "module-pycypher.node_classes", false], [12, "module-pycypher.node_classes", false]], "pycypher.parsetab": [[12, "module-pycypher.parsetab", false]], "pycypher.solver": [[8, "module-pycypher.solver", false], [12, "module-pycypher.solver", false]], "pycypher.tree_mixin": [[9, "module-pycypher.tree_mixin", false], [12, "module-pycypher.tree_mixin", false]], "query (class in pycypher.node_classes)": [[7, "pycypher.node_classes.Query", false], [12, "pycypher.node_classes.Query", false]], "relationship (class in pycypher.node_classes)": [[7, "pycypher.node_classes.Relationship", false], [12, "pycypher.node_classes.Relationship", false]], "relationshipchain (class in pycypher.node_classes)": [[7, "pycypher.node_classes.RelationshipChain", false], [12, "pycypher.node_classes.RelationshipChain", false]], "relationshipchainlist (class in pycypher.node_classes)": [[7, "pycypher.node_classes.RelationshipChainList", false], [12, "pycypher.node_classes.RelationshipChainList", false]], "relationshipleftright (class in pycypher.node_classes)": [[7, "pycypher.node_classes.RelationshipLeftRight", false], [12, "pycypher.node_classes.RelationshipLeftRight", false]], "relationshiprightleft (class in pycypher.node_classes)": [[7, "pycypher.node_classes.RelationshipRightLeft", false], [12, "pycypher.node_classes.RelationshipRightLeft", false]], "return (class in pycypher.node_classes)": [[7, "pycypher.node_classes.Return", false], [12, "pycypher.node_classes.Return", false]], "state (class in pycypher.solver)": [[12, "pycypher.solver.State", false]], "t_string() (in module pycypher.cypher_lexer)": [[3, "pycypher.cypher_lexer.t_STRING", false], [12, "pycypher.cypher_lexer.t_STRING", false]], "t_word() (in module pycypher.cypher_lexer)": [[3, "pycypher.cypher_lexer.t_WORD", false], [12, "pycypher.cypher_lexer.t_WORD", false]], "tree() (pycypher.node_classes.alias method)": [[7, "pycypher.node_classes.Alias.tree", false], [12, "pycypher.node_classes.Alias.tree", false]], "tree() (pycypher.node_classes.and method)": [[7, "pycypher.node_classes.And.tree", false], [12, "pycypher.node_classes.And.tree", false]], "tree() (pycypher.node_classes.binaryboolean method)": [[7, "pycypher.node_classes.BinaryBoolean.tree", false], [12, "pycypher.node_classes.BinaryBoolean.tree", false]], "tree() (pycypher.node_classes.cypher method)": [[7, "pycypher.node_classes.Cypher.tree", false], [12, "pycypher.node_classes.Cypher.tree", false]], "tree() (pycypher.node_classes.equals method)": [[7, "pycypher.node_classes.Equals.tree", false], [12, "pycypher.node_classes.Equals.tree", false]], "tree() (pycypher.node_classes.greaterthan method)": [[7, "pycypher.node_classes.GreaterThan.tree", false], [12, "pycypher.node_classes.GreaterThan.tree", false]], "tree() (pycypher.node_classes.lessthan method)": [[7, "pycypher.node_classes.LessThan.tree", false], [12, "pycypher.node_classes.LessThan.tree", false]], "tree() (pycypher.node_classes.mapping method)": [[7, "pycypher.node_classes.Mapping.tree", false], [12, "pycypher.node_classes.Mapping.tree", false]], "tree() (pycypher.node_classes.mappingset method)": [[7, "pycypher.node_classes.MappingSet.tree", false], [12, "pycypher.node_classes.MappingSet.tree", false]], "tree() (pycypher.node_classes.match method)": [[7, "pycypher.node_classes.Match.tree", false], [12, "pycypher.node_classes.Match.tree", false]], "tree() (pycypher.node_classes.matchlist method)": [[7, "pycypher.node_classes.MatchList.tree", false], [12, "pycypher.node_classes.MatchList.tree", false]], "tree() (pycypher.node_classes.node method)": [[7, "pycypher.node_classes.Node.tree", false], [12, "pycypher.node_classes.Node.tree", false]], "tree() (pycypher.node_classes.nodenamelabel method)": [[7, "pycypher.node_classes.NodeNameLabel.tree", false], [12, "pycypher.node_classes.NodeNameLabel.tree", false]], "tree() (pycypher.node_classes.objectattributelookup method)": [[7, "pycypher.node_classes.ObjectAttributeLookup.tree", false], [12, "pycypher.node_classes.ObjectAttributeLookup.tree", false]], "tree() (pycypher.node_classes.or method)": [[7, "pycypher.node_classes.Or.tree", false], [12, "pycypher.node_classes.Or.tree", false]], "tree() (pycypher.node_classes.predicate method)": [[7, "pycypher.node_classes.Predicate.tree", false], [12, "pycypher.node_classes.Predicate.tree", false]], "tree() (pycypher.node_classes.projection method)": [[7, "pycypher.node_classes.Projection.tree", false], [12, "pycypher.node_classes.Projection.tree", false]], "tree() (pycypher.node_classes.query method)": [[7, "pycypher.node_classes.Query.tree", false], [12, "pycypher.node_classes.Query.tree", false]], "tree() (pycypher.node_classes.relationship method)": [[7, "pycypher.node_classes.Relationship.tree", false], [12, "pycypher.node_classes.Relationship.tree", false]], "tree() (pycypher.node_classes.relationshipchain method)": [[7, "pycypher.node_classes.RelationshipChain.tree", false], [12, "pycypher.node_classes.RelationshipChain.tree", false]], "tree() (pycypher.node_classes.relationshipchainlist method)": [[7, "pycypher.node_classes.RelationshipChainList.tree", false], [12, "pycypher.node_classes.RelationshipChainList.tree", false]], "tree() (pycypher.node_classes.relationshipleftright method)": [[7, "pycypher.node_classes.RelationshipLeftRight.tree", false], [12, "pycypher.node_classes.RelationshipLeftRight.tree", false]], "tree() (pycypher.node_classes.relationshiprightleft method)": [[7, "pycypher.node_classes.RelationshipRightLeft.tree", false], [12, "pycypher.node_classes.RelationshipRightLeft.tree", false]], "tree() (pycypher.node_classes.return method)": [[7, "pycypher.node_classes.Return.tree", false], [12, "pycypher.node_classes.Return.tree", false]], "tree() (pycypher.node_classes.where method)": [[7, "pycypher.node_classes.Where.tree", false], [12, "pycypher.node_classes.Where.tree", false]], "tree() (pycypher.tree_mixin.treemixin method)": [[9, "pycypher.tree_mixin.TreeMixin.tree", false], [12, "pycypher.tree_mixin.TreeMixin.tree", false]], "treemixin (class in pycypher.tree_mixin)": [[9, "pycypher.tree_mixin.TreeMixin", false], [12, "pycypher.tree_mixin.TreeMixin", false]], "unexpectedcypherstructureerror": [[4, "pycypher.exceptions.UnexpectedCypherStructureError", false], [12, "pycypher.exceptions.UnexpectedCypherStructureError", false]], "walk() (pycypher.tree_mixin.treemixin method)": [[9, "pycypher.tree_mixin.TreeMixin.walk", false], [12, "pycypher.tree_mixin.TreeMixin.walk", false]], "where (class in pycypher.node_classes)": [[7, "pycypher.node_classes.Where", false], [12, "pycypher.node_classes.Where", false]]}, "objects": {"": [[12, 0, 0, "-", "pycypher"]], "pycypher": [[12, 0, 0, "-", "cypher_lexer"], [2, 0, 0, "-", "cypher_parser"], [12, 0, 0, "-", "exceptions"], [12, 0, 0, "-", "fact"], [12, 0, 0, "-", "logger"], [12, 0, 0, "-", "node_classes"], [12, 0, 0, "-", "parsetab"], [12, 0, 0, "-", "solver"], [12, 0, 0, "-", "tree_mixin"]], "pycypher.cypher_lexer": [[12, 1, 1, "", "t_STRING"], [12, 1, 1, "", "t_WORD"]], "pycypher.cypher_parser": [[2, 2, 1, "", "CypherParser"], [2, 1, 1, "", "p_alias"], [2, 1, 1, "", "p_binary_operator"], [2, 1, 1, "", "p_cypher"], [2, 1, 1, "", "p_float"], [2, 1, 1, "", "p_incomplete_relationship_chain"], [2, 1, 1, "", "p_integer"], [2, 1, 1, "", "p_left_right"], [2, 1, 1, "", "p_literal"], [2, 1, 1, "", "p_mapping_list"], [2, 1, 1, "", "p_match_pattern"], [2, 1, 1, "", "p_name_label"], [2, 1, 1, "", "p_node"], [2, 1, 1, "", "p_object_attribute_lookup"], [2, 1, 1, "", "p_predicate"], [2, 1, 1, "", "p_projection"], [2, 1, 1, "", "p_query"], [2, 1, 1, "", "p_relationship"], [2, 1, 1, "", "p_relationship_chain"], [2, 1, 1, "", "p_relationship_chain_list"], [2, 1, 1, "", "p_return"], [2, 1, 1, "", "p_right_left"], [2, 1, 1, "", "p_string"], [2, 1, 1, "", "p_where"]], "pycypher.exceptions": [[12, 3, 1, "", "CypherParsingError"], [12, 3, 1, "", "UnexpectedCypherStructureError"]], "pycypher.fact": [[12, 2, 1, "", "AtomicFact"], [12, 2, 1, "", "FactCollection"], [12, 2, 1, "", "FactNodeHasAttributeWithValue"], [12, 2, 1, "", "FactNodeHasLabel"], [12, 2, 1, "", "FactNodeRelatedToNode"]], "pycypher.fact.FactCollection": [[12, 4, 1, "", "insert"]], "pycypher.node_classes": [[12, 2, 1, "", "Alias"], [12, 2, 1, "", "And"], [12, 2, 1, "", "BinaryBoolean"], [12, 2, 1, "", "Cypher"], [12, 2, 1, "", "Equals"], [12, 2, 1, "", "GreaterThan"], [12, 2, 1, "", "LessThan"], [12, 2, 1, "", "Literal"], [12, 2, 1, "", "Mapping"], [12, 2, 1, "", "MappingSet"], [12, 2, 1, "", "Match"], [12, 2, 1, "", "MatchList"], [12, 2, 1, "", "Node"], [12, 2, 1, "", "NodeNameLabel"], [12, 2, 1, "", "ObjectAttributeLookup"], [12, 2, 1, "", "Or"], [12, 2, 1, "", "Predicate"], [12, 2, 1, "", "Projection"], [12, 2, 1, "", "Query"], [12, 2, 1, "", "Relationship"], [12, 2, 1, "", "RelationshipChain"], [12, 2, 1, "", "RelationshipChainList"], [12, 2, 1, "", "RelationshipLeftRight"], [12, 2, 1, "", "RelationshipRightLeft"], [12, 2, 1, "", "Return"], [12, 2, 1, "", "Where"]], "pycypher.node_classes.Alias": [[12, 5, 1, "", "children"], [12, 4, 1, "", "tree"]], "pycypher.node_classes.And": [[12, 4, 1, "", "tree"]], "pycypher.node_classes.BinaryBoolean": [[12, 4, 1, "", "tree"]], "pycypher.node_classes.Cypher": [[12, 5, 1, "", "children"], [12, 4, 1, "", "gather_constraints"], [12, 4, 1, "", "tree"]], "pycypher.node_classes.Equals": [[12, 4, 1, "", "tree"]], "pycypher.node_classes.GreaterThan": [[12, 4, 1, "", "tree"]], "pycypher.node_classes.LessThan": [[12, 4, 1, "", "tree"]], "pycypher.node_classes.Mapping": [[12, 5, 1, "", "children"], [12, 5, 1, "", "constraints"], [12, 4, 1, "", "tree"]], "pycypher.node_classes.MappingSet": [[12, 5, 1, "", "children"], [12, 4, 1, "", "tree"]], "pycypher.node_classes.Match": [[12, 5, 1, "", "children"], [12, 4, 1, "", "tree"]], "pycypher.node_classes.MatchList": [[12, 4, 1, "", "tree"]], "pycypher.node_classes.Node": [[12, 5, 1, "", "children"], [12, 5, 1, "", "constraints"], [12, 4, 1, "", "tree"]], "pycypher.node_classes.NodeNameLabel": [[12, 5, 1, "", "children"], [12, 4, 1, "", "tree"]], "pycypher.node_classes.ObjectAttributeLookup": [[12, 5, 1, "", "children"], [12, 4, 1, "", "tree"]], "pycypher.node_classes.Or": [[12, 4, 1, "", "tree"]], "pycypher.node_classes.Predicate": [[12, 5, 1, "", "children"], [12, 4, 1, "", "tree"]], "pycypher.node_classes.Projection": [[12, 5, 1, "", "children"], [12, 4, 1, "", "tree"]], "pycypher.node_classes.Query": [[12, 5, 1, "", "children"], [12, 4, 1, "", "tree"]], "pycypher.node_classes.Relationship": [[12, 5, 1, "", "children"], [12, 5, 1, "", "constraints_bak"], [12, 4, 1, "", "tree"]], "pycypher.node_classes.RelationshipChain": [[12, 5, 1, "", "children"], [12, 4, 1, "", "tree"]], "pycypher.node_classes.RelationshipChainList": [[12, 5, 1, "", "children"], [12, 4, 1, "", "tree"]], "pycypher.node_classes.RelationshipLeftRight": [[12, 5, 1, "", "children"], [12, 5, 1, "", "constraints"], [12, 4, 1, "", "tree"]], "pycypher.node_classes.RelationshipRightLeft": [[12, 5, 1, "", "children"], [12, 4, 1, "", "tree"]], "pycypher.node_classes.Return": [[12, 5, 1, "", "children"], [12, 4, 1, "", "tree"]], "pycypher.node_classes.Where": [[12, 5, 1, "", "constraints"], [12, 4, 1, "", "tree"]], "pycypher.solver": [[12, 2, 1, "", "Constraint"], [12, 2, 1, "", "ConstraintNodeHasAttributeWithValue"], [12, 2, 1, "", "ConstraintNodeHasLabel"], [12, 2, 1, "", "ConstraintRelationshipHasLabel"], [12, 2, 1, "", "ConstraintRelationshipHasSourceNode"], [12, 2, 1, "", "ConstraintRelationshipHasTargetNode"], [12, 2, 1, "", "IsTrue"], [12, 2, 1, "", "State"]], "pycypher.solver.Constraint": [[12, 4, 1, "", "eval"]], "pycypher.solver.ConstraintNodeHasLabel": [[12, 4, 1, "", "eval"]], "pycypher.solver.IsTrue": [[12, 4, 1, "", "eval"]], "pycypher.tree_mixin": [[12, 2, 1, "", "TreeMixin"]], "pycypher.tree_mixin.TreeMixin": [[12, 5, 1, "", "children"], [12, 6, 1, "", "parent"], [12, 4, 1, "", "print_tree"], [12, 4, 1, "", "tree"], [12, 4, 1, "", "walk"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "exception", "Python exception"], "4": ["py", "method", "Python method"], "5": ["py", "property", "Python property"], "6": ["py", "attribute", "Python attribute"]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:exception", "4": "py:method", "5": "py:property", "6": "py:attribute"}, "terms": {"": [5, 10, 12, 13], "1": 10, "2": 10, "5": 10, "9": [3, 12], "A": [7, 12], "AND": [7, 12], "AS": [2, 7, 12], "And": [0, 7, 10, 11, 12, 13], "But": [10, 13], "For": [10, 13], "If": [10, 13], "In": 10, "It": [2, 3, 10, 12, 13], "OR": [7, 12], "On": [10, 13], "Or": [0, 7, 10, 11, 12], "That": [10, 13], "The": [2, 3, 7, 10, 12, 13], "Then": 10, "There": [10, 13], "To": [4, 10, 12, 13], "_": 12, "__init__": [3, 12], "__main__": [10, 13], "abl": [10, 13], "abov": [10, 13], "abstract": [10, 12, 13], "accept": [10, 13], "activ": 10, "actual": 10, "addit": 10, "addition": [10, 13], "advantag": [10, 13], "against": 10, "alert": 10, "alia": [0, 2, 7, 10, 11, 12], "all": [4, 10, 12, 13], "also": [10, 13], "alwai": [7, 12], "an": [4, 7, 10, 12, 13], "ani": [3, 5, 7, 12], "anoth": [7, 12], "api": 10, "appli": 10, "applic": [7, 12], "apt": [10, 13], "ar": [5, 7, 10, 12, 13], "arbitrari": [10, 13], "arg": 12, "arrow": [7, 12], "ask": 10, "assign": 10, "ast": [0, 2, 9, 12], "astract": [5, 12], "astral": [10, 13], "atom": [5, 12], "atomicfact": [0, 5, 10, 11, 12], "attribut": [5, 7, 10, 12], "backtrack": 10, "base": [5, 12], "bash": [10, 13], "befor": [5, 12], "begin": [10, 13], "being": [10, 13], "between": [7, 12], "bin": [10, 13], "binari": [7, 12], "binary_oper": 2, "binaryboolean": [0, 7, 10, 11, 12], "bool": 12, "bore": [10, 13], "box": 10, "break": [3, 12], "brew": [10, 13], "build": [10, 13], "built": [10, 13], "bunch": [10, 13], "c": [10, 13], "call": 10, "can": [4, 7, 9, 10, 12, 13], "cannot": [4, 12], "chain": [7, 12], "check": [10, 13], "children": [11, 12], "class": [0, 2, 4, 5, 8, 9, 10, 12, 13], "claus": [7, 12], "clean": [10, 13], "colon": 2, "com": [10, 13], "comma": 2, "complic": 10, "concret": 10, "constraint": [0, 2, 7, 10, 11, 12], "constraintnodehasattributewithvalu": [11, 12], "constraintnodehaslabel": [11, 12], "constraintrelationshiphaslabel": [11, 12], "constraintrelationshiphassourcenod": [11, 12], "constraintrelationshiphastargetnod": [11, 12], "constraints_bak": [11, 12], "construct": 10, "contain": [7, 10, 12, 13], "content": 11, "contrast": 10, "cool": [10, 13], "creat": [2, 10], "curl": [10, 13], "custom": [4, 12], "cypher": [0, 2, 7, 11, 12], "cypher_lex": [3, 11], "cypher_pars": 2, "cypher_stat": 10, "cypher_text": 2, "cypherpars": [0, 1, 2, 4, 10, 12, 13], "cypherparsingerror": [0, 4, 10, 11, 12], "dai": [10, 13], "dash": 2, "data": 10, "decor": 11, "defin": [3, 10, 12], "definit": [7, 12], "delet": [10, 13], "depend": [10, 13], "design": [10, 13], "develop": 10, "dictionari": [7, 10, 12], "differ": [7, 12], "direct": [10, 13], "directli": [7, 12], "distribut": [10, 13], "do": [10, 13], "doc": [10, 13], "document": [10, 13], "domain": 10, "don": [10, 13], "dot": [2, 7, 12], "drive": [10, 13], "earli": [10, 13], "easi": 10, "edit": [10, 13], "elimin": [10, 13], "end": [3, 10, 12, 13], "engin": [10, 13], "entir": [7, 12], "environ": [10, 13], "equal": [0, 2, 7, 10, 11, 12], "eras": [10, 13], "etc": [10, 13], "eval": [11, 12], "evalu": [7, 12], "everi": [9, 10, 12], "exact": 10, "exampl": [10, 13], "except": [0, 10, 11], "execut": 10, "experiment": 10, "express": [4, 7, 12], "fact": [0, 10, 11], "fact1": 10, "fact2": 10, "fact3": 10, "fact4": 10, "fact5": 10, "fact_collect": 10, "factcollect": [0, 5, 10, 11, 12], "factnodehasattributewithvalu": [0, 5, 10, 11, 12], "factnodehaslabel": [0, 5, 10, 11, 12], "factnoderelatedtonod": [0, 5, 10, 11, 12], "few": 10, "file": [3, 12], "final": 10, "finit": 10, "first": [3, 10, 12], "fixabl": [10, 13], "float": 2, "follow": [7, 10, 12, 13], "foo": [10, 13], "form": [7, 10, 12], "format": 10, "from": [7, 10, 12, 13], "fssl": [10, 13], "function": [2, 3, 10, 13], "gather_constraint": [11, 12], "gener": [2, 7, 9, 12], "get": 10, "githubusercont": [10, 13], "god": 10, "got": 10, "gotten": 10, "grammar": 10, "graph": [7, 10, 12, 13], "greater": [7, 12], "greaterthan": [0, 2, 7, 10, 11, 12], "grow": [10, 13], "ha": [4, 7, 10, 12], "happen": [10, 13], "hard": [10, 13], "have": [5, 10, 12, 13], "haven": 10, "head": [10, 13], "help": 10, "hi": [7, 12], "home": 10, "homebrew": [10, 13], "hope": [10, 13], "html": [10, 13], "http": [10, 13], "i": [2, 3, 7, 8, 9, 10, 12, 13], "id": 10, "idea": 10, "import": [3, 10, 12, 13], "includ": [7, 12], "incomplet": [10, 13], "incomplete_relationship_chain": 2, "index": [5, 12], "individu": 10, "infix": [7, 12], "insert": [0, 5, 10, 11, 12], "instal": 13, "instanc": 10, "instanti": [7, 10, 12], "integ": 2, "intuit": 10, "istru": [0, 8, 10, 11, 12], "itself": [3, 10, 12], "join": [7, 12], "kei": [7, 10, 12], "kid": [10, 13], "know": 10, "kwarg": 12, "label": [7, 10, 12], "languag": [3, 10, 12, 13], "larg": 10, "lcurli": 2, "left": [7, 12], "left_right": 2, "left_sid": [7, 12], "less": [7, 12], "lessthan": [0, 2, 7, 10, 11, 12], "lex": [3, 10, 12], "lexer": [0, 10, 12], "lextoken": [3, 12], "librari": [7, 9, 10, 12], "like": [10, 13], "list": [2, 5, 7, 10, 12], "liter": [0, 2, 7, 10, 11, 12], "ll": [10, 13], "logger": [0, 10, 11], "logic": 10, "long": 10, "lookup": [7, 12], "lparen": 2, "lsquar": 2, "lssf": [10, 13], "luke": [10, 13], "mai": [7, 12], "main": 2, "make": [10, 13], "makefil": [10, 13], "map": [0, 7, 10, 11, 12], "mapping_list": [2, 7, 12], "mappingset": [0, 7, 10, 11, 12], "match": [0, 2, 7, 10, 11, 12, 13], "match_claus": [7, 12], "match_list": [7, 12], "match_pattern": 2, "matchlist": [0, 7, 10, 11, 12], "mean": [10, 13], "mere": [8, 12], "method": [9, 10, 12], "mixin": [0, 10, 12], "modul": [7, 10, 11, 13], "multipl": [7, 12], "mutablesequ": 12, "myrelationship": 10, "n": [10, 13], "name": [7, 10, 12], "name_label": [2, 7, 12], "need": [10, 13], "networkx": 10, "next": 10, "node": [0, 2, 9, 10, 11, 12, 13], "node1_id": [5, 12], "node2_id": [5, 12], "node_class": [7, 11], "node_id": [5, 12], "node_label": [5, 12], "node_name_label": [7, 12], "nodenamelabel": [0, 7, 10, 11, 12, 13], "none": [7, 10, 12, 13], "note": [7, 12], "notic": 10, "number": 10, "object": [7, 10, 12], "object_attribute_lookup": 2, "objectattributelookup": [0, 7, 10, 11, 12, 13], "old": 10, "onli": [10, 13], "oper": [7, 12], "option": [7, 12], "order": [10, 13], "other": 10, "otherth": 10, "out": [10, 13], "over": 10, "p": 2, "p_alia": [0, 1, 2, 10], "p_binary_oper": [0, 1, 2, 10], "p_cypher": [0, 1, 2, 10], "p_float": [0, 1, 2, 10], "p_incomplete_relationship_chain": [0, 1, 2, 10], "p_integ": [0, 1, 2, 10], "p_left_right": [0, 1, 2, 10], "p_liter": [0, 1, 2, 10], "p_mapping_list": [0, 1, 2, 10], "p_match_pattern": [0, 1, 2, 10], "p_name_label": [0, 1, 2, 10], "p_node": [0, 1, 2, 10], "p_object_attribute_lookup": [0, 1, 2, 10], "p_predic": [0, 1, 2, 10], "p_project": [0, 1, 2, 10], "p_queri": [0, 1, 2, 10], "p_relationship": [0, 1, 2, 10], "p_relationship_chain": [0, 1, 2, 10], "p_relationship_chain_list": [0, 1, 2, 10], "p_return": [0, 1, 2, 10], "p_right_left": [0, 1, 2, 10], "p_string": [0, 1, 2, 10], "p_where": [0, 1, 2, 10], "packag": [2, 3, 10, 11, 13], "pair": [7, 12], "parent": [11, 12], "pars": [2, 3, 4, 10, 12, 13], "parser": [0, 1, 3, 7, 10, 12, 13], "parsetab": 11, "partial": 10, "pass": 10, "pattern": [7, 12], "ply": [3, 10, 12], "point": [7, 12], "potenti": 10, "predic": [0, 2, 7, 8, 10, 11, 12], "prefix": [7, 12], "pretti": [7, 9, 12], "print": [7, 9, 10, 12, 13], "print_tre": [0, 9, 10, 11, 12, 13], "probabl": 10, "problem": [2, 10], "process": [3, 10, 12], "progress": [10, 13], "project": [0, 2, 7, 10, 11, 12, 13], "properti": [7, 12], "provid": [9, 10, 12], "put": 10, "py": [3, 10, 12, 13], "pycyph": [2, 3, 4, 5, 7, 8, 9, 13], "queri": [0, 2, 7, 11, 12, 13], "raw": [10, 13], "rcurli": 2, "re": [10, 13], "reader": 10, "realli": [10, 13], "refer": [7, 12], "relationship": [0, 2, 7, 10, 11, 12], "relationship_chain": 2, "relationship_chain_list": 2, "relationship_label": [5, 12], "relationship_nam": 12, "relationshipchain": [0, 7, 10, 11, 12], "relationshipchainlist": [0, 7, 10, 11, 12], "relationshipleftright": [0, 7, 10, 11, 12], "relationshiprightleft": [0, 7, 10, 11, 12], "repres": [7, 8, 10, 12], "represent": [7, 9, 12], "represn": [7, 12], "requir": 10, "respons": 2, "result": [10, 13], "return": [0, 2, 7, 10, 11, 12, 13], "return_claus": [7, 12], "rich": [7, 9, 10, 12], "right": [7, 10, 12, 13], "right_left": 2, "right_sid": [7, 12], "root": [7, 12], "rparen": 2, "rsquar": 2, "run": [10, 13], "sai": [8, 10, 12], "said": [10, 13], "satisfact": [2, 10], "satisfi": 10, "script": [10, 13], "semant": [7, 10, 12], "sens": 10, "separ": [7, 12], "set": [7, 12], "sever": [7, 12], "sh": [10, 13], "share": [7, 12], "should": [10, 13], "simpl": [5, 10, 12], "singl": [7, 12], "small": [10, 13], "so": [7, 10, 12, 13], "solut": [2, 10], "solv": 2, "solver": [0, 10, 11], "sourc": [10, 13], "source_node_nam": 12, "specif": [5, 7, 12], "start": 10, "state": [10, 11, 12, 13], "statement": [5, 7, 10, 12, 13], "step": [3, 7, 10, 12], "still": [10, 13], "str": [2, 5, 7, 12], "string": [2, 3, 12], "structur": [4, 10, 12, 13], "style": 10, "subclass": [7, 12], "submodul": 11, "subset": [10, 13], "sudo": [10, 13], "support": 10, "syntax": [10, 13], "system": [10, 13], "t": [3, 10, 12, 13], "t_string": [0, 3, 10, 11, 12], "t_word": [0, 3, 10, 11, 12], "take": [10, 13], "taken": [7, 12], "target": 10, "target_node_nam": 12, "tediou": 10, "test": [10, 11, 13], "than": [7, 12], "them": [7, 10, 12], "therefor": [10, 13], "thi": [2, 3, 7, 9, 10, 12, 13], "thing": [10, 13], "think": [7, 12], "those": [2, 10], "thrown": [4, 12], "togeth": [7, 12], "token": [3, 12], "treat": 10, "tree": [0, 7, 10, 11, 12, 13], "tree_mixin": [9, 11], "treemixin": [0, 2, 7, 9, 10, 11, 12], "trivial": [10, 13], "true": [8, 12], "truth": [5, 7, 12], "tupl": 2, "type": [5, 12], "ubuntu": [10, 13], "ugli": [10, 13], "unari": [7, 12], "understand": [10, 13], "unexpect": [4, 12], "unexpectedcypherstructureerror": [0, 4, 10, 11, 12], "unit": [10, 13], "us": [3, 7, 9, 12], "uv": [10, 13], "valu": [5, 7, 10, 12], "variabl": [7, 10, 12], "variou": 10, "ve": 10, "veri": [10, 13], "version": [10, 13], "virtual": [10, 13], "wai": 10, "walk": [0, 9, 10, 11, 12], "want": [10, 13], "we": [7, 10, 12], "what": [10, 13], "when": [4, 10, 12], "where": [0, 2, 7, 10, 11, 12], "which": [2, 3, 7, 9, 10, 12, 13], "whivh": [7, 12], "whose": 10, "why": 10, "without": [10, 13], "woefulli": [10, 13], "word": [2, 10], "work": [10, 13], "would": 10, "write": [10, 13], "yacc": 10, "yaccproduct": 2, "yet": [10, 13], "yield": [9, 10, 12], "you": [10, 13], "your": [10, 13], "z_": [3, 12], "z_0": [3, 12], "za": [3, 12]}, "titles": ["API", "pycypher", "Parser", "Lexer", "Exceptions", "Facts", "Logger", "AST Node Classes", "Constraint Solver", "Tree Mixin", "PyCypher: A Pythonic Cypher Query Builder", "pycypher", "pycypher package", "Cypher AST Generator for Python"], "titleterms": {"A": 10, "api": 0, "ast": [7, 10, 13], "builder": 10, "class": 7, "constraint": 8, "content": [10, 12], "cypher": [10, 13], "cypher_lex": 12, "decor": 12, "everyth": [10, 13], "except": [4, 12], "fact": [5, 12], "gener": [10, 13], "hood": 10, "how": [10, 13], "instal": 10, "lexer": 3, "linux": [10, 13], "logger": [6, 12], "mac": [10, 13], "mixin": 9, "modul": 12, "node": 7, "node_class": 12, "packag": 12, "parser": 2, "parsetab": 12, "pycyph": [1, 10, 11, 12], "python": [10, 13], "queri": 10, "requir": 13, "set": [10, 13], "solver": [8, 12], "submodul": 12, "test": 12, "tree": 9, "tree_mixin": 12, "under": 10, "up": [10, 13], "us": [10, 13], "window": [10, 13]}})
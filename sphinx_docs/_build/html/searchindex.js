Search.setIndex({"alltitles": {"API": [[0, null]], "AST Node Classes": [[4, null]], "Attributes": [[10, "attributes"]], "Attributes:": [[4, "attributes"], [10, "id1"]], "Constraint Solver": [[10, null]], "Contents": [[1, "contents"]], "Cypher AST Generator for Python": [[1, "cypher-ast-generator-for-python"]], "Cypher Parser": [[3, null]], "Data Source": [[6, null]], "Fact and FactCollection": [[7, null]], "Goldberg": [[8, null]], "How to use it": [[1, "how-to-use-it"]], "Installation": [[1, "installation"]], "Lexer": [[2, null]], "Mac and Linux": [[1, "mac-and-linux"]], "Message Types": [[9, null]], "Methods": [[10, "methods"]], "Methods:": [[10, "id2"]], "NetworkX Shim": [[12, null]], "PyCypher: A Pythonic Cypher Query Builder": [[1, null]], "Setting everything up": [[1, "setting-everything-up"]], "Tree Mixin": [[5, null]], "Trigger": [[11, null]], "Under the hood": [[1, "under-the-hood"]], "Windows": [[1, "windows"]]}, "docnames": ["api", "index", "pycypher.core.cypher_lexer", "pycypher.core.cypher_parser", "pycypher.core.node_classes", "pycypher.core.tree_mixin", "pycypher.etl.data_source", "pycypher.etl.fact", "pycypher.etl.goldberg", "pycypher.etl.message_types", "pycypher.etl.solver", "pycypher.etl.trigger", "pycypher.shims.networkx_cypher"], "envversion": {"sphinx": 62, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["api.rst", "index.rst", "pycypher.core.cypher_lexer.rst", "pycypher.core.cypher_parser.rst", "pycypher.core.node_classes.rst", "pycypher.core.tree_mixin.rst", "pycypher.etl.data_source.rst", "pycypher.etl.fact.rst", "pycypher.etl.goldberg.rst", "pycypher.etl.message_types.rst", "pycypher.etl.solver.rst", "pycypher.etl.trigger.rst", "pycypher.shims.networkx_cypher.rst"], "indexentries": {"addition (class in pycypher.core.node_classes)": [[4, "pycypher.core.node_classes.Addition", false]], "aggregated_variables (pycypher.core.node_classes.withclause property)": [[4, "pycypher.core.node_classes.WithClause.aggregated_variables", false]], "aggregation (class in pycypher.core.node_classes)": [[4, "pycypher.core.node_classes.Aggregation", false]], "alias (class in pycypher.core.node_classes)": [[4, "pycypher.core.node_classes.Alias", false]], "aliasedname (class in pycypher.core.node_classes)": [[4, "pycypher.core.node_classes.AliasedName", false]], "all_variables (pycypher.core.node_classes.withclause property)": [[4, "pycypher.core.node_classes.WithClause.all_variables", false]], "and (class in pycypher.core.node_classes)": [[4, "pycypher.core.node_classes.And", false]], "append() (pycypher.etl.fact.factcollection method)": [[7, "pycypher.etl.fact.FactCollection.append", false]], "argument_types (pycypher.core.node_classes.not attribute)": [[4, "pycypher.core.node_classes.Not.argument_types", false]], "argument_types (pycypher.core.node_classes.predicate attribute)": [[4, "pycypher.core.node_classes.Predicate.argument_types", false]], "atomicfact (class in pycypher.etl.fact)": [[7, "pycypher.etl.fact.AtomicFact", false]], "attach_data_source() (pycypher.etl.goldberg.goldberg method)": [[8, "pycypher.etl.goldberg.Goldberg.attach_data_source", false]], "attach_fact_collection() (pycypher.etl.goldberg.goldberg method)": [[8, "pycypher.etl.goldberg.Goldberg.attach_fact_collection", false]], "attach_mapping() (pycypher.etl.data_source.datasource method)": [[6, "pycypher.etl.data_source.DataSource.attach_mapping", false]], "attach_queue() (pycypher.etl.data_source.datasource method)": [[6, "pycypher.etl.data_source.DataSource.attach_queue", false]], "attach_raw_data_processor() (pycypher.etl.goldberg.goldberg method)": [[8, "pycypher.etl.goldberg.Goldberg.attach_raw_data_processor", false]], "binaryboolean (class in pycypher.core.node_classes)": [[4, "pycypher.core.node_classes.BinaryBoolean", false]], "block() (pycypher.etl.data_source.rawdatathread method)": [[6, "pycypher.etl.data_source.RawDataThread.block", false]], "block_until_finished() (pycypher.etl.goldberg.goldberg method)": [[8, "pycypher.etl.goldberg.Goldberg.block_until_finished", false]], "checkfactagainsttriggersqueueprocessor (class in pycypher.etl.goldberg)": [[8, "pycypher.etl.goldberg.CheckFactAgainstTriggersQueueProcessor", false]], "children (pycypher.core.node_classes.addition property)": [[4, "pycypher.core.node_classes.Addition.children", false]], "children (pycypher.core.node_classes.aggregation property)": [[4, "pycypher.core.node_classes.Aggregation.children", false]], "children (pycypher.core.node_classes.alias property)": [[4, "pycypher.core.node_classes.Alias.children", false]], "children (pycypher.core.node_classes.aliasedname property)": [[4, "pycypher.core.node_classes.AliasedName.children", false]], "children (pycypher.core.node_classes.collect property)": [[4, "pycypher.core.node_classes.Collect.children", false]], "children (pycypher.core.node_classes.collection property)": [[4, "pycypher.core.node_classes.Collection.children", false]], "children (pycypher.core.node_classes.cypher property)": [[4, "pycypher.core.node_classes.Cypher.children", false]], "children (pycypher.core.node_classes.distinct property)": [[4, "pycypher.core.node_classes.Distinct.children", false]], "children (pycypher.core.node_classes.mapping property)": [[4, "pycypher.core.node_classes.Mapping.children", false]], "children (pycypher.core.node_classes.mappingset property)": [[4, "pycypher.core.node_classes.MappingSet.children", false]], "children (pycypher.core.node_classes.match property)": [[4, "pycypher.core.node_classes.Match.children", false]], "children (pycypher.core.node_classes.node property)": [[4, "pycypher.core.node_classes.Node.children", false]], "children (pycypher.core.node_classes.nodenamelabel property)": [[4, "pycypher.core.node_classes.NodeNameLabel.children", false]], "children (pycypher.core.node_classes.objectasseries property)": [[4, "pycypher.core.node_classes.ObjectAsSeries.children", false]], "children (pycypher.core.node_classes.objectattributelookup property)": [[4, "pycypher.core.node_classes.ObjectAttributeLookup.children", false]], "children (pycypher.core.node_classes.predicate property)": [[4, "pycypher.core.node_classes.Predicate.children", false]], "children (pycypher.core.node_classes.projection property)": [[4, "pycypher.core.node_classes.Projection.children", false]], "children (pycypher.core.node_classes.query property)": [[4, "pycypher.core.node_classes.Query.children", false]], "children (pycypher.core.node_classes.relationship property)": [[4, "pycypher.core.node_classes.Relationship.children", false]], "children (pycypher.core.node_classes.relationshipchain property)": [[4, "pycypher.core.node_classes.RelationshipChain.children", false]], "children (pycypher.core.node_classes.relationshipchainlist property)": [[4, "pycypher.core.node_classes.RelationshipChainList.children", false]], "children (pycypher.core.node_classes.relationshipleftright property)": [[4, "pycypher.core.node_classes.RelationshipLeftRight.children", false]], "children (pycypher.core.node_classes.relationshiprightleft property)": [[4, "pycypher.core.node_classes.RelationshipRightLeft.children", false]], "children (pycypher.core.node_classes.return property)": [[4, "pycypher.core.node_classes.Return.children", false]], "children (pycypher.core.node_classes.size property)": [[4, "pycypher.core.node_classes.Size.children", false]], "children (pycypher.core.node_classes.where property)": [[4, "pycypher.core.node_classes.Where.children", false]], "children (pycypher.core.node_classes.withclause property)": [[4, "pycypher.core.node_classes.WithClause.children", false]], "children (pycypher.core.tree_mixin.treemixin property)": [[5, "pycypher.core.tree_mixin.TreeMixin.children", false]], "collect (class in pycypher.core.node_classes)": [[4, "pycypher.core.node_classes.Collect", false]], "collection (class in pycypher.core.node_classes)": [[4, "pycypher.core.node_classes.Collection", false]], "computationrequest (class in pycypher.etl.message_types)": [[9, "pycypher.etl.message_types.ComputationRequest", false]], "constraint (class in pycypher.etl.solver)": [[10, "pycypher.etl.solver.Constraint", false]], "constraintnodehasattributewithvalue (class in pycypher.etl.solver)": [[10, "pycypher.etl.solver.ConstraintNodeHasAttributeWithValue", false]], "constraintnodehaslabel (class in pycypher.etl.solver)": [[10, "pycypher.etl.solver.ConstraintNodeHasLabel", false]], "constraintrelationshiphaslabel (class in pycypher.etl.solver)": [[10, "pycypher.etl.solver.ConstraintRelationshipHasLabel", false]], "constraintrelationshiphassourcenode (class in pycypher.etl.solver)": [[10, "pycypher.etl.solver.ConstraintRelationshipHasSourceNode", false]], "constraintrelationshiphastargetnode (class in pycypher.etl.solver)": [[10, "pycypher.etl.solver.ConstraintRelationshipHasTargetNode", false]], "constraints (pycypher.core.node_classes.mapping property)": [[4, "pycypher.core.node_classes.Mapping.constraints", false]], "constraints (pycypher.core.node_classes.node property)": [[4, "pycypher.core.node_classes.Node.constraints", false]], "constraints (pycypher.core.node_classes.relationshipleftright property)": [[4, "pycypher.core.node_classes.RelationshipLeftRight.constraints", false]], "constraints (pycypher.core.node_classes.where property)": [[4, "pycypher.core.node_classes.Where.constraints", false]], "constraints (pycypher.etl.goldberg.goldberg property)": [[8, "pycypher.etl.goldberg.Goldberg.constraints", false]], "constraintvariablereferstospecificobject (class in pycypher.etl.solver)": [[10, "pycypher.etl.solver.ConstraintVariableRefersToSpecificObject", false]], "csvdatasource (class in pycypher.etl.data_source)": [[6, "pycypher.etl.data_source.CSVDataSource", false]], "cypher (class in pycypher.core.node_classes)": [[4, "pycypher.core.node_classes.Cypher", false]], "cypher_trigger() (pycypher.etl.goldberg.goldberg method)": [[8, "pycypher.etl.goldberg.Goldberg.cypher_trigger", false]], "cypherparser (class in pycypher.core.cypher_parser)": [[3, "pycypher.core.cypher_parser.CypherParser", false]], "cyphertrigger (class in pycypher.etl.trigger)": [[11, "pycypher.etl.trigger.CypherTrigger", false]], "datasource (class in pycypher.etl.data_source)": [[6, "pycypher.etl.data_source.DataSource", false]], "datasourcemapping (class in pycypher.etl.data_source)": [[6, "pycypher.etl.data_source.DataSourceMapping", false]], "datasourcesexhausted (class in pycypher.etl.message_types)": [[9, "pycypher.etl.message_types.DataSourcesExhausted", false]], "distinct (class in pycypher.core.node_classes)": [[4, "pycypher.core.node_classes.Distinct", false]], "division (class in pycypher.core.node_classes)": [[4, "pycypher.core.node_classes.Division", false]], "enclosing_class() (pycypher.core.tree_mixin.treemixin method)": [[5, "pycypher.core.tree_mixin.TreeMixin.enclosing_class", false]], "endofdata (class in pycypher.etl.message_types)": [[9, "pycypher.etl.message_types.EndOfData", false]], "equals (class in pycypher.core.node_classes)": [[4, "pycypher.core.node_classes.Equals", false]], "evaluable (class in pycypher.core.node_classes)": [[4, "pycypher.core.node_classes.Evaluable", false]], "evaluate() (pycypher.core.node_classes.evaluable method)": [[4, "pycypher.core.node_classes.Evaluable.evaluate", false]], "factcollection (class in pycypher.etl.fact)": [[7, "pycypher.etl.fact.FactCollection", false]], "factgeneratedqueueprocessor (class in pycypher.etl.goldberg)": [[8, "pycypher.etl.goldberg.FactGeneratedQueueProcessor", false]], "factnodehasattributewithvalue (class in pycypher.etl.fact)": [[7, "pycypher.etl.fact.FactNodeHasAttributeWithValue", false]], "factnodehaslabel (class in pycypher.etl.fact)": [[7, "pycypher.etl.fact.FactNodeHasLabel", false]], "factnoderelatedtonode (class in pycypher.etl.fact)": [[7, "pycypher.etl.fact.FactNodeRelatedToNode", false]], "factrelationshiphasattributewithvalue (class in pycypher.etl.fact)": [[7, "pycypher.etl.fact.FactRelationshipHasAttributeWithValue", false]], "factrelationshiphaslabel (class in pycypher.etl.fact)": [[7, "pycypher.etl.fact.FactRelationshipHasLabel", false]], "factrelationshiphassourcenode (class in pycypher.etl.fact)": [[7, "pycypher.etl.fact.FactRelationshipHasSourceNode", false]], "factrelationshiphastargetnode (class in pycypher.etl.fact)": [[7, "pycypher.etl.fact.FactRelationshipHasTargetNode", false]], "facts_matching_constraints() (pycypher.etl.goldberg.goldberg method)": [[8, "pycypher.etl.goldberg.Goldberg.facts_matching_constraints", false]], "fixturedatasource (class in pycypher.etl.data_source)": [[6, "pycypher.etl.data_source.FixtureDataSource", false]], "from_uri() (pycypher.etl.data_source.datasource class method)": [[6, "pycypher.etl.data_source.DataSource.from_uri", false]], "gather_constraints() (pycypher.core.node_classes.match method)": [[4, "pycypher.core.node_classes.Match.gather_constraints", false]], "gather_variables() (pycypher.core.node_classes.return method)": [[4, "pycypher.core.node_classes.Return.gather_variables", false]], "generate_raw_facts_from_row() (pycypher.etl.data_source.datasource method)": [[6, "pycypher.etl.data_source.DataSource.generate_raw_facts_from_row", false]], "get_return_clause() (pycypher.core.node_classes.cypher method)": [[4, "pycypher.core.node_classes.Cypher.get_return_clause", false]], "goldberg (class in pycypher.etl.goldberg)": [[8, "pycypher.etl.goldberg.Goldberg", false]], "greaterthan (class in pycypher.core.node_classes)": [[4, "pycypher.core.node_classes.GreaterThan", false]], "halt() (pycypher.etl.goldberg.goldberg method)": [[8, "pycypher.etl.goldberg.Goldberg.halt", false]], "has_unfinished_data_source() (pycypher.etl.goldberg.goldberg method)": [[8, "pycypher.etl.goldberg.Goldberg.has_unfinished_data_source", false]], "insert() (pycypher.etl.fact.factcollection method)": [[7, "pycypher.etl.fact.FactCollection.insert", false]], "is_attribute_mapping (pycypher.etl.data_source.datasourcemapping property)": [[6, "pycypher.etl.data_source.DataSourceMapping.is_attribute_mapping", false]], "is_empty() (pycypher.etl.fact.factcollection method)": [[7, "pycypher.etl.fact.FactCollection.is_empty", false]], "is_label_mapping (pycypher.etl.data_source.datasourcemapping property)": [[6, "pycypher.etl.data_source.DataSourceMapping.is_label_mapping", false]], "is_relationship_mapping (pycypher.etl.data_source.datasourcemapping property)": [[6, "pycypher.etl.data_source.DataSourceMapping.is_relationship_mapping", false]], "istrue (class in pycypher.etl.solver)": [[10, "pycypher.etl.solver.IsTrue", false]], "left_side_types (pycypher.core.node_classes.binaryboolean attribute)": [[4, "pycypher.core.node_classes.BinaryBoolean.left_side_types", false]], "left_side_types (pycypher.core.node_classes.predicate attribute)": [[4, "pycypher.core.node_classes.Predicate.left_side_types", false]], "lessthan (class in pycypher.core.node_classes)": [[4, "pycypher.core.node_classes.LessThan", false]], "literal (class in pycypher.core.node_classes)": [[4, "pycypher.core.node_classes.Literal", false]], "make_fact_collection() (pycypher.shims.networkx_cypher.networkx method)": [[12, "pycypher.shims.networkx_cypher.NetworkX.make_fact_collection", false]], "mapping (class in pycypher.core.node_classes)": [[4, "pycypher.core.node_classes.Mapping", false]], "mappingset (class in pycypher.core.node_classes)": [[4, "pycypher.core.node_classes.MappingSet", false]], "match (class in pycypher.core.node_classes)": [[4, "pycypher.core.node_classes.Match", false]], "matchlist (class in pycypher.core.node_classes)": [[4, "pycypher.core.node_classes.MatchList", false]], "message (class in pycypher.etl.message_types)": [[9, "pycypher.etl.message_types.Message", false]], "module": [[2, "module-pycypher.core.cypher_lexer", false], [3, "module-pycypher.core.cypher_parser", false], [4, "module-pycypher.core.node_classes", false], [5, "module-pycypher.core.tree_mixin", false], [6, "module-pycypher.etl.data_source", false], [7, "module-pycypher.etl.fact", false], [8, "module-pycypher.etl.goldberg", false], [9, "module-pycypher.etl.message_types", false], [10, "module-pycypher.etl.solver", false], [11, "module-pycypher.etl.trigger", false], [12, "module-pycypher.shims.networkx_cypher", false]], "monitor() (pycypher.etl.goldberg.goldberg method)": [[8, "pycypher.etl.goldberg.Goldberg.monitor", false]], "multiplication (class in pycypher.core.node_classes)": [[4, "pycypher.core.node_classes.Multiplication", false]], "networkx (class in pycypher.shims.networkx_cypher)": [[12, "pycypher.shims.networkx_cypher.NetworkX", false]], "node (class in pycypher.core.node_classes)": [[4, "pycypher.core.node_classes.Node", false]], "node_has_attribute_with_value_facts() (pycypher.etl.fact.factcollection method)": [[7, "pycypher.etl.fact.FactCollection.node_has_attribute_with_value_facts", false]], "node_has_label_facts() (pycypher.etl.fact.factcollection method)": [[7, "pycypher.etl.fact.FactCollection.node_has_label_facts", false]], "node_with_id_exists() (pycypher.etl.fact.factcollection method)": [[7, "pycypher.etl.fact.FactCollection.node_with_id_exists", false]], "nodenamelabel (class in pycypher.core.node_classes)": [[4, "pycypher.core.node_classes.NodeNameLabel", false]], "non_aggregated_variables (pycypher.core.node_classes.withclause property)": [[4, "pycypher.core.node_classes.WithClause.non_aggregated_variables", false]], "not (class in pycypher.core.node_classes)": [[4, "pycypher.core.node_classes.Not", false]], "objectasseries (class in pycypher.core.node_classes)": [[4, "pycypher.core.node_classes.ObjectAsSeries", false]], "objectattributelookup (class in pycypher.core.node_classes)": [[4, "pycypher.core.node_classes.ObjectAttributeLookup", false]], "or (class in pycypher.core.node_classes)": [[4, "pycypher.core.node_classes.Or", false]], "p_aggregation() (in module pycypher.core.cypher_parser)": [[3, "pycypher.core.cypher_parser.p_aggregation", false]], "p_alias() (in module pycypher.core.cypher_parser)": [[3, "pycypher.core.cypher_parser.p_alias", false]], "p_aliased_name() (in module pycypher.core.cypher_parser)": [[3, "pycypher.core.cypher_parser.p_aliased_name", false]], "p_binary_expression() (in module pycypher.core.cypher_parser)": [[3, "pycypher.core.cypher_parser.p_binary_expression", false]], "p_binary_function() (in module pycypher.core.cypher_parser)": [[3, "pycypher.core.cypher_parser.p_binary_function", false]], "p_binary_operator() (in module pycypher.core.cypher_parser)": [[3, "pycypher.core.cypher_parser.p_binary_operator", false]], "p_collect() (in module pycypher.core.cypher_parser)": [[3, "pycypher.core.cypher_parser.p_collect", false]], "p_cypher() (in module pycypher.core.cypher_parser)": [[3, "pycypher.core.cypher_parser.p_cypher", false]], "p_float() (in module pycypher.core.cypher_parser)": [[3, "pycypher.core.cypher_parser.p_float", false]], "p_incomplete_relationship_chain() (in module pycypher.core.cypher_parser)": [[3, "pycypher.core.cypher_parser.p_incomplete_relationship_chain", false]], "p_integer() (in module pycypher.core.cypher_parser)": [[3, "pycypher.core.cypher_parser.p_integer", false]], "p_left_right() (in module pycypher.core.cypher_parser)": [[3, "pycypher.core.cypher_parser.p_left_right", false]], "p_literal() (in module pycypher.core.cypher_parser)": [[3, "pycypher.core.cypher_parser.p_literal", false]], "p_mapping_list() (in module pycypher.core.cypher_parser)": [[3, "pycypher.core.cypher_parser.p_mapping_list", false]], "p_match_pattern() (in module pycypher.core.cypher_parser)": [[3, "pycypher.core.cypher_parser.p_match_pattern", false]], "p_name_label() (in module pycypher.core.cypher_parser)": [[3, "pycypher.core.cypher_parser.p_name_label", false]], "p_node() (in module pycypher.core.cypher_parser)": [[3, "pycypher.core.cypher_parser.p_node", false]], "p_object_attribute_lookup() (in module pycypher.core.cypher_parser)": [[3, "pycypher.core.cypher_parser.p_object_attribute_lookup", false]], "p_predicate() (in module pycypher.core.cypher_parser)": [[3, "pycypher.core.cypher_parser.p_predicate", false]], "p_projection() (in module pycypher.core.cypher_parser)": [[3, "pycypher.core.cypher_parser.p_projection", false]], "p_query() (in module pycypher.core.cypher_parser)": [[3, "pycypher.core.cypher_parser.p_query", false]], "p_relationship() (in module pycypher.core.cypher_parser)": [[3, "pycypher.core.cypher_parser.p_relationship", false]], "p_relationship_chain() (in module pycypher.core.cypher_parser)": [[3, "pycypher.core.cypher_parser.p_relationship_chain", false]], "p_relationship_chain_list() (in module pycypher.core.cypher_parser)": [[3, "pycypher.core.cypher_parser.p_relationship_chain_list", false]], "p_return() (in module pycypher.core.cypher_parser)": [[3, "pycypher.core.cypher_parser.p_return", false]], "p_right_left() (in module pycypher.core.cypher_parser)": [[3, "pycypher.core.cypher_parser.p_right_left", false]], "p_string() (in module pycypher.core.cypher_parser)": [[3, "pycypher.core.cypher_parser.p_string", false]], "p_where() (in module pycypher.core.cypher_parser)": [[3, "pycypher.core.cypher_parser.p_where", false]], "p_with_as_series() (in module pycypher.core.cypher_parser)": [[3, "pycypher.core.cypher_parser.p_with_as_series", false]], "p_with_clause() (in module pycypher.core.cypher_parser)": [[3, "pycypher.core.cypher_parser.p_with_clause", false]], "parquetfiledatasource (class in pycypher.etl.data_source)": [[6, "pycypher.etl.data_source.ParquetFileDataSource", false]], "parse_obj (pycypher.core.tree_mixin.treemixin property)": [[5, "pycypher.core.tree_mixin.TreeMixin.parse_obj", false]], "predicate (class in pycypher.core.node_classes)": [[4, "pycypher.core.node_classes.Predicate", false]], "print_tree() (pycypher.core.tree_mixin.treemixin method)": [[5, "pycypher.core.tree_mixin.TreeMixin.print_tree", false]], "process_against_raw_datum() (pycypher.etl.data_source.datasourcemapping method)": [[6, "pycypher.etl.data_source.DataSourceMapping.process_against_raw_datum", false]], "process_item_from_queue() (pycypher.etl.goldberg.checkfactagainsttriggersqueueprocessor method)": [[8, "pycypher.etl.goldberg.CheckFactAgainstTriggersQueueProcessor.process_item_from_queue", false]], "process_item_from_queue() (pycypher.etl.goldberg.factgeneratedqueueprocessor method)": [[8, "pycypher.etl.goldberg.FactGeneratedQueueProcessor.process_item_from_queue", false]], "process_item_from_queue() (pycypher.etl.goldberg.rawdataprocessor method)": [[8, "pycypher.etl.goldberg.RawDataProcessor.process_item_from_queue", false]], "process_item_from_queue() (pycypher.etl.goldberg.triggeredlookupprocessor method)": [[8, "pycypher.etl.goldberg.TriggeredLookupProcessor.process_item_from_queue", false]], "projection (class in pycypher.core.node_classes)": [[4, "pycypher.core.node_classes.Projection", false]], "pycypher.core.cypher_lexer": [[2, "module-pycypher.core.cypher_lexer", false]], "pycypher.core.cypher_parser": [[3, "module-pycypher.core.cypher_parser", false]], "pycypher.core.node_classes": [[4, "module-pycypher.core.node_classes", false]], "pycypher.core.tree_mixin": [[5, "module-pycypher.core.tree_mixin", false]], "pycypher.etl.data_source": [[6, "module-pycypher.etl.data_source", false]], "pycypher.etl.fact": [[7, "module-pycypher.etl.fact", false]], "pycypher.etl.goldberg": [[8, "module-pycypher.etl.goldberg", false]], "pycypher.etl.message_types": [[9, "module-pycypher.etl.message_types", false]], "pycypher.etl.solver": [[10, "module-pycypher.etl.solver", false]], "pycypher.etl.trigger": [[11, "module-pycypher.etl.trigger", false]], "pycypher.shims.networkx_cypher": [[12, "module-pycypher.shims.networkx_cypher", false]], "query (class in pycypher.core.node_classes)": [[4, "pycypher.core.node_classes.Query", false]], "query() (pycypher.etl.fact.factcollection method)": [[7, "pycypher.etl.fact.FactCollection.query", false]], "queue_rows() (pycypher.etl.data_source.datasource method)": [[6, "pycypher.etl.data_source.DataSource.queue_rows", false]], "queueprocessor (class in pycypher.etl.goldberg)": [[8, "pycypher.etl.goldberg.QueueProcessor", false]], "rawdataprocessor (class in pycypher.etl.goldberg)": [[8, "pycypher.etl.goldberg.RawDataProcessor", false]], "rawdatathread (class in pycypher.etl.data_source)": [[6, "pycypher.etl.data_source.RawDataThread", false]], "rawdatum (class in pycypher.etl.message_types)": [[9, "pycypher.etl.message_types.RawDatum", false]], "relationship (class in pycypher.core.node_classes)": [[4, "pycypher.core.node_classes.Relationship", false]], "relationship_has_attribute_with_value_facts() (pycypher.etl.fact.factcollection method)": [[7, "pycypher.etl.fact.FactCollection.relationship_has_attribute_with_value_facts", false]], "relationship_has_source_node_facts() (pycypher.etl.fact.factcollection method)": [[7, "pycypher.etl.fact.FactCollection.relationship_has_source_node_facts", false]], "relationship_has_target_node_facts() (pycypher.etl.fact.factcollection method)": [[7, "pycypher.etl.fact.FactCollection.relationship_has_target_node_facts", false]], "relationshipchain (class in pycypher.core.node_classes)": [[4, "pycypher.core.node_classes.RelationshipChain", false]], "relationshipchainlist (class in pycypher.core.node_classes)": [[4, "pycypher.core.node_classes.RelationshipChainList", false]], "relationshipleftright (class in pycypher.core.node_classes)": [[4, "pycypher.core.node_classes.RelationshipLeftRight", false]], "relationshiprightleft (class in pycypher.core.node_classes)": [[4, "pycypher.core.node_classes.RelationshipRightLeft", false]], "return (class in pycypher.core.node_classes)": [[4, "pycypher.core.node_classes.Return", false]], "right_side_types (pycypher.core.node_classes.binaryboolean attribute)": [[4, "pycypher.core.node_classes.BinaryBoolean.right_side_types", false]], "right_side_types (pycypher.core.node_classes.division attribute)": [[4, "pycypher.core.node_classes.Division.right_side_types", false]], "right_side_types (pycypher.core.node_classes.predicate attribute)": [[4, "pycypher.core.node_classes.Predicate.right_side_types", false]], "root (pycypher.core.tree_mixin.treemixin property)": [[5, "pycypher.core.tree_mixin.TreeMixin.root", false]], "rows() (pycypher.etl.data_source.csvdatasource method)": [[6, "pycypher.etl.data_source.CSVDataSource.rows", false]], "rows() (pycypher.etl.data_source.datasource method)": [[6, "pycypher.etl.data_source.DataSource.rows", false]], "rows() (pycypher.etl.data_source.fixturedatasource method)": [[6, "pycypher.etl.data_source.FixtureDataSource.rows", false]], "rows() (pycypher.etl.data_source.parquetfiledatasource method)": [[6, "pycypher.etl.data_source.ParquetFileDataSource.rows", false]], "run() (pycypher.etl.data_source.rawdatathread method)": [[6, "pycypher.etl.data_source.RawDataThread.run", false]], "size (class in pycypher.core.node_classes)": [[4, "pycypher.core.node_classes.Size", false]], "solutions() (pycypher.core.node_classes.match method)": [[4, "pycypher.core.node_classes.Match.solutions", false]], "start() (pycypher.etl.data_source.datasource method)": [[6, "pycypher.etl.data_source.DataSource.start", false]], "start_threads() (pycypher.etl.goldberg.goldberg method)": [[8, "pycypher.etl.goldberg.Goldberg.start_threads", false]], "subtraction (class in pycypher.core.node_classes)": [[4, "pycypher.core.node_classes.Subtraction", false]], "subtriggerpair (class in pycypher.etl.goldberg)": [[8, "pycypher.etl.goldberg.SubTriggerPair", false]], "t_string() (in module pycypher.core.cypher_lexer)": [[2, "pycypher.core.cypher_lexer.t_STRING", false]], "t_word() (in module pycypher.core.cypher_lexer)": [[2, "pycypher.core.cypher_lexer.t_WORD", false]], "transform_solutions_by_aggregations() (pycypher.core.node_classes.withclause method)": [[4, "pycypher.core.node_classes.WithClause.transform_solutions_by_aggregations", false]], "tree() (pycypher.core.node_classes.addition method)": [[4, "pycypher.core.node_classes.Addition.tree", false]], "tree() (pycypher.core.node_classes.aggregation method)": [[4, "pycypher.core.node_classes.Aggregation.tree", false]], "tree() (pycypher.core.node_classes.alias method)": [[4, "pycypher.core.node_classes.Alias.tree", false]], "tree() (pycypher.core.node_classes.aliasedname method)": [[4, "pycypher.core.node_classes.AliasedName.tree", false]], "tree() (pycypher.core.node_classes.and method)": [[4, "pycypher.core.node_classes.And.tree", false]], "tree() (pycypher.core.node_classes.binaryboolean method)": [[4, "pycypher.core.node_classes.BinaryBoolean.tree", false]], "tree() (pycypher.core.node_classes.collect method)": [[4, "pycypher.core.node_classes.Collect.tree", false]], "tree() (pycypher.core.node_classes.collection method)": [[4, "pycypher.core.node_classes.Collection.tree", false]], "tree() (pycypher.core.node_classes.cypher method)": [[4, "pycypher.core.node_classes.Cypher.tree", false]], "tree() (pycypher.core.node_classes.distinct method)": [[4, "pycypher.core.node_classes.Distinct.tree", false]], "tree() (pycypher.core.node_classes.division method)": [[4, "pycypher.core.node_classes.Division.tree", false]], "tree() (pycypher.core.node_classes.equals method)": [[4, "pycypher.core.node_classes.Equals.tree", false]], "tree() (pycypher.core.node_classes.greaterthan method)": [[4, "pycypher.core.node_classes.GreaterThan.tree", false]], "tree() (pycypher.core.node_classes.lessthan method)": [[4, "pycypher.core.node_classes.LessThan.tree", false]], "tree() (pycypher.core.node_classes.literal method)": [[4, "pycypher.core.node_classes.Literal.tree", false]], "tree() (pycypher.core.node_classes.mapping method)": [[4, "pycypher.core.node_classes.Mapping.tree", false]], "tree() (pycypher.core.node_classes.mappingset method)": [[4, "pycypher.core.node_classes.MappingSet.tree", false]], "tree() (pycypher.core.node_classes.match method)": [[4, "pycypher.core.node_classes.Match.tree", false]], "tree() (pycypher.core.node_classes.matchlist method)": [[4, "pycypher.core.node_classes.MatchList.tree", false]], "tree() (pycypher.core.node_classes.multiplication method)": [[4, "pycypher.core.node_classes.Multiplication.tree", false]], "tree() (pycypher.core.node_classes.node method)": [[4, "pycypher.core.node_classes.Node.tree", false]], "tree() (pycypher.core.node_classes.nodenamelabel method)": [[4, "pycypher.core.node_classes.NodeNameLabel.tree", false]], "tree() (pycypher.core.node_classes.not method)": [[4, "pycypher.core.node_classes.Not.tree", false]], "tree() (pycypher.core.node_classes.objectasseries method)": [[4, "pycypher.core.node_classes.ObjectAsSeries.tree", false]], "tree() (pycypher.core.node_classes.objectattributelookup method)": [[4, "pycypher.core.node_classes.ObjectAttributeLookup.tree", false]], "tree() (pycypher.core.node_classes.or method)": [[4, "pycypher.core.node_classes.Or.tree", false]], "tree() (pycypher.core.node_classes.projection method)": [[4, "pycypher.core.node_classes.Projection.tree", false]], "tree() (pycypher.core.node_classes.query method)": [[4, "pycypher.core.node_classes.Query.tree", false]], "tree() (pycypher.core.node_classes.relationship method)": [[4, "pycypher.core.node_classes.Relationship.tree", false]], "tree() (pycypher.core.node_classes.relationshipchain method)": [[4, "pycypher.core.node_classes.RelationshipChain.tree", false]], "tree() (pycypher.core.node_classes.relationshipchainlist method)": [[4, "pycypher.core.node_classes.RelationshipChainList.tree", false]], "tree() (pycypher.core.node_classes.relationshipleftright method)": [[4, "pycypher.core.node_classes.RelationshipLeftRight.tree", false]], "tree() (pycypher.core.node_classes.relationshiprightleft method)": [[4, "pycypher.core.node_classes.RelationshipRightLeft.tree", false]], "tree() (pycypher.core.node_classes.return method)": [[4, "pycypher.core.node_classes.Return.tree", false]], "tree() (pycypher.core.node_classes.size method)": [[4, "pycypher.core.node_classes.Size.tree", false]], "tree() (pycypher.core.node_classes.subtraction method)": [[4, "pycypher.core.node_classes.Subtraction.tree", false]], "tree() (pycypher.core.node_classes.where method)": [[4, "pycypher.core.node_classes.Where.tree", false]], "tree() (pycypher.core.node_classes.withclause method)": [[4, "pycypher.core.node_classes.WithClause.tree", false]], "tree() (pycypher.core.tree_mixin.treemixin method)": [[5, "pycypher.core.tree_mixin.TreeMixin.tree", false]], "treemixin (class in pycypher.core.tree_mixin)": [[5, "pycypher.core.tree_mixin.TreeMixin", false]], "trigger_gather_constraints_to_match() (pycypher.core.node_classes.cypher method)": [[4, "pycypher.core.node_classes.Cypher.trigger_gather_constraints_to_match", false]], "triggeredlookupprocessor (class in pycypher.etl.goldberg)": [[8, "pycypher.etl.goldberg.TriggeredLookupProcessor", false]], "type_check() (pycypher.core.node_classes.predicate method)": [[4, "pycypher.core.node_classes.Predicate.type_check", false]], "unfinished() (pycypher.etl.data_source.datasource method)": [[6, "pycypher.etl.data_source.DataSource.unfinished", false]], "value() (pycypher.core.node_classes.objectattributelookup method)": [[4, "pycypher.core.node_classes.ObjectAttributeLookup.value", false]], "variableattribute (class in pycypher.etl.trigger)": [[11, "pycypher.etl.trigger.VariableAttribute", false]], "walk() (pycypher.core.cypher_parser.cypherparser method)": [[3, "pycypher.core.cypher_parser.CypherParser.walk", false]], "walk() (pycypher.core.tree_mixin.treemixin method)": [[5, "pycypher.core.tree_mixin.TreeMixin.walk", false]], "walk_constraints() (pycypher.etl.goldberg.goldberg method)": [[8, "pycypher.etl.goldberg.Goldberg.walk_constraints", false]], "where (class in pycypher.core.node_classes)": [[4, "pycypher.core.node_classes.Where", false]], "withclause (class in pycypher.core.node_classes)": [[4, "pycypher.core.node_classes.WithClause", false]]}, "objects": {"pycypher.core": [[2, 0, 0, "-", "cypher_lexer"], [3, 0, 0, "-", "cypher_parser"], [4, 0, 0, "-", "node_classes"], [5, 0, 0, "-", "tree_mixin"]], "pycypher.core.cypher_lexer": [[2, 1, 1, "", "t_STRING"], [2, 1, 1, "", "t_WORD"]], "pycypher.core.cypher_parser": [[3, 2, 1, "", "CypherParser"], [3, 1, 1, "", "p_aggregation"], [3, 1, 1, "", "p_alias"], [3, 1, 1, "", "p_aliased_name"], [3, 1, 1, "", "p_binary_expression"], [3, 1, 1, "", "p_binary_function"], [3, 1, 1, "", "p_binary_operator"], [3, 1, 1, "", "p_collect"], [3, 1, 1, "", "p_cypher"], [3, 1, 1, "", "p_float"], [3, 1, 1, "", "p_incomplete_relationship_chain"], [3, 1, 1, "", "p_integer"], [3, 1, 1, "", "p_left_right"], [3, 1, 1, "", "p_literal"], [3, 1, 1, "", "p_mapping_list"], [3, 1, 1, "", "p_match_pattern"], [3, 1, 1, "", "p_name_label"], [3, 1, 1, "", "p_node"], [3, 1, 1, "", "p_object_attribute_lookup"], [3, 1, 1, "", "p_predicate"], [3, 1, 1, "", "p_projection"], [3, 1, 1, "", "p_query"], [3, 1, 1, "", "p_relationship"], [3, 1, 1, "", "p_relationship_chain"], [3, 1, 1, "", "p_relationship_chain_list"], [3, 1, 1, "", "p_return"], [3, 1, 1, "", "p_right_left"], [3, 1, 1, "", "p_string"], [3, 1, 1, "", "p_where"], [3, 1, 1, "", "p_with_as_series"], [3, 1, 1, "", "p_with_clause"]], "pycypher.core.cypher_parser.CypherParser": [[3, 3, 1, "", "walk"]], "pycypher.core.node_classes": [[4, 2, 1, "", "Addition"], [4, 2, 1, "", "Aggregation"], [4, 2, 1, "", "Alias"], [4, 2, 1, "", "AliasedName"], [4, 2, 1, "", "And"], [4, 2, 1, "", "BinaryBoolean"], [4, 2, 1, "", "Collect"], [4, 2, 1, "", "Collection"], [4, 2, 1, "", "Cypher"], [4, 2, 1, "", "Distinct"], [4, 2, 1, "", "Division"], [4, 2, 1, "", "Equals"], [4, 2, 1, "", "Evaluable"], [4, 2, 1, "", "GreaterThan"], [4, 2, 1, "", "LessThan"], [4, 2, 1, "", "Literal"], [4, 2, 1, "", "Mapping"], [4, 2, 1, "", "MappingSet"], [4, 2, 1, "", "Match"], [4, 2, 1, "", "MatchList"], [4, 2, 1, "", "Multiplication"], [4, 2, 1, "", "Node"], [4, 2, 1, "", "NodeNameLabel"], [4, 2, 1, "", "Not"], [4, 2, 1, "", "ObjectAsSeries"], [4, 2, 1, "", "ObjectAttributeLookup"], [4, 2, 1, "", "Or"], [4, 2, 1, "", "Predicate"], [4, 2, 1, "", "Projection"], [4, 2, 1, "", "Query"], [4, 2, 1, "", "Relationship"], [4, 2, 1, "", "RelationshipChain"], [4, 2, 1, "", "RelationshipChainList"], [4, 2, 1, "", "RelationshipLeftRight"], [4, 2, 1, "", "RelationshipRightLeft"], [4, 2, 1, "", "Return"], [4, 2, 1, "", "Size"], [4, 2, 1, "", "Subtraction"], [4, 2, 1, "", "Where"], [4, 2, 1, "", "WithClause"]], "pycypher.core.node_classes.Addition": [[4, 4, 1, "", "children"], [4, 3, 1, "", "tree"]], "pycypher.core.node_classes.Aggregation": [[4, 4, 1, "", "children"], [4, 3, 1, "", "tree"]], "pycypher.core.node_classes.Alias": [[4, 4, 1, "", "children"], [4, 3, 1, "", "tree"]], "pycypher.core.node_classes.AliasedName": [[4, 4, 1, "", "children"], [4, 3, 1, "", "tree"]], "pycypher.core.node_classes.And": [[4, 3, 1, "", "tree"]], "pycypher.core.node_classes.BinaryBoolean": [[4, 5, 1, "", "left_side_types"], [4, 5, 1, "", "right_side_types"], [4, 3, 1, "", "tree"]], "pycypher.core.node_classes.Collect": [[4, 4, 1, "", "children"], [4, 3, 1, "", "tree"]], "pycypher.core.node_classes.Collection": [[4, 4, 1, "", "children"], [4, 3, 1, "", "tree"]], "pycypher.core.node_classes.Cypher": [[4, 4, 1, "", "children"], [4, 3, 1, "", "get_return_clause"], [4, 3, 1, "", "tree"], [4, 3, 1, "", "trigger_gather_constraints_to_match"]], "pycypher.core.node_classes.Distinct": [[4, 4, 1, "", "children"], [4, 3, 1, "", "tree"]], "pycypher.core.node_classes.Division": [[4, 5, 1, "", "right_side_types"], [4, 3, 1, "", "tree"]], "pycypher.core.node_classes.Equals": [[4, 3, 1, "", "tree"]], "pycypher.core.node_classes.Evaluable": [[4, 3, 1, "", "evaluate"]], "pycypher.core.node_classes.GreaterThan": [[4, 3, 1, "", "tree"]], "pycypher.core.node_classes.LessThan": [[4, 3, 1, "", "tree"]], "pycypher.core.node_classes.Literal": [[4, 3, 1, "", "tree"]], "pycypher.core.node_classes.Mapping": [[4, 4, 1, "", "children"], [4, 4, 1, "", "constraints"], [4, 3, 1, "", "tree"]], "pycypher.core.node_classes.MappingSet": [[4, 4, 1, "", "children"], [4, 3, 1, "", "tree"]], "pycypher.core.node_classes.Match": [[4, 4, 1, "", "children"], [4, 3, 1, "", "gather_constraints"], [4, 3, 1, "", "solutions"], [4, 3, 1, "", "tree"]], "pycypher.core.node_classes.MatchList": [[4, 3, 1, "", "tree"]], "pycypher.core.node_classes.Multiplication": [[4, 3, 1, "", "tree"]], "pycypher.core.node_classes.Node": [[4, 4, 1, "", "children"], [4, 4, 1, "", "constraints"], [4, 3, 1, "", "tree"]], "pycypher.core.node_classes.NodeNameLabel": [[4, 4, 1, "", "children"], [4, 3, 1, "", "tree"]], "pycypher.core.node_classes.Not": [[4, 5, 1, "", "argument_types"], [4, 3, 1, "", "tree"]], "pycypher.core.node_classes.ObjectAsSeries": [[4, 4, 1, "", "children"], [4, 3, 1, "", "tree"]], "pycypher.core.node_classes.ObjectAttributeLookup": [[4, 4, 1, "", "children"], [4, 3, 1, "", "tree"], [4, 3, 1, "", "value"]], "pycypher.core.node_classes.Or": [[4, 3, 1, "", "tree"]], "pycypher.core.node_classes.Predicate": [[4, 5, 1, "", "argument_types"], [4, 4, 1, "", "children"], [4, 5, 1, "", "left_side_types"], [4, 5, 1, "", "right_side_types"], [4, 3, 1, "", "type_check"]], "pycypher.core.node_classes.Projection": [[4, 4, 1, "", "children"], [4, 3, 1, "", "tree"]], "pycypher.core.node_classes.Query": [[4, 4, 1, "", "children"], [4, 3, 1, "", "tree"]], "pycypher.core.node_classes.Relationship": [[4, 4, 1, "", "children"], [4, 3, 1, "", "tree"]], "pycypher.core.node_classes.RelationshipChain": [[4, 4, 1, "", "children"], [4, 3, 1, "", "tree"]], "pycypher.core.node_classes.RelationshipChainList": [[4, 4, 1, "", "children"], [4, 3, 1, "", "tree"]], "pycypher.core.node_classes.RelationshipLeftRight": [[4, 4, 1, "", "children"], [4, 4, 1, "", "constraints"], [4, 3, 1, "", "tree"]], "pycypher.core.node_classes.RelationshipRightLeft": [[4, 4, 1, "", "children"], [4, 3, 1, "", "tree"]], "pycypher.core.node_classes.Return": [[4, 4, 1, "", "children"], [4, 3, 1, "", "gather_variables"], [4, 3, 1, "", "tree"]], "pycypher.core.node_classes.Size": [[4, 4, 1, "", "children"], [4, 3, 1, "", "tree"]], "pycypher.core.node_classes.Subtraction": [[4, 3, 1, "", "tree"]], "pycypher.core.node_classes.Where": [[4, 4, 1, "", "children"], [4, 4, 1, "", "constraints"], [4, 3, 1, "", "tree"]], "pycypher.core.node_classes.WithClause": [[4, 4, 1, "", "aggregated_variables"], [4, 4, 1, "", "all_variables"], [4, 4, 1, "", "children"], [4, 4, 1, "", "non_aggregated_variables"], [4, 3, 1, "", "transform_solutions_by_aggregations"], [4, 3, 1, "", "tree"]], "pycypher.core.tree_mixin": [[5, 2, 1, "", "TreeMixin"]], "pycypher.core.tree_mixin.TreeMixin": [[5, 4, 1, "", "children"], [5, 3, 1, "", "enclosing_class"], [5, 4, 1, "", "parse_obj"], [5, 3, 1, "", "print_tree"], [5, 4, 1, "", "root"], [5, 3, 1, "", "tree"], [5, 3, 1, "", "walk"]], "pycypher.etl": [[6, 0, 0, "-", "data_source"], [7, 0, 0, "-", "fact"], [8, 0, 0, "-", "goldberg"], [9, 0, 0, "-", "message_types"], [10, 0, 0, "-", "solver"], [11, 0, 0, "-", "trigger"]], "pycypher.etl.data_source": [[6, 2, 1, "", "CSVDataSource"], [6, 2, 1, "", "DataSource"], [6, 2, 1, "", "DataSourceMapping"], [6, 2, 1, "", "FixtureDataSource"], [6, 2, 1, "", "ParquetFileDataSource"], [6, 2, 1, "", "RawDataThread"]], "pycypher.etl.data_source.CSVDataSource": [[6, 3, 1, "", "rows"]], "pycypher.etl.data_source.DataSource": [[6, 3, 1, "", "attach_mapping"], [6, 3, 1, "", "attach_queue"], [6, 3, 1, "", "from_uri"], [6, 3, 1, "", "generate_raw_facts_from_row"], [6, 3, 1, "", "queue_rows"], [6, 3, 1, "", "rows"], [6, 3, 1, "", "start"], [6, 3, 1, "", "unfinished"]], "pycypher.etl.data_source.DataSourceMapping": [[6, 4, 1, "", "is_attribute_mapping"], [6, 4, 1, "", "is_label_mapping"], [6, 4, 1, "", "is_relationship_mapping"], [6, 3, 1, "", "process_against_raw_datum"]], "pycypher.etl.data_source.FixtureDataSource": [[6, 3, 1, "", "rows"]], "pycypher.etl.data_source.ParquetFileDataSource": [[6, 3, 1, "", "rows"]], "pycypher.etl.data_source.RawDataThread": [[6, 3, 1, "", "block"], [6, 3, 1, "", "run"]], "pycypher.etl.fact": [[7, 2, 1, "", "AtomicFact"], [7, 2, 1, "", "FactCollection"], [7, 2, 1, "", "FactNodeHasAttributeWithValue"], [7, 2, 1, "", "FactNodeHasLabel"], [7, 2, 1, "", "FactNodeRelatedToNode"], [7, 2, 1, "", "FactRelationshipHasAttributeWithValue"], [7, 2, 1, "", "FactRelationshipHasLabel"], [7, 2, 1, "", "FactRelationshipHasSourceNode"], [7, 2, 1, "", "FactRelationshipHasTargetNode"]], "pycypher.etl.fact.FactCollection": [[7, 3, 1, "", "append"], [7, 3, 1, "", "insert"], [7, 3, 1, "", "is_empty"], [7, 3, 1, "", "node_has_attribute_with_value_facts"], [7, 3, 1, "", "node_has_label_facts"], [7, 3, 1, "", "node_with_id_exists"], [7, 3, 1, "", "query"], [7, 3, 1, "", "relationship_has_attribute_with_value_facts"], [7, 3, 1, "", "relationship_has_source_node_facts"], [7, 3, 1, "", "relationship_has_target_node_facts"]], "pycypher.etl.goldberg": [[8, 2, 1, "", "CheckFactAgainstTriggersQueueProcessor"], [8, 2, 1, "", "FactGeneratedQueueProcessor"], [8, 2, 1, "", "Goldberg"], [8, 2, 1, "", "QueueProcessor"], [8, 2, 1, "", "RawDataProcessor"], [8, 2, 1, "", "SubTriggerPair"], [8, 2, 1, "", "TriggeredLookupProcessor"]], "pycypher.etl.goldberg.CheckFactAgainstTriggersQueueProcessor": [[8, 3, 1, "", "process_item_from_queue"]], "pycypher.etl.goldberg.FactGeneratedQueueProcessor": [[8, 3, 1, "", "process_item_from_queue"]], "pycypher.etl.goldberg.Goldberg": [[8, 3, 1, "", "attach_data_source"], [8, 3, 1, "", "attach_fact_collection"], [8, 3, 1, "", "attach_raw_data_processor"], [8, 3, 1, "", "block_until_finished"], [8, 4, 1, "", "constraints"], [8, 3, 1, "", "cypher_trigger"], [8, 3, 1, "", "facts_matching_constraints"], [8, 3, 1, "", "halt"], [8, 3, 1, "", "has_unfinished_data_source"], [8, 3, 1, "", "monitor"], [8, 3, 1, "", "start_threads"], [8, 3, 1, "", "walk_constraints"]], "pycypher.etl.goldberg.RawDataProcessor": [[8, 3, 1, "", "process_item_from_queue"]], "pycypher.etl.goldberg.TriggeredLookupProcessor": [[8, 3, 1, "", "process_item_from_queue"]], "pycypher.etl.message_types": [[9, 2, 1, "", "ComputationRequest"], [9, 2, 1, "", "DataSourcesExhausted"], [9, 2, 1, "", "EndOfData"], [9, 2, 1, "", "Message"], [9, 2, 1, "", "RawDatum"]], "pycypher.etl.solver": [[10, 2, 1, "", "Constraint"], [10, 2, 1, "", "ConstraintNodeHasAttributeWithValue"], [10, 2, 1, "", "ConstraintNodeHasLabel"], [10, 2, 1, "", "ConstraintRelationshipHasLabel"], [10, 2, 1, "", "ConstraintRelationshipHasSourceNode"], [10, 2, 1, "", "ConstraintRelationshipHasTargetNode"], [10, 2, 1, "", "ConstraintVariableRefersToSpecificObject"], [10, 2, 1, "", "IsTrue"]], "pycypher.etl.trigger": [[11, 2, 1, "", "CypherTrigger"], [11, 2, 1, "", "VariableAttribute"]], "pycypher.shims": [[12, 0, 0, "-", "networkx_cypher"]], "pycypher.shims.networkx_cypher": [[12, 2, 1, "", "NetworkX"]], "pycypher.shims.networkx_cypher.NetworkX": [[12, 3, 1, "", "make_fact_collection"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "attribute", "Python attribute"]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method", "4": "py:property", "5": "py:attribute"}, "terms": {"": [1, 4, 6], "0": [4, 6, 8], "1": 1, "2": 1, "5": 1, "9": 2, "A": [4, 6, 7, 8, 10, 12], "AND": [3, 4], "AS": [3, 4], "And": [0, 1, 4], "But": [1, 5], "For": [1, 4], "If": [1, 4, 5, 7], "In": 1, "It": [1, 2, 3, 4, 5, 7, 12], "NOT": 4, "Not": [0, 1, 4], "OR": [3, 4], "On": 1, "Or": [0, 1, 4], "That": 1, "The": [1, 2, 3, 4, 5, 7, 9, 10, 12], "Then": [1, 4], "There": [1, 6], "To": 1, "WITH": [3, 4], "Will": 6, "__eq__": 10, "__hash__": 10, "__init__": 2, "__main__": 1, "__repr__": [10, 12], "__str__": 12, "_evalu": 4, "_monitor": 8, "abc": [8, 9], "abl": 1, "abov": 1, "abstract": [1, 4, 5, 6, 7], "accept": 1, "activ": 1, "actual": 1, "add": 4, "addit": [0, 1, 3, 4], "addition": 1, "advantag": 1, "after": [6, 9], "against": [1, 6, 8], "aggreg": [0, 1, 3, 4], "aggregated_vari": [0, 1, 4], "alert": 1, "alia": [0, 1, 3, 4], "alias": 4, "aliased_nam": 3, "aliasednam": [0, 1, 4], "all": [1, 4, 8, 9, 10], "all_vari": [0, 1, 4], "allow": 4, "also": 1, "an": [1, 4, 5, 6, 7], "ani": [2, 4, 6, 7, 8, 9, 10], "annot": 4, "anoth": [4, 5, 7, 8, 10], "anywai": 5, "api": 1, "append": [0, 1, 7], "appli": [1, 4], "apt": 1, "ar": [1, 4, 7, 8, 9], "arbitrari": 1, "arg": [4, 5, 7, 11], "arg1": 8, "argument": 4, "argument_typ": [0, 1, 4], "arrow": 4, "ask": 1, "assign": [1, 12], "ast": [0, 3, 5], "astral": 1, "atom": 7, "atomicfact": [0, 1, 6, 7, 8], "attach": [6, 8], "attach_data_sourc": [0, 1, 8], "attach_fact_collect": [0, 1, 8], "attach_map": [0, 1, 6], "attach_queu": [0, 1, 6], "attach_raw_data_processor": [0, 1, 8], "attribut": [1, 5, 6, 7, 12], "attribute_kei": 6, "attribute_set": 11, "backtrack": 1, "base": [4, 5, 6, 7, 10], "bash": 1, "basic": 6, "batch": 6, "been": 4, "begin": 1, "being": 1, "between": [4, 6, 7, 10], "bin": 1, "binari": 4, "binary_express": 3, "binary_funct": 3, "binary_oper": 3, "binaryboolean": [0, 1, 4], "bit": 9, "block": [0, 1, 6, 8], "block_until_finish": [0, 1, 8], "bool": [4, 6, 7, 8, 10], "boolean": 4, "bore": 1, "box": 1, "break": 2, "brew": 1, "build": 1, "built": 1, "bunch": 1, "c": 1, "calcul": 4, "call": [1, 3, 4], "callabl": 11, "can": [1, 4, 5], "capabl": 4, "certain": 10, "chain": 4, "check": [1, 4, 7, 8, 10, 11], "check_fact_against_triggers_queu": 8, "checkfactagainsttriggersqueueprocessor": [0, 1, 8], "child": 4, "children": [0, 1, 4, 5], "cl": 5, "class": [0, 1, 3, 5, 6, 7, 8, 9, 10, 11, 12], "classmethod": 6, "claus": 4, "clean": 1, "collect": [0, 1, 3, 4, 7, 8, 12], "colon": 3, "column": 4, "com": 1, "comma": 3, "complic": 1, "computationrequest": [0, 1, 9], "concret": 1, "connect": 4, "consid": 5, "consist": 4, "constraint": [0, 1, 3, 4, 8, 11], "constraintnodehasattributewithvalu": [0, 1, 10], "constraintnodehaslabel": [0, 1, 10], "constraintrelationshiphaslabel": [0, 1, 10], "constraintrelationshiphassourcenod": [0, 1, 10], "constraintrelationshiphastargetnod": [0, 1, 10], "constraintvariablereferstospecificobject": [0, 1, 10], "construct": [1, 12], "contain": [1, 4, 7], "context": [4, 10], "contrast": 1, "convert": [4, 12], "cool": 1, "copi": 12, "core": [2, 3, 4, 5], "correspond": 4, "could": 6, "creat": [1, 3, 4, 6, 7, 12], "csv": 6, "csvdatasourc": [0, 1, 6], "curl": 1, "current": [4, 5, 10, 12], "cypher": [0, 4, 8], "cypher_lex": 2, "cypher_pars": 3, "cypher_stat": 1, "cypher_str": 11, "cypher_text": 3, "cypher_trigg": [0, 1, 8], "cypherpars": [0, 1, 3], "cyphertrigg": [0, 1, 8, 11], "dai": 1, "dash": 3, "data": [0, 1, 8, 9], "data_sourc": [6, 8, 9], "data_source_map": 6, "databas": 10, "datasourc": [0, 1, 6, 8, 9], "datasourcemap": [0, 1, 6], "datasourcesexhaust": [0, 1, 9], "datum": 6, "decor": 8, "deep": 12, "defin": [1, 2, 4, 10], "definit": 4, "delai": 6, "delet": 1, "depend": [1, 7], "depth": 4, "design": 1, "develop": 1, "dict": [4, 6, 8, 9], "dictionari": [1, 4, 6], "differ": [4, 6, 10], "digraph": 12, "direct": [1, 12], "directli": [5, 7, 9], "disk": 6, "distinct": [0, 1, 3, 4], "distribut": 1, "divis": [0, 1, 4], "do": 1, "doc": 1, "document": 1, "doe": 10, "domain": 1, "don": 1, "dot": [3, 4], "drive": 1, "duplic": 4, "dure": 4, "each": [4, 5, 7, 12], "earli": 1, "easi": 1, "edg": 12, "edit": 1, "elimin": 1, "emit": 6, "empti": [7, 12], "enclos": 5, "enclosing_class": 5, "end": [1, 2], "endofdata": [0, 1, 9], "engin": 1, "ensur": 10, "entir": 4, "entiti": 4, "environ": 1, "equal": [0, 1, 3, 4, 10], "eras": 1, "error": 7, "etc": [1, 6], "etl": [6, 7, 8, 9, 10, 11], "evalu": [0, 1, 4, 10], "event": 9, "eventu": 6, "everi": [1, 5], "everyth": 8, "exact": 1, "exampl": 1, "execut": [1, 7], "exhaust": 9, "exist": 7, "expand": 6, "expect": 4, "experiment": 1, "express": 4, "fact": [0, 1, 4, 6, 8, 11, 12], "fact1": 1, "fact2": 1, "fact3": 1, "fact4": 1, "fact5": 1, "fact_collect": [1, 4, 8], "fact_gener": 8, "fact_generated_queu": 8, "factcollect": [0, 1, 4, 8, 12], "factgeneratedqueueprocessor": [0, 1, 8], "factnodehasattributewithvalu": [0, 1, 7], "factnodehaslabel": [0, 1, 7], "factnoderelatedtonod": [0, 1, 7], "factori": 6, "factrelationshiphasattributewithvalu": [0, 1, 7], "factrelationshiphaslabel": [0, 1, 7], "factrelationshiphassourcenod": [0, 1, 7], "factrelationshiphastargetnod": [0, 1, 7], "facts_matching_constraint": [0, 1, 8], "fals": [6, 7], "featur": 6, "few": 1, "file": [2, 6], "filter": 4, "final": 1, "find": [4, 5], "finish": [6, 8], "finit": [1, 6], "fire": 11, "first": [1, 2, 4, 7], "fixabl": 1, "fixturedatasourc": [0, 1, 6], "float": [3, 4, 6], "flow": 8, "follow": [1, 4, 5], "foo": 1, "form": [1, 4], "format": 1, "found": [4, 5, 7], "from": [1, 4, 6, 8, 9, 12], "from_uri": [0, 1, 6], "fssl": 1, "function": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "gather": 4, "gather_constraint": [0, 1, 4], "gather_vari": [0, 1, 4], "gener": [3, 4, 5, 6, 7, 8], "generate_raw_facts_from_row": [0, 1, 6], "get": [1, 4, 6], "get_return_claus": [0, 1, 4], "githubusercont": 1, "given": [4, 7, 10], "go": 8, "god": 1, "goldberg": [0, 1], "got": 1, "gotten": 1, "grammar": 1, "graph": [1, 4, 10, 12], "greater": 4, "greaterthan": [0, 1, 3, 4], "grow": 1, "gt": 4, "ha": [1, 4, 5, 6, 7, 10], "halt": [0, 1, 8], "handl": 4, "hang": 6, "happen": [1, 5], "hard": 1, "has_unfinished_data_sourc": [0, 1, 8], "hash": 10, "have": [1, 4, 5, 7, 8, 10], "haven": 1, "head": 1, "help": 1, "helper": 8, "hi": 4, "hierarchi": 5, "hold": 8, "home": 1, "homebrew": 1, "hope": 1, "html": 1, "http": 1, "i": [1, 2, 3, 4, 5, 6, 7, 9, 10], "id": [1, 7, 10, 12], "idea": 1, "identifi": [7, 10], "identifier_kei": 6, "import": [1, 2, 4], "includ": [4, 5, 6], "incoming_queu": 8, "incomplet": 1, "incomplete_relationship_chain": 3, "index": 7, "indic": 11, "individu": 1, "infinit": 6, "infix": 4, "inform": 7, "inherit": 4, "insert": [0, 1, 7, 8], "insid": [4, 5], "instanc": [1, 4, 5, 7, 10], "instanti": 1, "int": [4, 7, 8, 10], "integ": 3, "intend": 7, "intuit": 1, "is_attribute_map": [0, 1, 6], "is_empti": [0, 1, 7], "is_label_map": [0, 1, 6], "is_relationship_map": [0, 1, 6], "istru": [0, 1, 10], "item": [4, 8], "iter": [4, 7, 8], "its": [4, 5], "itself": [1, 2, 5], "just": [3, 4, 6], "kafka": 6, "kei": [1, 4, 6], "keyword": 4, "kid": 1, "know": 1, "kwarg": [4, 6, 11], "label": [1, 4, 6, 7, 10, 12], "languag": [1, 2], "larg": 1, "lcurli": 3, "left": 4, "left_right": 3, "left_sid": 4, "left_side_typ": [0, 1, 4], "len": 4, "length": 4, "less": 4, "lessthan": [0, 1, 3, 4], "level": 8, "lex": [1, 2], "lexer": [0, 1], "lextoken": 2, "librari": [1, 4, 5], "like": [1, 4], "list": [1, 3, 4, 5, 6, 7, 8, 11, 12], "liter": [0, 1, 3, 4], "ll": 1, "load": [6, 8], "local": 6, "logic": [1, 4], "long": 1, "look": 4, "lookup": 4, "loop": [6, 8], "lparen": 3, "lsquar": 3, "lssf": 1, "lt": 4, "luke": 1, "machin": 8, "mai": 4, "main": [3, 8], "make": [1, 6, 8], "make_fact_collect": [0, 1, 12], "makefil": 1, "manag": [4, 8], "manipul": 7, "map": [0, 1, 4, 6], "mapping_list": [3, 4], "mappingset": [0, 1, 4], "mark": 9, "match": [0, 1, 3, 4, 7, 8], "match_claus": 4, "match_list": 4, "match_pattern": 3, "matchlist": [0, 1, 4], "mean": 1, "messag": [0, 1], "message_typ": 9, "method": [1, 3, 4, 5, 6, 7, 12], "might": 9, "modul": [1, 3, 4, 10], "monitor": [0, 1, 8], "multipl": [0, 1, 4, 7], "must": 10, "myrelationship": 1, "n": 1, "name": [1, 4, 6, 10], "name_label": [3, 4], "navig": 5, "nearest": 5, "need": [1, 4, 6, 9], "negat": 4, "networkx": [0, 1], "networkx_cyph": 12, "new": 8, "next": 1, "node": [0, 1, 3, 5, 7, 10, 12], "node1_id": 7, "node2_id": 7, "node_class": 4, "node_has_attribute_with_value_fact": [0, 1, 7], "node_has_label_fact": [0, 1, 7], "node_id": [7, 10], "node_name_label": 4, "node_with_id_exist": [0, 1, 7], "nodenamelabel": [0, 1, 4], "non_aggregated_vari": [0, 1, 4], "none": [1, 4, 5, 6, 7, 8, 9, 10, 11], "note": [4, 5], "notic": 1, "notimplementederror": 7, "number": [1, 4, 6], "nx": 12, "object": [1, 4, 5, 6, 7, 8, 10, 11, 12], "object_as_seri": 4, "object_attribute_lookup": [3, 4], "object_nam": 4, "objectasseri": [0, 1, 4], "objectattributelookup": [0, 1, 4], "occur": 7, "old": 1, "one": [4, 6, 7], "onli": 1, "onto": [6, 8, 9], "oper": 4, "operand": 4, "option": 4, "order": 1, "origin": 4, "other": [1, 4, 6, 10], "otherth": 1, "otherwis": [5, 7], "out": 1, "outgoing_queu": 8, "over": [1, 4, 7], "p": 3, "p_aggreg": [0, 1, 3], "p_alia": [0, 1, 3], "p_aliased_nam": [0, 1, 3], "p_binary_express": [0, 1, 3], "p_binary_funct": [0, 1, 3], "p_binary_oper": [0, 1, 3], "p_collect": [0, 1, 3], "p_cypher": [0, 1, 3], "p_float": [0, 1, 3], "p_incomplete_relationship_chain": [0, 1, 3], "p_integ": [0, 1, 3], "p_left_right": [0, 1, 3], "p_liter": [0, 1, 3], "p_mapping_list": [0, 1, 3], "p_match_pattern": [0, 1, 3], "p_name_label": [0, 1, 3], "p_node": [0, 1, 3], "p_object_attribute_lookup": [0, 1, 3], "p_predic": [0, 1, 3], "p_project": [0, 1, 3], "p_queri": [0, 1, 3], "p_relationship": [0, 1, 3], "p_relationship_chain": [0, 1, 3], "p_relationship_chain_list": [0, 1, 3], "p_return": [0, 1, 3], "p_right_left": [0, 1, 3], "p_string": [0, 1, 3], "p_where": [0, 1, 3], "p_with_as_seri": [0, 1, 3], "p_with_claus": [0, 1, 3], "packag": [1, 2, 3], "pair": [4, 8], "paramet": 7, "parameter_nam": 11, "parent": 5, "parquet": 6, "parquetfiledatasourc": [0, 1, 6], "pars": [1, 2, 3], "parse_obj": 5, "parser": [0, 1, 2], "parseresult": 6, "partial": 1, "pass": 1, "pattern": 4, "perform": 4, "place": [6, 8], "ply": [1, 2], "point": 4, "pointless": 4, "popul": 12, "posit": 7, "positivefloat": 4, "positiveint": 4, "potenti": 1, "predic": [0, 1, 3, 4, 10], "pretti": [4, 5], "previou": 4, "print": [1, 4, 5], "print_tre": [1, 5], "probabl": 1, "problem": [1, 3], "process": [1, 2, 4, 6, 8], "process_against_raw_datum": [0, 1, 6], "process_item_from_queu": [0, 1, 8], "processor": 8, "progress": 1, "project": [0, 1, 3, 4], "properti": [4, 5, 6, 8, 12], "protocol": 11, "provid": [1, 4, 5], "put": [1, 9], "py": [1, 2], "pycyph": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "python": 4, "queri": [0, 3, 4, 7], "queryvalueofnodeattribut": 7, "queue": [6, 8, 9], "queue_class": 8, "queue_list": 8, "queue_obj": 6, "queue_opt": 8, "queue_row": [0, 1, 6], "queuegener": 8, "queueprocessor": [0, 1, 8], "rais": [4, 5, 7], "raw": [1, 6, 8], "raw_data_processor": 8, "raw_input_queu": 8, "rawdataprocessor": [0, 1, 8], "rawdatathread": [0, 1, 6], "rawdatum": [0, 1, 6, 9], "rcurli": 3, "re": 1, "read": [6, 8], "reader": 1, "realli": 1, "recogn": 7, "recurs": 5, "refer": [4, 5, 10], "regist": 8, "relat": 7, "relationship": [0, 1, 3, 4, 6, 7, 10], "relationship_chain": 3, "relationship_chain_list": 3, "relationship_has_attribute_with_value_fact": [0, 1, 7], "relationship_has_source_node_fact": [0, 1, 7], "relationship_has_target_node_fact": [0, 1, 7], "relationship_id": 7, "relationship_label": 7, "relationship_nam": 10, "relationshipchain": [0, 1, 4], "relationshipchainlist": [0, 1, 4], "relationshipleftright": [0, 1, 4], "relationshiprightleft": [0, 1, 4], "remov": 4, "replac": 4, "repres": [1, 4, 7, 10, 12], "represent": [4, 5, 10, 12], "requir": 1, "respons": 3, "result": [1, 4, 7, 8], "retriev": 7, "return": [0, 1, 3, 4, 5, 7, 8, 10, 11, 12], "return_claus": 4, "rich": [1, 4, 5], "right": [1, 4, 6], "right_left": 3, "right_sid": 4, "right_side_typ": [0, 1, 4], "root": [4, 5], "row": [0, 1, 6, 9], "rparen": 3, "rsquar": 3, "run": [0, 1, 6, 8], "run_monitor": 8, "sai": 1, "said": 1, "satisfact": [1, 3], "satisfi": [1, 4], "script": 1, "search": 5, "second": 7, "see": 11, "semant": [1, 4], "sens": 1, "separ": 4, "seri": 4, "serv": 7, "session": 6, "sever": 4, "sh": 1, "shallow": 6, "share": 4, "shim": [0, 1, 4], "should": [1, 4, 5, 10, 11], "shouldn": 5, "side": 4, "signatur": 11, "simpl": [1, 7], "singleton": 4, "size": [0, 1, 4], "small": 1, "so": 1, "solut": [0, 1, 3, 4], "solv": 3, "solver": [0, 1], "sourc": [0, 1, 7, 8, 9, 10], "source_identifier_kei": 6, "source_label": 6, "source_node_id": 7, "source_node_nam": 10, "special": 9, "specif": [6, 7, 10], "specifi": [4, 5, 7, 10], "start": [0, 1, 6, 8], "start_thread": [0, 1, 8], "state": 1, "statement": [1, 4, 7], "step": [1, 2, 4], "still": [1, 6, 8], "stop": 8, "str": [3, 4, 5, 6, 7, 8, 9, 10, 11], "streaam": 6, "stream": 6, "string": [2, 3, 8, 10, 12], "structur": [1, 4, 5], "style": 1, "sub": 8, "subclass": [6, 7], "subset": 1, "subtract": [0, 1, 4], "subtriggerpair": [0, 1, 8], "sudo": 1, "sum": 4, "superclass": 4, "support": 1, "syntax": [1, 4, 5], "system": [1, 7], "t": [1, 2, 5], "t_string": [0, 1, 2], "t_word": [0, 1, 2], "take": 1, "target": [1, 7, 10], "target_identifier_kei": 6, "target_label": 6, "target_node_id": 7, "target_node_nam": 10, "tediou": 1, "test": [1, 6, 11], "than": 4, "thei": 11, "them": [1, 4, 6, 8], "therefor": 1, "thi": [1, 2, 3, 4, 5, 6, 7, 9, 10, 12], "thing": 1, "those": [1, 3], "thread": [6, 8], "through": 4, "togeth": 4, "token": 2, "transform": 4, "transform_solutions_by_aggreg": [0, 1, 4], "travers": [4, 5], "treat": 1, "tree": [0, 1, 3, 4], "tree_mixin": 5, "treemixin": [3, 4, 5], "trigger": [0, 1, 4, 8], "trigger_gather_constraints_to_match": [0, 1, 4], "triggeredlookupprocessor": [0, 1, 8], "trivial": 1, "true": [7, 8, 10], "truth": [4, 7], "tupl": 3, "turn": 4, "two": [4, 7], "type": [0, 1, 4, 5, 7, 8, 10], "type_check": [0, 1, 4], "typic": 5, "ubuntu": 1, "ugli": 1, "unari": 4, "understand": 1, "unfinish": [0, 1, 6], "union": 4, "uniqu": 12, "unit": 1, "unknown": 7, "unread": 6, "until": [5, 6, 8], "up": [4, 5], "uri": 6, "us": [2, 4, 5, 6, 7, 10, 11], "util": [7, 8], "uv": 1, "v": 6, "valu": [0, 1, 4, 7, 10], "valueerror": [4, 5, 7], "variabl": [1, 4, 10], "variable_set": 11, "variableattribut": [0, 1, 11], "variou": [1, 4, 7, 10], "ve": 1, "veri": 1, "version": 1, "virtual": 1, "wai": 1, "walk": [0, 1, 3, 4, 5], "walk_constraint": [0, 1, 8], "want": 1, "we": [1, 9, 11], "what": [1, 6], "when": 1, "where": [0, 1, 3, 4], "where_claus": 4, "whether": 8, "which": [1, 2, 3, 4, 5, 7], "whose": [1, 4], "why": 1, "with_as_seri": 3, "with_claus": [3, 4], "withclaus": [0, 1, 4], "within": 4, "without": 1, "woefulli": 1, "word": [1, 3], "work": [1, 5], "would": 1, "wrap": 6, "write": 1, "yacc": 1, "yaccproduct": 3, "yet": [1, 6], "yield": [1, 4, 5, 7, 8], "you": 1, "your": 1, "z_": 2, "z_0": 2, "za": 2}, "titles": ["API", "PyCypher: A Pythonic Cypher Query Builder", "Lexer", "Cypher Parser", "AST Node Classes", "Tree Mixin", "Data Source", "Fact and FactCollection", "Goldberg", "Message Types", "Constraint Solver", "Trigger", "NetworkX Shim"], "titleterms": {"A": 1, "api": 0, "ast": [1, 4], "attribut": [4, 10], "builder": 1, "class": 4, "constraint": 10, "content": 1, "cypher": [1, 3], "data": 6, "everyth": 1, "fact": 7, "factcollect": 7, "gener": 1, "goldberg": 8, "hood": 1, "how": 1, "instal": 1, "lexer": 2, "linux": 1, "mac": 1, "messag": 9, "method": 10, "mixin": 5, "networkx": 12, "node": 4, "parser": 3, "pycyph": 1, "python": 1, "queri": 1, "set": 1, "shim": 12, "solver": 10, "sourc": 6, "tree": 5, "trigger": 11, "type": 9, "under": 1, "up": 1, "us": 1, "window": 1}})